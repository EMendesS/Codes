
PWM_output_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000abc  08000ac4  00010ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000abc  08000abc  00010abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ac0  08000ac0  00010ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000ac4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  08000ac4  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010ac4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000038eb  00000000  00000000  00010aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000904  00000000  00000000  000143d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005b8  00000000  00000000  00014ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  00015298  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001ba4  00000000  00000000  000157e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001780  00000000  00000000  0001738c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00018b0c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000018a0  00000000  00000000  00018b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001a428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000aa4 	.word	0x08000aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000aa4 	.word	0x08000aa4

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80002d6:	4909      	ldr	r1, [pc, #36]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002da:	699a      	ldr	r2, [r3, #24]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4313      	orrs	r3, r2
 80002e0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80002e2:	e006      	b.n	80002f2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80002e4:	4905      	ldr	r1, [pc, #20]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002e8:	699a      	ldr	r2, [r3, #24]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	4013      	ands	r3, r2
 80002f0:	618b      	str	r3, [r1, #24]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d006      	beq.n	8000320 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000312:	4909      	ldr	r1, [pc, #36]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000316:	69da      	ldr	r2, [r3, #28]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4313      	orrs	r3, r2
 800031c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800031e:	e006      	b.n	800032e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000320:	4905      	ldr	r1, [pc, #20]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000324:	69da      	ldr	r2, [r3, #28]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	43db      	mvns	r3, r3
 800032a:	4013      	ands	r3, r2
 800032c:	61cb      	str	r3, [r1, #28]
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a2e      	ldr	r2, [pc, #184]	; (800040c <TIM_TimeBaseInit+0xd0>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d013      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a2d      	ldr	r2, [pc, #180]	; (8000410 <TIM_TimeBaseInit+0xd4>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d00f      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000366:	d00b      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a2a      	ldr	r2, [pc, #168]	; (8000414 <TIM_TimeBaseInit+0xd8>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d007      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a29      	ldr	r2, [pc, #164]	; (8000418 <TIM_TimeBaseInit+0xdc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d003      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a28      	ldr	r2, [pc, #160]	; (800041c <TIM_TimeBaseInit+0xe0>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d108      	bne.n	8000392 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000380:	89fb      	ldrh	r3, [r7, #14]
 8000382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000386:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	885a      	ldrh	r2, [r3, #2]
 800038c:	89fb      	ldrh	r3, [r7, #14]
 800038e:	4313      	orrs	r3, r2
 8000390:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a22      	ldr	r2, [pc, #136]	; (8000420 <TIM_TimeBaseInit+0xe4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d00c      	beq.n	80003b4 <TIM_TimeBaseInit+0x78>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a21      	ldr	r2, [pc, #132]	; (8000424 <TIM_TimeBaseInit+0xe8>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d008      	beq.n	80003b4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003a8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	88da      	ldrh	r2, [r3, #6]
 80003ae:	89fb      	ldrh	r3, [r7, #14]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	89fa      	ldrh	r2, [r7, #14]
 80003b8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	889a      	ldrh	r2, [r3, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	881a      	ldrh	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a0f      	ldr	r2, [pc, #60]	; (800040c <TIM_TimeBaseInit+0xd0>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d00f      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <TIM_TimeBaseInit+0xd4>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d00b      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <TIM_TimeBaseInit+0xec>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d007      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <TIM_TimeBaseInit+0xf0>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d003      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <TIM_TimeBaseInit+0xf4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d104      	bne.n	80003fc <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	7a1b      	ldrb	r3, [r3, #8]
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2201      	movs	r2, #1
 8000400:	829a      	strh	r2, [r3, #20]
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40012c00 	.word	0x40012c00
 8000410:	40013400 	.word	0x40013400
 8000414:	40000400 	.word	0x40000400
 8000418:	40000800 	.word	0x40000800
 800041c:	40000c00 	.word	0x40000c00
 8000420:	40001000 	.word	0x40001000
 8000424:	40001400 	.word	0x40001400
 8000428:	40014000 	.word	0x40014000
 800042c:	40014400 	.word	0x40014400
 8000430:	40014800 	.word	0x40014800

08000434 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	817b      	strh	r3, [r7, #10]
 8000442:	2300      	movs	r3, #0
 8000444:	81fb      	strh	r3, [r7, #14]
 8000446:	2300      	movs	r3, #0
 8000448:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	8c1b      	ldrh	r3, [r3, #32]
 800044e:	b29b      	uxth	r3, r3
 8000450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000454:	b29a      	uxth	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	8c1b      	ldrh	r3, [r3, #32]
 800045e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	889b      	ldrh	r3, [r3, #4]
 8000464:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	8b9b      	ldrh	r3, [r3, #28]
 800046a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 800046c:	897b      	ldrh	r3, [r7, #10]
 800046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000472:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000474:	897b      	ldrh	r3, [r7, #10]
 8000476:	f023 0303 	bic.w	r3, r3, #3
 800047a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	881a      	ldrh	r2, [r3, #0]
 8000480:	897b      	ldrh	r3, [r7, #10]
 8000482:	4313      	orrs	r3, r2
 8000484:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000486:	89fb      	ldrh	r3, [r7, #14]
 8000488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800048c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	891b      	ldrh	r3, [r3, #8]
 8000492:	021b      	lsls	r3, r3, #8
 8000494:	b29a      	uxth	r2, r3
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	4313      	orrs	r3, r2
 800049a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	885b      	ldrh	r3, [r3, #2]
 80004a0:	021b      	lsls	r3, r3, #8
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	89fb      	ldrh	r3, [r7, #14]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <TIM_OC3Init+0x104>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d003      	beq.n	80004ba <TIM_OC3Init+0x86>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a21      	ldr	r2, [pc, #132]	; (800053c <TIM_OC3Init+0x108>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d12b      	bne.n	8000512 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	895b      	ldrh	r3, [r3, #10]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	89fb      	ldrh	r3, [r7, #14]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004d6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	889b      	ldrh	r3, [r3, #4]
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	b29a      	uxth	r2, r3
 80004e0:	89fb      	ldrh	r3, [r7, #14]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 80004e6:	89bb      	ldrh	r3, [r7, #12]
 80004e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004ec:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 80004ee:	89bb      	ldrh	r3, [r7, #12]
 80004f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004f4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	899b      	ldrh	r3, [r3, #12]
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	89bb      	ldrh	r3, [r7, #12]
 8000500:	4313      	orrs	r3, r2
 8000502:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	89db      	ldrh	r3, [r3, #14]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	b29a      	uxth	r2, r3
 800050c:	89bb      	ldrh	r3, [r7, #12]
 800050e:	4313      	orrs	r3, r2
 8000510:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	89ba      	ldrh	r2, [r7, #12]
 8000516:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	897a      	ldrh	r2, [r7, #10]
 800051c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	88da      	ldrh	r2, [r3, #6]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	89fa      	ldrh	r2, [r7, #14]
 800052a:	841a      	strh	r2, [r3, #32]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40012c00 	.word	0x40012c00
 800053c:	40013400 	.word	0x40013400

08000540 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	81bb      	strh	r3, [r7, #12]
 800054e:	2300      	movs	r3, #0
 8000550:	817b      	strh	r3, [r7, #10]
 8000552:	2300      	movs	r3, #0
 8000554:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8c1b      	ldrh	r3, [r3, #32]
 800055a:	b29b      	uxth	r3, r3
 800055c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000560:	b29a      	uxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	8c1b      	ldrh	r3, [r3, #32]
 800056a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	889b      	ldrh	r3, [r3, #4]
 8000570:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	8b9b      	ldrh	r3, [r3, #28]
 8000576:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8000578:	89bb      	ldrh	r3, [r7, #12]
 800057a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800057e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000580:	89bb      	ldrh	r3, [r7, #12]
 8000582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000586:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	b29a      	uxth	r2, r3
 8000590:	89bb      	ldrh	r3, [r7, #12]
 8000592:	4313      	orrs	r3, r2
 8000594:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800059c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	891b      	ldrh	r3, [r3, #8]
 80005a2:	031b      	lsls	r3, r3, #12
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	897b      	ldrh	r3, [r7, #10]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	885b      	ldrh	r3, [r3, #2]
 80005b0:	031b      	lsls	r3, r3, #12
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <TIM_OC4Init+0xc8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d003      	beq.n	80005ca <TIM_OC4Init+0x8a>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <TIM_OC4Init+0xcc>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10a      	bne.n	80005e0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005d0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	899b      	ldrh	r3, [r3, #12]
 80005d6:	019b      	lsls	r3, r3, #6
 80005d8:	b29a      	uxth	r2, r3
 80005da:	89fb      	ldrh	r3, [r7, #14]
 80005dc:	4313      	orrs	r3, r2
 80005de:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	89fa      	ldrh	r2, [r7, #14]
 80005e4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	89ba      	ldrh	r2, [r7, #12]
 80005ea:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	88da      	ldrh	r2, [r3, #6]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	897a      	ldrh	r2, [r7, #10]
 80005fa:	841a      	strh	r2, [r3, #32]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40012c00 	.word	0x40012c00
 800060c:	40013400 	.word	0x40013400

08000610 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	b29a      	uxth	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000632:	e007      	b.n	8000644 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
 800063a:	f023 0301 	bic.w	r3, r3, #1
 800063e:	b29a      	uxth	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	801a      	strh	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066a:	b29a      	uxth	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000670:	e007      	b.n	8000682 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	801a      	strh	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	8b9b      	ldrh	r3, [r3, #28]
 80006a0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	f023 0308 	bic.w	r3, r3, #8
 80006a8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	89fa      	ldrh	r2, [r7, #14]
 80006b6:	839a      	strh	r2, [r3, #28]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8b9b      	ldrh	r3, [r3, #28]
 80006d6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006de:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	839a      	strh	r2, [r3, #28]
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <InitializeTimer>:
#include <stddef.h>
#include "stm32f10x.h"

void InitializeTimer()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = 99;
 8000702:	2363      	movs	r3, #99	; 0x63
 8000704:	80bb      	strh	r3, [r7, #4]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000706:	2300      	movs	r3, #0
 8000708:	80fb      	strh	r3, [r7, #6]
    timerInitStructure.TIM_Period = 1000;
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	813b      	strh	r3, [r7, #8]
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	817b      	strh	r3, [r7, #10]
    timerInitStructure.TIM_RepetitionCounter = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	733b      	strb	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000720:	f7ff fe0c 	bl	800033c <TIM_TimeBaseInit>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <InitializePWMChannel>:

void InitializePWMChannel(int pulse1, int pulse2)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]

    TIM_OCInitTypeDef TIM_OCInitStructure;
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000736:	2360      	movs	r3, #96	; 0x60
 8000738:	813b      	strh	r3, [r7, #8]
    TIM_OCInitStructure.TIM_Pulse = pulse1;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	b29b      	uxth	r3, r3
 800073e:	81fb      	strh	r3, [r7, #14]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000740:	2301      	movs	r3, #1
 8000742:	817b      	strh	r3, [r7, #10]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000744:	2300      	movs	r3, #0
 8000746:	823b      	strh	r3, [r7, #16]
    TIM_OC3Init(TIM2, &TIM_OCInitStructure);	//SELECIONA CANAL2 DO TIMER 1 (PA9, NESSE CASO)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000752:	f7ff fe6f 	bl	8000434 <TIM_OC3Init>

    TIM_OCInitStructure.TIM_Pulse = pulse2;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	81fb      	strh	r3, [r7, #14]
    TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000766:	f7ff feeb 	bl	8000540 <TIM_OC4Init>

    TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800076a:	2108      	movs	r1, #8
 800076c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000770:	f7ff ff8c 	bl	800068c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000774:	2108      	movs	r1, #8
 8000776:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800077a:	f7ff ffa2 	bl	80006c2 <TIM_OC4PreloadConfig>
    TIM_ARRPreloadConfig(TIM2, ENABLE);
 800077e:	2101      	movs	r1, #1
 8000780:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000784:	f7ff ff63 	bl	800064e <TIM_ARRPreloadConfig>
    TIM_Cmd(TIM2, ENABLE);
 8000788:	2101      	movs	r1, #1
 800078a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800078e:	f7ff ff3f 	bl	8000610 <TIM_Cmd>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <InitializeLEDs>:

void InitializeLEDs()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80007a2:	2101      	movs	r1, #1
 80007a4:	2004      	movs	r0, #4
 80007a6:	f7ff fd8d 	bl	80002c4 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80007aa:	2101      	movs	r1, #1
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fda7 	bl	8000300 <RCC_APB1PeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80007b2:	230c      	movs	r3, #12
 80007b4:	80bb      	strh	r3, [r7, #4]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80007b6:	2318      	movs	r3, #24
 80007b8:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80007ba:	2303      	movs	r3, #3
 80007bc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &gpioStructure);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4803      	ldr	r0, [pc, #12]	; (80007d0 <InitializeLEDs+0x34>)
 80007c4:	f7ff fcc2 	bl	800014c <GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40010800 	.word	0x40010800

080007d4 <main>:

int main()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
    InitializeLEDs();
 80007da:	f7ff ffdf 	bl	800079c <InitializeLEDs>
    InitializeTimer();
 80007de:	f7ff ff8d 	bl	80006fc <InitializeTimer>
    InitializePWMChannel(700,100);
 80007e2:	2164      	movs	r1, #100	; 0x64
 80007e4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80007e8:	f7ff ffa0 	bl	800072c <InitializePWMChannel>

    while(1){
    	for(int i=0 ; i<10000000 ; i++){
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	e01c      	b.n	800082c <main+0x58>
    		TIM2->CCR3 = (int)(i/10000);
 80007f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <main+0x64>)
 80007fa:	fb82 0203 	smull	r0, r2, r2, r3
 80007fe:	1312      	asrs	r2, r2, #12
 8000800:	17db      	asrs	r3, r3, #31
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	878b      	strh	r3, [r1, #60]	; 0x3c
    	    TIM2->CCR4 = (int)(1000 - (i/10000));
 8000808:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <main+0x64>)
 8000810:	fb82 0203 	smull	r0, r2, r2, r3
 8000814:	1312      	asrs	r2, r2, #12
 8000816:	17db      	asrs	r3, r3, #31
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	b29b      	uxth	r3, r3
 800081c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000820:	b29b      	uxth	r3, r3
 8000822:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    	for(int i=0 ; i<10000000 ; i++){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3301      	adds	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a03      	ldr	r2, [pc, #12]	; (800083c <main+0x68>)
 8000830:	4293      	cmp	r3, r2
 8000832:	ddde      	ble.n	80007f2 <main+0x1e>
 8000834:	e7da      	b.n	80007ec <main+0x18>
 8000836:	bf00      	nop
 8000838:	68db8bad 	.word	0x68db8bad
 800083c:	0098967f 	.word	0x0098967f

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000844:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000846:	e003      	b.n	8000850 <LoopCopyDataInit>

08000848 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800084a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800084c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800084e:	3104      	adds	r1, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000854:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000856:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000858:	d3f6      	bcc.n	8000848 <CopyDataInit>
	ldr	r2, =_sbss
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800085c:	e002      	b.n	8000864 <LoopFillZerobss>

0800085e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800085e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000860:	f842 3b04 	str.w	r3, [r2], #4

08000864 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000866:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000868:	d3f9      	bcc.n	800085e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800086a:	f000 f83d 	bl	80008e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800086e:	f000 f8f5 	bl	8000a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff ffaf 	bl	80007d4 <main>
	bx	lr
 8000876:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000878:	20002800 	.word	0x20002800
	ldr	r3, =_sidata
 800087c:	08000ac4 	.word	0x08000ac4
	ldr	r0, =_sdata
 8000880:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000884:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000888:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 800088c:	2000001c 	.word	0x2000001c

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>

08000892 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008ec:	4a15      	ldr	r2, [pc, #84]	; (8000944 <SystemInit+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <SystemInit+0x5c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80008f8:	4912      	ldr	r1, [pc, #72]	; (8000944 <SystemInit+0x5c>)
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <SystemInit+0x5c>)
 80008fc:	685a      	ldr	r2, [r3, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <SystemInit+0x60>)
 8000900:	4013      	ands	r3, r2
 8000902:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000904:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <SystemInit+0x5c>)
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <SystemInit+0x5c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800090e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000912:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <SystemInit+0x5c>)
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <SystemInit+0x5c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000920:	4a08      	ldr	r2, [pc, #32]	; (8000944 <SystemInit+0x5c>)
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <SystemInit+0x5c>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800092a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SystemInit+0x5c>)
 800092e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000932:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000934:	f000 f80c 	bl	8000950 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <SystemInit+0x64>)
 800093a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	f8ff0000 	.word	0xf8ff0000
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000954:	f000 f802 	bl	800095c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800096a:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <SetSysClockTo72+0xf8>)
 800096c:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <SetSysClockTo72+0xf8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000974:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <SetSysClockTo72+0x38>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000992:	d1f0      	bne.n	8000976 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80009a0:	2301      	movs	r3, #1
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	e001      	b.n	80009aa <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d14b      	bne.n	8000a48 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80009b0:	4a29      	ldr	r2, [pc, #164]	; (8000a58 <SetSysClockTo72+0xfc>)
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SetSysClockTo72+0xfc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80009bc:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <SetSysClockTo72+0xfc>)
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <SetSysClockTo72+0xfc>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f023 0303 	bic.w	r3, r3, #3
 80009c6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80009c8:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <SetSysClockTo72+0xfc>)
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <SetSysClockTo72+0xfc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ee:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80009f0:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80009fa:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <SetSysClockTo72+0xf8>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000a06:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a12:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a14:	bf00      	nop
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f9      	beq.n	8000a16 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000a3a:	bf00      	nop
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SetSysClockTo72+0xf8>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d1f9      	bne.n	8000a3c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40022000 	.word	0x40022000

08000a5c <__libc_init_array>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	2500      	movs	r5, #0
 8000a60:	4e0c      	ldr	r6, [pc, #48]	; (8000a94 <__libc_init_array+0x38>)
 8000a62:	4c0d      	ldr	r4, [pc, #52]	; (8000a98 <__libc_init_array+0x3c>)
 8000a64:	1ba4      	subs	r4, r4, r6
 8000a66:	10a4      	asrs	r4, r4, #2
 8000a68:	42a5      	cmp	r5, r4
 8000a6a:	d109      	bne.n	8000a80 <__libc_init_array+0x24>
 8000a6c:	f000 f81a 	bl	8000aa4 <_init>
 8000a70:	2500      	movs	r5, #0
 8000a72:	4e0a      	ldr	r6, [pc, #40]	; (8000a9c <__libc_init_array+0x40>)
 8000a74:	4c0a      	ldr	r4, [pc, #40]	; (8000aa0 <__libc_init_array+0x44>)
 8000a76:	1ba4      	subs	r4, r4, r6
 8000a78:	10a4      	asrs	r4, r4, #2
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	d105      	bne.n	8000a8a <__libc_init_array+0x2e>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a84:	4798      	blx	r3
 8000a86:	3501      	adds	r5, #1
 8000a88:	e7ee      	b.n	8000a68 <__libc_init_array+0xc>
 8000a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a8e:	4798      	blx	r3
 8000a90:	3501      	adds	r5, #1
 8000a92:	e7f2      	b.n	8000a7a <__libc_init_array+0x1e>
 8000a94:	08000abc 	.word	0x08000abc
 8000a98:	08000abc 	.word	0x08000abc
 8000a9c:	08000abc 	.word	0x08000abc
 8000aa0:	08000ac0 	.word	0x08000ac0

08000aa4 <_init>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	bf00      	nop
 8000aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aaa:	bc08      	pop	{r3}
 8000aac:	469e      	mov	lr, r3
 8000aae:	4770      	bx	lr

08000ab0 <_fini>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	bf00      	nop
 8000ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab6:	bc08      	pop	{r3}
 8000ab8:	469e      	mov	lr, r3
 8000aba:	4770      	bx	lr
