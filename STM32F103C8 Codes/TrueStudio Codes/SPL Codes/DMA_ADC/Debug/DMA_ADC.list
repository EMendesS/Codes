
DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f48  08000f48  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f4c  08000f4c  00010f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08000f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000008  08000f58  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000024  08000f58  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   000033da  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000adc  00000000  00000000  0002340b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000458  00000000  00000000  00023ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  00024340  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001999  00000000  00000000  00024720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000016ab  00000000  00000000  000260b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027764  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000119c  00000000  00000000  000277e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002897c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f30 	.word	0x08000f30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000f30 	.word	0x08000f30

0800014c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	685b      	ldr	r3, [r3, #4]
 8000162:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800016a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800016e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	791b      	ldrb	r3, [r3, #4]
 8000178:	021b      	lsls	r3, r3, #8
 800017a:	4313      	orrs	r3, r2
 800017c:	68fa      	ldr	r2, [r7, #12]
 800017e:	4313      	orrs	r3, r2
 8000180:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	68fa      	ldr	r2, [r7, #12]
 8000186:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689b      	ldr	r3, [r3, #8]
 800018c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <ADC_Init+0xa0>)
 8000192:	4013      	ands	r3, r2
 8000194:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	68da      	ldr	r2, [r3, #12]
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	689b      	ldr	r3, [r3, #8]
 800019e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	795b      	ldrb	r3, [r3, #5]
 80001a4:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80001a6:	4313      	orrs	r3, r2
 80001a8:	68fa      	ldr	r2, [r7, #12]
 80001aa:	4313      	orrs	r3, r2
 80001ac:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	68fa      	ldr	r2, [r7, #12]
 80001b2:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001b8:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001c0:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	7c1b      	ldrb	r3, [r3, #16]
 80001c6:	3b01      	subs	r3, #1
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	7afb      	ldrb	r3, [r7, #11]
 80001cc:	4313      	orrs	r3, r2
 80001ce:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80001d0:	7afb      	ldrb	r3, [r7, #11]
 80001d2:	051b      	lsls	r3, r3, #20
 80001d4:	68fa      	ldr	r2, [r7, #12]
 80001d6:	4313      	orrs	r3, r2
 80001d8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80001e0:	bf00      	nop
 80001e2:	3714      	adds	r7, #20
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	fff1f7fd 	.word	0xfff1f7fd

080001f0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	460b      	mov	r3, r1
 80001fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80001fc:	78fb      	ldrb	r3, [r7, #3]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d006      	beq.n	8000210 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	f043 0201 	orr.w	r2, r3, #1
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 800020e:	e005      	b.n	800021c <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	f023 0201 	bic.w	r2, r3, #1
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	609a      	str	r2, [r3, #8]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr

08000226 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000232:	78fb      	ldrb	r3, [r7, #3]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d006      	beq.n	8000246 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 8000244:	e005      	b.n	8000252 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	609a      	str	r2, [r3, #8]
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	f043 0208 	orr.w	r2, r3, #8
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	609a      	str	r2, [r3, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 800027a:	b480      	push	{r7}
 800027c:	b085      	sub	sp, #20
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000282:	2300      	movs	r3, #0
 8000284:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	f003 0308 	and.w	r3, r3, #8
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8000292:	2301      	movs	r3, #1
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	e001      	b.n	800029c <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 800029c:	7bfb      	ldrb	r3, [r7, #15]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f043 0204 	orr.w	r2, r3, #4
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	609a      	str	r2, [r3, #8]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr

080002c6 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b085      	sub	sp, #20
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f003 0304 	and.w	r3, r3, #4
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 80002de:	2301      	movs	r3, #1
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	e001      	b.n	80002e8 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 80002e4:	2300      	movs	r3, #0
 80002e6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8000312:	e005      	b.n	8000320 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	609a      	str	r2, [r3, #8]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800032a:	b480      	push	{r7}
 800032c:	b085      	sub	sp, #20
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
 8000332:	4608      	mov	r0, r1
 8000334:	4611      	mov	r1, r2
 8000336:	461a      	mov	r2, r3
 8000338:	4603      	mov	r3, r0
 800033a:	70fb      	strb	r3, [r7, #3]
 800033c:	460b      	mov	r3, r1
 800033e:	70bb      	strb	r3, [r7, #2]
 8000340:	4613      	mov	r3, r2
 8000342:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b09      	cmp	r3, #9
 8000350:	d923      	bls.n	800039a <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	f1a3 020a 	sub.w	r2, r3, #10
 800035e:	4613      	mov	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	4413      	add	r3, r2
 8000364:	2207      	movs	r2, #7
 8000366:	fa02 f303 	lsl.w	r3, r2, r3
 800036a:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	43db      	mvns	r3, r3
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	4013      	ands	r3, r2
 8000374:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000376:	7879      	ldrb	r1, [r7, #1]
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	f1a3 020a 	sub.w	r2, r3, #10
 800037e:	4613      	mov	r3, r2
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	4413      	add	r3, r2
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	4313      	orrs	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	e01e      	b.n	80003d8 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80003a0:	78fa      	ldrb	r2, [r7, #3]
 80003a2:	4613      	mov	r3, r2
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	4413      	add	r3, r2
 80003a8:	2207      	movs	r2, #7
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	43db      	mvns	r3, r3
 80003b4:	68fa      	ldr	r2, [r7, #12]
 80003b6:	4013      	ands	r3, r2
 80003b8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80003ba:	7879      	ldrb	r1, [r7, #1]
 80003bc:	78fa      	ldrb	r2, [r7, #3]
 80003be:	4613      	mov	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80003ca:	68fa      	ldr	r2, [r7, #12]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	4313      	orrs	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003d8:	78bb      	ldrb	r3, [r7, #2]
 80003da:	2b06      	cmp	r3, #6
 80003dc:	d821      	bhi.n	8000422 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 80003e4:	78bb      	ldrb	r3, [r7, #2]
 80003e6:	1e5a      	subs	r2, r3, #1
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	221f      	movs	r2, #31
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	43db      	mvns	r3, r3
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	4013      	ands	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000400:	78f9      	ldrb	r1, [r7, #3]
 8000402:	78bb      	ldrb	r3, [r7, #2]
 8000404:	1e5a      	subs	r2, r3, #1
 8000406:	4613      	mov	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4413      	add	r3, r2
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	4313      	orrs	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000420:	e047      	b.n	80004b2 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000422:	78bb      	ldrb	r3, [r7, #2]
 8000424:	2b0c      	cmp	r3, #12
 8000426:	d821      	bhi.n	800046c <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800042e:	78bb      	ldrb	r3, [r7, #2]
 8000430:	1fda      	subs	r2, r3, #7
 8000432:	4613      	mov	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4413      	add	r3, r2
 8000438:	221f      	movs	r2, #31
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	43db      	mvns	r3, r3
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	4013      	ands	r3, r2
 8000448:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800044a:	78f9      	ldrb	r1, [r7, #3]
 800044c:	78bb      	ldrb	r3, [r7, #2]
 800044e:	1fda      	subs	r2, r3, #7
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	4313      	orrs	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	631a      	str	r2, [r3, #48]	; 0x30
}
 800046a:	e022      	b.n	80004b2 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000470:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000472:	78bb      	ldrb	r3, [r7, #2]
 8000474:	f1a3 020d 	sub.w	r2, r3, #13
 8000478:	4613      	mov	r3, r2
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	4413      	add	r3, r2
 800047e:	221f      	movs	r2, #31
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	43db      	mvns	r3, r3
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000490:	78f9      	ldrb	r1, [r7, #3]
 8000492:	78bb      	ldrb	r3, [r7, #2]
 8000494:	f1a3 020d 	sub.w	r2, r3, #13
 8000498:	4613      	mov	r3, r2
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c8:	b29b      	uxth	r3, r3
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80004ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004f2:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	6a1b      	ldr	r3, [r3, #32]
 80004fc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000502:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800050e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800051a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000520:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	4313      	orrs	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	68da      	ldr	r2, [r3, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	60da      	str	r2, [r3, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d006      	beq.n	8000570 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f043 0201 	orr.w	r2, r3, #1
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 800056e:	e006      	b.n	800057e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000578:	4013      	ands	r3, r2
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000588:	b480      	push	{r7}
 800058a:	b089      	sub	sp, #36	; 0x24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	78db      	ldrb	r3, [r3, #3]
 80005ae:	f003 030f 	and.w	r3, r3, #15
 80005b2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	78db      	ldrb	r3, [r3, #3]
 80005b8:	f003 0310 	and.w	r3, r3, #16
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d005      	beq.n	80005cc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	789b      	ldrb	r3, [r3, #2]
 80005c4:	461a      	mov	r2, r3
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d044      	beq.n	8000660 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	e038      	b.n	8000654 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80005e2:	2201      	movs	r2, #1
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d126      	bne.n	800064e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000606:	220f      	movs	r2, #15
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	43db      	mvns	r3, r3
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	4013      	ands	r3, r2
 8000618:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800061a:	69fa      	ldr	r2, [r7, #28]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	4313      	orrs	r3, r2
 8000626:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	78db      	ldrb	r3, [r3, #3]
 800062c:	2b28      	cmp	r3, #40	; 0x28
 800062e:	d105      	bne.n	800063c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000630:	2201      	movs	r2, #1
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	409a      	lsls	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	e008      	b.n	800064e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	78db      	ldrb	r3, [r3, #3]
 8000640:	2b48      	cmp	r3, #72	; 0x48
 8000642:	d104      	bne.n	800064e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000644:	2201      	movs	r2, #1
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	409a      	lsls	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	3301      	adds	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	2b07      	cmp	r3, #7
 8000658:	d9c3      	bls.n	80005e2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	2bff      	cmp	r3, #255	; 0xff
 8000666:	d946      	bls.n	80006f6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	e03a      	b.n	80006ea <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	3308      	adds	r3, #8
 8000678:	2201      	movs	r2, #1
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4013      	ands	r3, r2
 800068a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	429a      	cmp	r2, r3
 8000692:	d127      	bne.n	80006e4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800069a:	220f      	movs	r2, #15
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	4013      	ands	r3, r2
 80006ac:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80006ae:	69fa      	ldr	r2, [r7, #28]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	78db      	ldrb	r3, [r3, #3]
 80006c0:	2b28      	cmp	r3, #40	; 0x28
 80006c2:	d105      	bne.n	80006d0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	3308      	adds	r3, #8
 80006c8:	2201      	movs	r2, #1
 80006ca:	409a      	lsls	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	78db      	ldrb	r3, [r3, #3]
 80006d4:	2b48      	cmp	r3, #72	; 0x48
 80006d6:	d105      	bne.n	80006e4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	3308      	adds	r3, #8
 80006dc:	2201      	movs	r2, #1
 80006de:	409a      	lsls	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	3301      	adds	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	d9c1      	bls.n	8000674 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	605a      	str	r2, [r3, #4]
  }
}
 80006f6:	bf00      	nop
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800070c:	887a      	ldrh	r2, [r7, #2]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000728:	887a      	ldrh	r2, [r7, #2]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	615a      	str	r2, [r3, #20]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <RCC_DeInit+0x54>)
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <RCC_DeInit+0x54>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000748:	4910      	ldr	r1, [pc, #64]	; (800078c <RCC_DeInit+0x54>)
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <RCC_DeInit+0x54>)
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <RCC_DeInit+0x58>)
 8000750:	4013      	ands	r3, r2
 8000752:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <RCC_DeInit+0x54>)
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <RCC_DeInit+0x54>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800075e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <RCC_DeInit+0x54>)
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <RCC_DeInit+0x54>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <RCC_DeInit+0x54>)
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <RCC_DeInit+0x54>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800077a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <RCC_DeInit+0x54>)
 800077e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000782:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	f8ff0000 	.word	0xf8ff0000

08000794 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <RCC_HSEConfig+0x58>)
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <RCC_HSEConfig+0x58>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a6:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80007a8:	4a10      	ldr	r2, [pc, #64]	; (80007ec <RCC_HSEConfig+0x58>)
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <RCC_HSEConfig+0x58>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b2:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ba:	d003      	beq.n	80007c4 <RCC_HSEConfig+0x30>
 80007bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80007c0:	d007      	beq.n	80007d2 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80007c2:	e00d      	b.n	80007e0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 80007c4:	4a09      	ldr	r2, [pc, #36]	; (80007ec <RCC_HSEConfig+0x58>)
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <RCC_HSEConfig+0x58>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ce:	6013      	str	r3, [r2, #0]
      break;
 80007d0:	e006      	b.n	80007e0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80007d2:	4a06      	ldr	r2, [pc, #24]	; (80007ec <RCC_HSEConfig+0x58>)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <RCC_HSEConfig+0x58>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80007dc:	6013      	str	r3, [r2, #0]
      break;
 80007de:	bf00      	nop
  }
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80007fa:	2300      	movs	r3, #0
 80007fc:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000802:	2031      	movs	r0, #49	; 0x31
 8000804:	f000 f920 	bl	8000a48 <RCC_GetFlagStatus>
 8000808:	4603      	mov	r3, r0
 800080a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000818:	d002      	beq.n	8000820 <RCC_WaitForHSEStartUp+0x30>
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f0      	beq.n	8000802 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000820:	2031      	movs	r0, #49	; 0x31
 8000822:	f000 f911 	bl	8000a48 <RCC_GetFlagStatus>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d002      	beq.n	8000832 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800082c:	2301      	movs	r3, #1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	e001      	b.n	8000836 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000836:	79fb      	ldrb	r3, [r7, #7]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <RCC_PLLConfig+0x38>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800085a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	4313      	orrs	r3, r2
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <RCC_PLLConfig+0x38>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6053      	str	r3, [r2, #4]
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40021000 	.word	0x40021000

0800087c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <RCC_PLLCmd+0x1c>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	42420060 	.word	0x42420060

0800089c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <RCC_SYSCLKConfig+0x34>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f023 0303 	bic.w	r3, r3, #3
 80008b4:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <RCC_SYSCLKConfig+0x34>)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6053      	str	r3, [r2, #4]
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <RCC_GetSYSCLKSource+0x18>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 030c 	and.w	r3, r3, #12
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <RCC_HCLKConfig+0x34>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000908:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <RCC_HCLKConfig+0x34>)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6053      	str	r3, [r2, #4]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <RCC_PCLK1Config+0x34>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000940:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4313      	orrs	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <RCC_PCLK1Config+0x34>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6053      	str	r3, [r2, #4]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <RCC_PCLK2Config+0x34>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000978:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <RCC_PCLK2Config+0x34>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000

08000998 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <RCC_ADCCLKConfig+0x34>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b0:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <RCC_ADCCLKConfig+0x34>)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6053      	str	r3, [r2, #4]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80009e2:	4909      	ldr	r1, [pc, #36]	; (8000a08 <RCC_AHBPeriphClockCmd+0x38>)
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <RCC_AHBPeriphClockCmd+0x38>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80009ee:	e006      	b.n	80009fe <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80009f0:	4905      	ldr	r1, [pc, #20]	; (8000a08 <RCC_AHBPeriphClockCmd+0x38>)
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <RCC_AHBPeriphClockCmd+0x38>)
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4013      	ands	r3, r2
 80009fc:	614b      	str	r3, [r1, #20]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000

08000a0c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d006      	beq.n	8000a2c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a1e:	4909      	ldr	r1, [pc, #36]	; (8000a44 <RCC_APB2PeriphClockCmd+0x38>)
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <RCC_APB2PeriphClockCmd+0x38>)
 8000a22:	699a      	ldr	r2, [r3, #24]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a2a:	e006      	b.n	8000a3a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a2c:	4905      	ldr	r1, [pc, #20]	; (8000a44 <RCC_APB2PeriphClockCmd+0x38>)
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <RCC_APB2PeriphClockCmd+0x38>)
 8000a30:	699a      	ldr	r2, [r3, #24]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4013      	ands	r3, r2
 8000a38:	618b      	str	r3, [r1, #24]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000

08000a48 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	095b      	lsrs	r3, r3, #5
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d103      	bne.n	8000a74 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <RCC_GetFlagStatus+0x70>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d103      	bne.n	8000a82 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <RCC_GetFlagStatus+0x70>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e002      	b.n	8000a88 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <RCC_GetFlagStatus+0x70>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a86:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 031f 	and.w	r3, r3, #31
 8000a8e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	fa22 f303 	lsr.w	r3, r2, r3
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	74fb      	strb	r3, [r7, #19]
 8000aa4:	e001      	b.n	8000aaa <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <SetSysClockTo72>:
	}
}
*/

void SetSysClockTo72(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	ErrorStatus HSEStartUpStatus;
    /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------------------------*/
    /* RCC system reset(for debug purpose) */
    RCC_DeInit();
 8000ac2:	f7ff fe39 	bl	8000738 <RCC_DeInit>

    /* Enable HSE */
    RCC_HSEConfig( RCC_HSE_ON);
 8000ac6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000aca:	f7ff fe63 	bl	8000794 <RCC_HSEConfig>

    /* Wait till HSE is ready */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000ace:	f7ff fe8f 	bl	80007f0 <RCC_WaitForHSEStartUp>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]

    if (HSEStartUpStatus == SUCCESS)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d123      	bne.n	8000b24 <SetSysClockTo72+0x68>

        /* Flash 2 wait state */
        //FLASH_SetLatency( FLASH_Latency_2);

        /* HCLK = SYSCLK */
        RCC_HCLKConfig( RCC_SYSCLK_Div1);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff ff07 	bl	80008f0 <RCC_HCLKConfig>

        /* PCLK2 = HCLK */
        RCC_PCLK2Config( RCC_HCLK_Div1);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ff3c 	bl	8000960 <RCC_PCLK2Config>

        /* PCLK1 = HCLK/2 */
        RCC_PCLK1Config( RCC_HCLK_Div2);
 8000ae8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000aec:	f7ff ff1c 	bl	8000928 <RCC_PCLK1Config>

        /* PLLCLK = 8MHz * 9 = 72 MHz */
        RCC_PLLConfig(0x00010000, RCC_PLLMul_9);
 8000af0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000af4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000af8:	f7ff fea2 	bl	8000840 <RCC_PLLConfig>

        /* Enable PLL */
        RCC_PLLCmd( ENABLE);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff febd 	bl	800087c <RCC_PLLCmd>

        /* Wait till PLL is ready */
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8000b02:	bf00      	nop
 8000b04:	2039      	movs	r0, #57	; 0x39
 8000b06:	f7ff ff9f 	bl	8000a48 <RCC_GetFlagStatus>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f9      	beq.n	8000b04 <SetSysClockTo72+0x48>
        {
        }

        /* Select PLL as system clock source */
        RCC_SYSCLKConfig( RCC_SYSCLKSource_PLLCLK);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff fec3 	bl	800089c <RCC_SYSCLKConfig>

        /* Wait till PLL is used as system clock source */
        while (RCC_GetSYSCLKSource() != 0x08)
 8000b16:	bf00      	nop
 8000b18:	f7ff fedc 	bl	80008d4 <RCC_GetSYSCLKSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d1fa      	bne.n	8000b18 <SetSysClockTo72+0x5c>
        /* Go to infinite loop */
        while (1)
        {
        }
    }
}
 8000b22:	e000      	b.n	8000b26 <SetSysClockTo72+0x6a>
        while (1)
 8000b24:	e7fe      	b.n	8000b24 <SetSysClockTo72+0x68>
}
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <ADC_DMA_init>:

//=================================================================================
volatile uint16_t ADCBuffer[] = {0xAAAA, 0xAAAA, 0xAAAA, 0xAAAA};

void ADC_DMA_init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b092      	sub	sp, #72	; 0x48
 8000b30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	DMA_InitTypeDef DMA_InitStructure;

	RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8000b32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b36:	f7ff ff2f 	bl	8000998 <RCC_ADCCLKConfig>
    /* Enable ADC1 and GPIOA clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	f240 2005 	movw	r0, #517	; 0x205
 8000b40:	f7ff ff64 	bl	8000a0c <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE );
 8000b44:	2101      	movs	r1, #1
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff ff42 	bl	80009d0 <RCC_AHBPeriphClockCmd>

	DMA_InitStructure.DMA_BufferSize = 4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADCBuffer;
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <ADC_DMA_init+0x140>)
 8000b5a:	60bb      	str	r3, [r7, #8]
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	623b      	str	r3, [r7, #32]
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	61bb      	str	r3, [r7, #24]
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000b66:	2320      	movs	r3, #32
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8000b6a:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <ADC_DMA_init+0x144>)
 8000b6c:	607b      	str	r3, [r7, #4]
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b72:	61fb      	str	r3, [r7, #28]
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	483c      	ldr	r0, [pc, #240]	; (8000c74 <ADC_DMA_init+0x148>)
 8000b84:	f7ff fca6 	bl	80004d4 <DMA_Init>
	DMA_Cmd(DMA1_Channel1 , ENABLE ) ;
 8000b88:	2101      	movs	r1, #1
 8000b8a:	483a      	ldr	r0, [pc, #232]	; (8000c74 <ADC_DMA_init+0x148>)
 8000b8c:	f7ff fce0 	bl	8000550 <DMA_Cmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000b90:	23f0      	movs	r3, #240	; 0xf0
 8000b92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4835      	ldr	r0, [pc, #212]	; (8000c78 <ADC_DMA_init+0x14c>)
 8000ba4:	f7ff fcf0 	bl	8000588 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000bba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482d      	ldr	r0, [pc, #180]	; (8000c78 <ADC_DMA_init+0x14c>)
 8000bc2:	f7ff fce1 	bl	8000588 <GPIO_Init>

	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8000bd0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_InitStructure.ADC_NbrOfChannel = 3;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	ADC_Init(ADC1, &ADC_InitStructure);
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	4619      	mov	r1, r3
 8000bec:	4823      	ldr	r0, [pc, #140]	; (8000c7c <ADC_DMA_init+0x150>)
 8000bee:	f7ff faad 	bl	800014c <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 1, ADC_SampleTime_1Cycles5);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	4820      	ldr	r0, [pc, #128]	; (8000c7c <ADC_DMA_init+0x150>)
 8000bfa:	f7ff fb96 	bl	800032a <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 2, ADC_SampleTime_1Cycles5);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2202      	movs	r2, #2
 8000c02:	2105      	movs	r1, #5
 8000c04:	481d      	ldr	r0, [pc, #116]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c06:	f7ff fb90 	bl	800032a <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 3, ADC_SampleTime_1Cycles5);
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	2106      	movs	r1, #6
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c12:	f7ff fb8a 	bl	800032a <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 4, ADC_SampleTime_1Cycles5);
 8000c16:	2300      	movs	r3, #0
 8000c18:	2204      	movs	r2, #4
 8000c1a:	2107      	movs	r1, #7
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c1e:	f7ff fb84 	bl	800032a <ADC_RegularChannelConfig>
	ADC_Cmd(ADC1 , ENABLE ) ;
 8000c22:	2101      	movs	r1, #1
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c26:	f7ff fae3 	bl	80001f0 <ADC_Cmd>
	ADC_DMACmd(ADC1 , ENABLE ) ;
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c2e:	f7ff fafa 	bl	8000226 <ADC_DMACmd>
	ADC_ResetCalibration(ADC1);
 8000c32:	4812      	ldr	r0, [pc, #72]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c34:	f7ff fb12 	bl	800025c <ADC_ResetCalibration>

	while(ADC_GetResetCalibrationStatus(ADC1));
 8000c38:	bf00      	nop
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c3c:	f7ff fb1d 	bl	800027a <ADC_GetResetCalibrationStatus>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f9      	bne.n	8000c3a <ADC_DMA_init+0x10e>
	ADC_StartCalibration(ADC1);
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c48:	f7ff fb2e 	bl	80002a8 <ADC_StartCalibration>

	while(ADC_GetCalibrationStatus(ADC1));
 8000c4c:	bf00      	nop
 8000c4e:	480b      	ldr	r0, [pc, #44]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c50:	f7ff fb39 	bl	80002c6 <ADC_GetCalibrationStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f9      	bne.n	8000c4e <ADC_DMA_init+0x122>
	ADC_SoftwareStartConvCmd ( ADC1 , ENABLE ) ;
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <ADC_DMA_init+0x150>)
 8000c5e:	f7ff fb49 	bl	80002f4 <ADC_SoftwareStartConvCmd>
}
 8000c62:	bf00      	nop
 8000c64:	3748      	adds	r7, #72	; 0x48
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	4001244c 	.word	0x4001244c
 8000c74:	40020008 	.word	0x40020008
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40012400 	.word	0x40012400

08000c80 <main>:
//=================================================================================

int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
	char buffer[80] = {'\0'};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2250      	movs	r2, #80	; 0x50
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f947 	bl	8000f20 <memset>

	SetSysClockTo72();
 8000c92:	f7ff ff13 	bl	8000abc <SetSysClockTo72>

    //USART
 //   usart_init();

    //ADC
    ADC_DMA_init();
 8000c96:	f7ff ff49 	bl	8000b2c <ADC_DMA_init>

    while (1)
    {
    	//if (FLAG_ECHO == 1) {
    	//	sprintf(buffer, "\r\n%d\r\n", ADCBuffer[0]);
    	GPIO_SetBits(GPIOA, GPIO_Pin_6);
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <main+0x34>)
 8000c9e:	f7ff fd2f 	bl	8000700 <GPIO_SetBits>
    	ADC_GetConversionValue(ADC1);
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <main+0x38>)
 8000ca4:	f7ff fc0a 	bl	80004bc <ADC_GetConversionValue>
    	GPIO_ResetBits(GPIOA, GPIO_Pin_6);
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <main+0x34>)
 8000cac:	f7ff fd36 	bl	800071c <GPIO_ResetBits>
    	GPIO_SetBits(GPIOA, GPIO_Pin_6);
 8000cb0:	e7f3      	b.n	8000c9a <main+0x1a>
 8000cb2:	bf00      	nop
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40012400 	.word	0x40012400

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cc2:	e003      	b.n	8000ccc <LoopCopyDataInit>

08000cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cca:	3104      	adds	r1, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cd4:	d3f6      	bcc.n	8000cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000cd8:	e002      	b.n	8000ce0 <LoopFillZerobss>

08000cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cdc:	f842 3b04 	str.w	r3, [r2], #4

08000ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ce4:	d3f9      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce6:	f000 f83d 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f000 f8f5 	bl	8000ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff ffc7 	bl	8000c80 <main>
	bx	lr
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000cf8:	08000f50 	.word	0x08000f50
	ldr	r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d00:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8000d04:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8000d08:	20000024 	.word	0x20000024

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>

08000d0e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <SystemInit+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <SystemInit+0x5c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000d74:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <SystemInit+0x5c>)
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <SystemInit+0x5c>)
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <SystemInit+0x60>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <SystemInit+0x5c>)
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <SystemInit+0x5c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <SystemInit+0x5c>)
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SystemInit+0x5c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000d9c:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <SystemInit+0x5c>)
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <SystemInit+0x5c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000da6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SystemInit+0x5c>)
 8000daa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dae:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000db0:	f000 f80c 	bl	8000dcc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0x64>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	f8ff0000 	.word	0xf8ff0000
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000dd0:	f000 f802 	bl	8000dd8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d103      	bne.n	8000e10 <SetSysClockTo72+0x38>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e0e:	d1f0      	bne.n	8000df2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	e001      	b.n	8000e26 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d14b      	bne.n	8000ec4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000e2c:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <SetSysClockTo72+0xfc>)
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <SetSysClockTo72+0xfc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000e38:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <SetSysClockTo72+0xfc>)
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <SetSysClockTo72+0xfc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000e44:	4a23      	ldr	r2, [pc, #140]	; (8000ed4 <SetSysClockTo72+0xfc>)
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <SetSysClockTo72+0xfc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000e6c:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000e76:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000e82:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e8e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e90:	bf00      	nop
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f9      	beq.n	8000e92 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f023 0303 	bic.w	r3, r3, #3
 8000ea8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000eb6:	bf00      	nop
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SetSysClockTo72+0xf8>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d1f9      	bne.n	8000eb8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <__libc_init_array>:
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	2500      	movs	r5, #0
 8000edc:	4e0c      	ldr	r6, [pc, #48]	; (8000f10 <__libc_init_array+0x38>)
 8000ede:	4c0d      	ldr	r4, [pc, #52]	; (8000f14 <__libc_init_array+0x3c>)
 8000ee0:	1ba4      	subs	r4, r4, r6
 8000ee2:	10a4      	asrs	r4, r4, #2
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	d109      	bne.n	8000efc <__libc_init_array+0x24>
 8000ee8:	f000 f822 	bl	8000f30 <_init>
 8000eec:	2500      	movs	r5, #0
 8000eee:	4e0a      	ldr	r6, [pc, #40]	; (8000f18 <__libc_init_array+0x40>)
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <__libc_init_array+0x44>)
 8000ef2:	1ba4      	subs	r4, r4, r6
 8000ef4:	10a4      	asrs	r4, r4, #2
 8000ef6:	42a5      	cmp	r5, r4
 8000ef8:	d105      	bne.n	8000f06 <__libc_init_array+0x2e>
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f00:	4798      	blx	r3
 8000f02:	3501      	adds	r5, #1
 8000f04:	e7ee      	b.n	8000ee4 <__libc_init_array+0xc>
 8000f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f0a:	4798      	blx	r3
 8000f0c:	3501      	adds	r5, #1
 8000f0e:	e7f2      	b.n	8000ef6 <__libc_init_array+0x1e>
 8000f10:	08000f48 	.word	0x08000f48
 8000f14:	08000f48 	.word	0x08000f48
 8000f18:	08000f48 	.word	0x08000f48
 8000f1c:	08000f4c 	.word	0x08000f4c

08000f20 <memset>:
 8000f20:	4603      	mov	r3, r0
 8000f22:	4402      	add	r2, r0
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d100      	bne.n	8000f2a <memset+0xa>
 8000f28:	4770      	bx	lr
 8000f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8000f2e:	e7f9      	b.n	8000f24 <memset+0x4>

08000f30 <_init>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr

08000f3c <_fini>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	bf00      	nop
 8000f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f42:	bc08      	pop	{r3}
 8000f44:	469e      	mov	lr, r3
 8000f46:	4770      	bx	lr
