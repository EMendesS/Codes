
Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001174  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012cc  080012cc  000112cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012d0  080012d0  000112d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080012d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000084  20000014  080012e8  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000098  080012e8  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000386a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c8f  00000000  00000000  000238a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000470  00000000  00000000  00024538  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000249a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001bb1  00000000  00000000  00024d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001aa7  00000000  00000000  00026941  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000283e8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000011e4  00000000  00000000  00028464  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00029648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001268 	.word	0x08001268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001268 	.word	0x08001268

0800014c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000154:	2300      	movs	r3, #0
 8000156:	617b      	str	r3, [r7, #20]
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
 800015c:	230f      	movs	r3, #15
 800015e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d03a      	beq.n	80001de <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000168:	4b27      	ldr	r3, [pc, #156]	; (8000208 <NVIC_Init+0xbc>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	43db      	mvns	r3, r3
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	f003 0307 	and.w	r3, r3, #7
 8000174:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	f1c3 0304 	rsb	r3, r3, #4
 800017c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	fa22 f303 	lsr.w	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	461a      	mov	r2, r3
 800018e:	693b      	ldr	r3, [r7, #16]
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	4313      	orrs	r3, r2
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <NVIC_Init+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	6979      	ldr	r1, [r7, #20]
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	4413      	add	r3, r2
 80001b8:	460a      	mov	r2, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <NVIC_Init+0xc0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	095b      	lsrs	r3, r3, #5
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	f003 031f 	and.w	r3, r3, #31
 80001d2:	2101      	movs	r1, #1
 80001d4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001dc:	e00f      	b.n	80001fe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001de:	490b      	ldr	r1, [pc, #44]	; (800020c <NVIC_Init+0xc0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	2201      	movs	r2, #1
 80001f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f6:	f100 0320 	add.w	r3, r0, #32
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	371c      	adds	r7, #28
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800021c:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <EXTI_Init+0xe0>)
 800021e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	799b      	ldrb	r3, [r3, #6]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d04f      	beq.n	80002c8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000228:	4931      	ldr	r1, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022a:	4b31      	ldr	r3, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	43db      	mvns	r3, r3
 8000234:	4013      	ands	r3, r2
 8000236:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	492d      	ldr	r1, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	43db      	mvns	r3, r3
 8000244:	4013      	ands	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	791b      	ldrb	r3, [r3, #4]
 800024c:	461a      	mov	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	4413      	add	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	6811      	ldr	r1, [r2, #0]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000262:	4923      	ldr	r1, [pc, #140]	; (80002f0 <EXTI_Init+0xe0>)
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <EXTI_Init+0xe0>)
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	43db      	mvns	r3, r3
 800026e:	4013      	ands	r3, r2
 8000270:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	491f      	ldr	r1, [pc, #124]	; (80002f0 <EXTI_Init+0xe0>)
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <EXTI_Init+0xe0>)
 8000276:	68da      	ldr	r2, [r3, #12]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	43db      	mvns	r3, r3
 800027e:	4013      	ands	r3, r2
 8000280:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	795b      	ldrb	r3, [r3, #5]
 8000286:	2b10      	cmp	r3, #16
 8000288:	d10e      	bne.n	80002a8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800028a:	4919      	ldr	r1, [pc, #100]	; (80002f0 <EXTI_Init+0xe0>)
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <EXTI_Init+0xe0>)
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4313      	orrs	r3, r2
 8000296:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000298:	4915      	ldr	r1, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4313      	orrs	r3, r2
 80002a4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002a6:	e01d      	b.n	80002e4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <EXTI_Init+0xe0>)
 80002aa:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4413      	add	r3, r2
 80002b6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	6811      	ldr	r1, [r2, #0]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	e00d      	b.n	80002e4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	461a      	mov	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4413      	add	r3, r2
 80002d2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	6811      	ldr	r1, [r2, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	43d2      	mvns	r2, r2
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400

080002f4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <EXTI_GetITStatus+0x44>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4013      	ands	r3, r2
 800030c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <EXTI_GetITStatus+0x44>)
 8000310:	695a      	ldr	r2, [r3, #20]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4013      	ands	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d005      	beq.n	8000326 <EXTI_GetITStatus+0x32>
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000320:	2301      	movs	r3, #1
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	e001      	b.n	800032a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800032a:	7bfb      	ldrb	r3, [r7, #15]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400

0800033c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000344:	4a03      	ldr	r2, [pc, #12]	; (8000354 <EXTI_ClearITPendingBit+0x18>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6153      	str	r3, [r2, #20]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40010400 	.word	0x40010400

08000358 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000358:	b480      	push	{r7}
 800035a:	b089      	sub	sp, #36	; 0x24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	78db      	ldrb	r3, [r3, #3]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	2b00      	cmp	r3, #0
 800038e:	d005      	beq.n	800039c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	789b      	ldrb	r3, [r3, #2]
 8000394:	461a      	mov	r2, r3
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	4313      	orrs	r3, r2
 800039a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d044      	beq.n	8000430 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
 80003b0:	e038      	b.n	8000424 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80003b2:	2201      	movs	r2, #1
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4013      	ands	r3, r2
 80003c6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003c8:	693a      	ldr	r2, [r7, #16]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d126      	bne.n	800041e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003d6:	220f      	movs	r2, #15
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	43db      	mvns	r3, r3
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	4013      	ands	r3, r2
 80003e8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003ea:	69fa      	ldr	r2, [r7, #28]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	78db      	ldrb	r3, [r3, #3]
 80003fc:	2b28      	cmp	r3, #40	; 0x28
 80003fe:	d105      	bne.n	800040c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000400:	2201      	movs	r2, #1
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	409a      	lsls	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	e008      	b.n	800041e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	78db      	ldrb	r3, [r3, #3]
 8000410:	2b48      	cmp	r3, #72	; 0x48
 8000412:	d104      	bne.n	800041e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000414:	2201      	movs	r2, #1
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	409a      	lsls	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	3301      	adds	r3, #1
 8000422:	61bb      	str	r3, [r7, #24]
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	2b07      	cmp	r3, #7
 8000428:	d9c3      	bls.n	80003b2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	2bff      	cmp	r3, #255	; 0xff
 8000436:	d946      	bls.n	80004c6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
 8000442:	e03a      	b.n	80004ba <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	3308      	adds	r3, #8
 8000448:	2201      	movs	r2, #1
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4013      	ands	r3, r2
 800045a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800045c:	693a      	ldr	r2, [r7, #16]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	429a      	cmp	r2, r3
 8000462:	d127      	bne.n	80004b4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800046a:	220f      	movs	r2, #15
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	43db      	mvns	r3, r3
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	4013      	ands	r3, r2
 800047c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	4313      	orrs	r3, r2
 800048a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	78db      	ldrb	r3, [r3, #3]
 8000490:	2b28      	cmp	r3, #40	; 0x28
 8000492:	d105      	bne.n	80004a0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000494:	69bb      	ldr	r3, [r7, #24]
 8000496:	3308      	adds	r3, #8
 8000498:	2201      	movs	r2, #1
 800049a:	409a      	lsls	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	78db      	ldrb	r3, [r3, #3]
 80004a4:	2b48      	cmp	r3, #72	; 0x48
 80004a6:	d105      	bne.n	80004b4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	3308      	adds	r3, #8
 80004ac:	2201      	movs	r2, #1
 80004ae:	409a      	lsls	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	3301      	adds	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d9c1      	bls.n	8000444 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	697a      	ldr	r2, [r7, #20]
 80004c4:	605a      	str	r2, [r3, #4]
  }
}
 80004c6:	bf00      	nop
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80004dc:	887a      	ldrh	r2, [r7, #2]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	611a      	str	r2, [r3, #16]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80004f8:	887a      	ldrh	r2, [r7, #2]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	615a      	str	r2, [r3, #20]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <RCC_DeInit+0x54>)
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <RCC_DeInit+0x54>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000518:	4910      	ldr	r1, [pc, #64]	; (800055c <RCC_DeInit+0x54>)
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <RCC_DeInit+0x54>)
 800051c:	685a      	ldr	r2, [r3, #4]
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <RCC_DeInit+0x58>)
 8000520:	4013      	ands	r3, r2
 8000522:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <RCC_DeInit+0x54>)
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <RCC_DeInit+0x54>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800052e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000532:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <RCC_DeInit+0x54>)
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <RCC_DeInit+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <RCC_DeInit+0x54>)
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <RCC_DeInit+0x54>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800054a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <RCC_DeInit+0x54>)
 800054e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000552:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	f8ff0000 	.word	0xf8ff0000

08000564 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <RCC_HSEConfig+0x58>)
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <RCC_HSEConfig+0x58>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000576:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <RCC_HSEConfig+0x58>)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <RCC_HSEConfig+0x58>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000582:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800058a:	d003      	beq.n	8000594 <RCC_HSEConfig+0x30>
 800058c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000590:	d007      	beq.n	80005a2 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 8000592:	e00d      	b.n	80005b0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 8000594:	4a09      	ldr	r2, [pc, #36]	; (80005bc <RCC_HSEConfig+0x58>)
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <RCC_HSEConfig+0x58>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059e:	6013      	str	r3, [r2, #0]
      break;
 80005a0:	e006      	b.n	80005b0 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <RCC_HSEConfig+0x58>)
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <RCC_HSEConfig+0x58>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80005ac:	6013      	str	r3, [r2, #0]
      break;
 80005ae:	bf00      	nop
  }
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80005d2:	2031      	movs	r0, #49	; 0x31
 80005d4:	f000 f996 	bl	8000904 <RCC_GetFlagStatus>
 80005d8:	4603      	mov	r3, r0
 80005da:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005e8:	d002      	beq.n	80005f0 <RCC_WaitForHSEStartUp+0x30>
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f0      	beq.n	80005d2 <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80005f0:	2031      	movs	r0, #49	; 0x31
 80005f2:	f000 f987 	bl	8000904 <RCC_GetFlagStatus>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80005fc:	2301      	movs	r3, #1
 80005fe:	71fb      	strb	r3, [r7, #7]
 8000600:	e001      	b.n	8000606 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8000606:	79fb      	ldrb	r3, [r7, #7]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <RCC_PLLConfig+0x38>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800062a:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	4313      	orrs	r3, r2
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4313      	orrs	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <RCC_PLLConfig+0x38>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6053      	str	r3, [r2, #4]
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <RCC_PLLCmd+0x1c>)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	42420060 	.word	0x42420060

0800066c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <RCC_SYSCLKConfig+0x34>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f023 0303 	bic.w	r3, r3, #3
 8000684:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800068e:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <RCC_SYSCLKConfig+0x34>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6053      	str	r3, [r2, #4]
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <RCC_GetSYSCLKSource+0x18>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 030c 	and.w	r3, r3, #12
 80006b2:	b2db      	uxtb	r3, r3
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000

080006c0 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <RCC_HCLKConfig+0x34>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006d8:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4313      	orrs	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <RCC_HCLKConfig+0x34>)
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6053      	str	r3, [r2, #4]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <RCC_PCLK1Config+0x34>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000710:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4313      	orrs	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <RCC_PCLK1Config+0x34>)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6053      	str	r3, [r2, #4]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <RCC_PCLK2Config+0x34>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000748:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000754:	4a03      	ldr	r2, [pc, #12]	; (8000764 <RCC_PCLK2Config+0x34>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000

08000768 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000780:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d007      	beq.n	80007a0 <RCC_GetClocksFreq+0x38>
 8000790:	2b08      	cmp	r3, #8
 8000792:	d009      	beq.n	80007a8 <RCC_GetClocksFreq+0x40>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d133      	bne.n	8000800 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a47      	ldr	r2, [pc, #284]	; (80008b8 <RCC_GetClocksFreq+0x150>)
 800079c:	601a      	str	r2, [r3, #0]
      break;
 800079e:	e033      	b.n	8000808 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <RCC_GetClocksFreq+0x150>)
 80007a4:	601a      	str	r2, [r3, #0]
      break;
 80007a6:	e02f      	b.n	8000808 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80007a8:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80007b0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ba:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	0c9b      	lsrs	r3, r3, #18
 80007c0:	3302      	adds	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d106      	bne.n	80007d8 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4a3b      	ldr	r2, [pc, #236]	; (80008bc <RCC_GetClocksFreq+0x154>)
 80007ce:	fb02 f203 	mul.w	r2, r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007d6:	e017      	b.n	8000808 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80007d8:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d006      	beq.n	80007f2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	4a35      	ldr	r2, [pc, #212]	; (80008bc <RCC_GetClocksFreq+0x154>)
 80007e8:	fb02 f203 	mul.w	r2, r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	601a      	str	r2, [r3, #0]
      break;
 80007f0:	e00a      	b.n	8000808 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	4a30      	ldr	r2, [pc, #192]	; (80008b8 <RCC_GetClocksFreq+0x150>)
 80007f6:	fb02 f203 	mul.w	r2, r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
      break;
 80007fe:	e003      	b.n	8000808 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <RCC_GetClocksFreq+0x150>)
 8000804:	601a      	str	r2, [r3, #0]
      break;
 8000806:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000810:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	091b      	lsrs	r3, r3, #4
 8000816:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000818:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <RCC_GetClocksFreq+0x158>)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	40da      	lsrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000838:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000840:	4a1f      	ldr	r2, [pc, #124]	; (80008c0 <RCC_GetClocksFreq+0x158>)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	40da      	lsrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000860:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	0adb      	lsrs	r3, r3, #11
 8000866:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <RCC_GetClocksFreq+0x158>)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	40da      	lsrs	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <RCC_GetClocksFreq+0x14c>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000888:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	0b9b      	lsrs	r3, r3, #14
 800088e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000890:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <RCC_GetClocksFreq+0x15c>)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	611a      	str	r2, [r3, #16]
}
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40021000 	.word	0x40021000
 80008b8:	007a1200 	.word	0x007a1200
 80008bc:	003d0900 	.word	0x003d0900
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000010 	.word	0x20000010

080008c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008da:	4909      	ldr	r1, [pc, #36]	; (8000900 <RCC_APB2PeriphClockCmd+0x38>)
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <RCC_APB2PeriphClockCmd+0x38>)
 80008de:	699a      	ldr	r2, [r3, #24]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008e6:	e006      	b.n	80008f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008e8:	4905      	ldr	r1, [pc, #20]	; (8000900 <RCC_APB2PeriphClockCmd+0x38>)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <RCC_APB2PeriphClockCmd+0x38>)
 80008ec:	699a      	ldr	r2, [r3, #24]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4013      	ands	r3, r2
 80008f4:	618b      	str	r3, [r1, #24]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000

08000904 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	095b      	lsrs	r3, r3, #5
 800091e:	b2db      	uxtb	r3, r3
 8000920:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d103      	bne.n	8000930 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <RCC_GetFlagStatus+0x70>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e009      	b.n	8000944 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d103      	bne.n	800093e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <RCC_GetFlagStatus+0x70>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	e002      	b.n	8000944 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <RCC_GetFlagStatus+0x70>)
 8000940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000942:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 031f 	and.w	r3, r3, #31
 800094a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800095c:	2301      	movs	r3, #1
 800095e:	74fb      	strb	r3, [r7, #19]
 8000960:	e001      	b.n	8000966 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8000966:	7cfb      	ldrb	r3, [r7, #19]
}
 8000968:	4618      	mov	r0, r3
 800096a:	371c      	adds	r7, #28
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8a1b      	ldrh	r3, [r3, #16]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80009a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009a4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80009a8:	4013      	ands	r3, r2
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	88db      	ldrh	r3, [r3, #6]
 80009b0:	461a      	mov	r2, r3
 80009b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b4:	4313      	orrs	r3, r2
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	899b      	ldrh	r3, [r3, #12]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80009c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ca:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80009ce:	4013      	ands	r3, r2
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	889a      	ldrh	r2, [r3, #4]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	891b      	ldrh	r3, [r3, #8]
 80009da:	4313      	orrs	r3, r2
 80009dc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ea:	4313      	orrs	r3, r2
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	8a9b      	ldrh	r3, [r3, #20]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80009fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a00:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000a04:	4013      	ands	r3, r2
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	899b      	ldrh	r3, [r3, #12]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	4313      	orrs	r3, r2
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fea1 	bl	8000768 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	4a2e      	ldr	r2, [pc, #184]	; (8000ae4 <USART_Init+0x16c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d102      	bne.n	8000a34 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a32:	e001      	b.n	8000a38 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	899b      	ldrh	r3, [r3, #12]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	da0c      	bge.n	8000a5e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a46:	4613      	mov	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	009a      	lsls	r2, r3, #2
 8000a4e:	441a      	add	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	e00b      	b.n	8000a76 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009a      	lsls	r2, r3, #2
 8000a68:	441a      	add	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <USART_Init+0x170>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	fb02 f303 	mul.w	r3, r2, r3
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	899b      	ldrh	r3, [r3, #12]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	da0c      	bge.n	8000aba <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	3332      	adds	r3, #50	; 0x32
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <USART_Init+0x170>)
 8000aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aac:	095b      	lsrs	r3, r3, #5
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ab8:	e00b      	b.n	8000ad2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	3332      	adds	r3, #50	; 0x32
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <USART_Init+0x170>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	811a      	strh	r2, [r3, #8]
}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	51eb851f 	.word	0x51eb851f

08000aec <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d008      	beq.n	8000b10 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	899b      	ldrh	r3, [r3, #12]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000b0e:	e007      	b.n	8000b20 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	899b      	ldrh	r3, [r3, #12]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	819a      	strh	r2, [r3, #12]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b087      	sub	sp, #28
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000b60:	2201      	movs	r2, #1
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d103      	bne.n	8000b78 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	330c      	adds	r3, #12
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d103      	bne.n	8000b86 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3310      	adds	r3, #16
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e002      	b.n	8000b8c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3314      	adds	r3, #20
 8000b8a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	6811      	ldr	r1, [r2, #0]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b9e:	e006      	b.n	8000bae <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	6811      	ldr	r1, [r2, #0]
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	400a      	ands	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	809a      	strh	r2, [r3, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	889b      	ldrh	r3, [r3, #4]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bec:	b29b      	uxth	r3, r3
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	4013      	ands	r3, r2
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e001      	b.n	8000c22 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
	...

08000c30 <Initialize_Peripherics>:
volatile int numero = 0;
char palavra[4];


void Initialize_Peripherics(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	/* GPIOA clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000c36:	2101      	movs	r1, #1
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f7ff fe45 	bl	80008c8 <RCC_APB2PeriphClockCmd>
	/* GPIOC clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2010      	movs	r0, #16
 8000c42:	f7ff fe41 	bl	80008c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef gpioStructure;

    //Config PC13
    gpioStructure.GPIO_Pin = GPIO_Pin_13;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	80bb      	strh	r3, [r7, #4]
    gpioStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c50:	2303      	movs	r3, #3
 8000c52:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &gpioStructure);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <Initialize_Peripherics+0x4c>)
 8000c5a:	f7ff fb7d 	bl	8000358 <GPIO_Init>

    //Config PA1
    gpioStructure.GPIO_Pin = GPIO_Pin_1;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	80bb      	strh	r3, [r7, #4]
    gpioStructure.GPIO_Mode = GPIO_Mode_IPD;
 8000c62:	2328      	movs	r3, #40	; 0x28
 8000c64:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c66:	2303      	movs	r3, #3
 8000c68:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &gpioStructure);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <Initialize_Peripherics+0x50>)
 8000c70:	f7ff fb72 	bl	8000358 <GPIO_Init>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40010800 	.word	0x40010800

08000c84 <EXTI1_init>:
void EXTI1_init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
	/* NVIC Configuration */
	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa54 	bl	800014c <NVIC_Init>

	/* Configure EXTI Line1 */
	EXTI_InitTypeDef   EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	723b      	strb	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000cac:	2308      	movs	r3, #8
 8000cae:	727b      	strb	r3, [r7, #9]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStructure);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff faaa 	bl	8000210 <EXTI_Init>

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <usart_init>:
void usart_init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
	/* Enable USART1 and GPIOA clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	f244 0004 	movw	r0, #16388	; 0x4004
 8000cd0:	f7ff fdfa 	bl	80008c8 <RCC_APB2PeriphClockCmd>

	/* NVIC Configuration */
	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000cd4:	2325      	movs	r3, #37	; 0x25
 8000cd6:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa2f 	bl	800014c <NVIC_Init>

	/* Configure the GPIOs */
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure USART1 Tx (PA.09) as alternate function push-pull */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf2:	823b      	strh	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000cf4:	2318      	movs	r3, #24
 8000cf6:	74fb      	strb	r3, [r7, #19]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4817      	ldr	r0, [pc, #92]	; (8000d60 <usart_init+0x9c>)
 8000d04:	f7ff fb28 	bl	8000358 <GPIO_Init>

	/* Configure USART1 Rx (PA.10) as input floating */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0c:	823b      	strh	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4619      	mov	r1, r3
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <usart_init+0x9c>)
 8000d1a:	f7ff fb1d 	bl	8000358 <GPIO_Init>
		- USART CPOL: Clock is active low
		- USART CPHA: Data is captured on the middle
		- USART LastBit: The clock pulse of the last data bit is not output to
			the SCLK pin
	 */
	USART_InitStructure.USART_BaudRate = 115200;
 8000d1e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d22:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000d24:	2300      	movs	r3, #0
 8000d26:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000d30:	2300      	movs	r3, #0
 8000d32:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000d34:	230c      	movs	r3, #12
 8000d36:	817b      	strh	r3, [r7, #10]

	USART_Init(USART1, &USART_InitStructure);
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <usart_init+0xa0>)
 8000d3e:	f7ff fe1b 	bl	8000978 <USART_Init>

	/* Enable USART1 */
	USART_Cmd(USART1, ENABLE);
 8000d42:	2101      	movs	r1, #1
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <usart_init+0xa0>)
 8000d46:	f7ff fed1 	bl	8000aec <USART_Cmd>

	/* Enable the USART1 Receive interrupt: this interrupt is generated when the
		USART1 receive data register is not empty */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f240 5125 	movw	r1, #1317	; 0x525
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <usart_init+0xa0>)
 8000d52:	f7ff feea 	bl	8000b2a <USART_ITConfig>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40013800 	.word	0x40013800

08000d68 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    if ((USART1->SR & USART_FLAG_RXNE) != (u16)RESET)
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <USART1_IRQHandler+0x60>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d024      	beq.n	8000dc4 <USART1_IRQHandler+0x5c>
	{
    		RXc = USART_ReceiveData(USART1);
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <USART1_IRQHandler+0x60>)
 8000d7c:	f7ff ff2d 	bl	8000bda <USART_ReceiveData>
 8000d80:	4603      	mov	r3, r0
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <USART1_IRQHandler+0x64>)
 8000d86:	701a      	strb	r2, [r3, #0]
    		RX_BUF[RXi] = RXc;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <USART1_IRQHandler+0x68>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <USART1_IRQHandler+0x64>)
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	b2d1      	uxtb	r1, r2
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <USART1_IRQHandler+0x6c>)
 8000d94:	54d1      	strb	r1, [r2, r3]
    		RXi++;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <USART1_IRQHandler+0x68>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <USART1_IRQHandler+0x68>)
 8000d9e:	6013      	str	r3, [r2, #0]

    		if (RXi != 13) {
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <USART1_IRQHandler+0x68>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b0d      	cmp	r3, #13
 8000da6:	d002      	beq.n	8000dae <USART1_IRQHandler+0x46>
    			if (RXi > RX_BUF_SIZE-1) {
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <USART1_IRQHandler+0x68>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	e002      	b.n	8000db4 <USART1_IRQHandler+0x4c>
    			}
    		}
    		else {
    			RX_FLAG_END_LINE = 1;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <USART1_IRQHandler+0x70>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
    		}

			//Echo
    		USART_SendData(USART1, RXc);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <USART1_IRQHandler+0x64>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART1_IRQHandler+0x60>)
 8000dc0:	f7ff fefa 	bl	8000bb8 <USART_SendData>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013800 	.word	0x40013800
 8000dcc:	20000090 	.word	0x20000090
 8000dd0:	20000094 	.word	0x20000094
 8000dd4:	20000034 	.word	0x20000034
 8000dd8:	20000030 	.word	0x20000030

08000ddc <USARTSend>:
void USARTSend(char *pucBuffer)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    while (*pucBuffer)
 8000de4:	e010      	b.n	8000e08 <USARTSend+0x2c>
    {
        USART_SendData(USART1, *pucBuffer++);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <USARTSend+0x3c>)
 8000df4:	f7ff fee0 	bl	8000bb8 <USART_SendData>
        while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) //Quando TC vai de 0 a 1, pode escrever de novo.
 8000df8:	bf00      	nop
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <USARTSend+0x3c>)
 8000dfe:	f7ff fefb 	bl	8000bf8 <USART_GetFlagStatus>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f8      	beq.n	8000dfa <USARTSend+0x1e>
    while (*pucBuffer)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1ea      	bne.n	8000de6 <USARTSend+0xa>
        {
        }
    }
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013800 	.word	0x40013800

08000e1c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    if (EXTI_GetITStatus(EXTI_Line1) != RESET)
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff fa67 	bl	80002f4 <EXTI_GetITStatus>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d017      	beq.n	8000e5c <EXTI1_IRQHandler+0x40>
		{
	    	EXTI_ClearITPendingBit(EXTI_Line1);
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f7ff fa85 	bl	800033c <EXTI_ClearITPendingBit>
	    	GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 8000e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <EXTI1_IRQHandler+0x50>)
 8000e38:	f7ff fb58 	bl	80004ec <GPIO_ResetBits>
	    	numero = 200;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <EXTI1_IRQHandler+0x54>)
 8000e3e:	22c8      	movs	r2, #200	; 0xc8
 8000e40:	601a      	str	r2, [r3, #0]
	    	itoa(numero, palavra, 10);
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <EXTI1_IRQHandler+0x54>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	220a      	movs	r2, #10
 8000e48:	490a      	ldr	r1, [pc, #40]	; (8000e74 <EXTI1_IRQHandler+0x58>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f9ca 	bl	80011e4 <itoa>
	        USARTSend(palavra);
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <EXTI1_IRQHandler+0x58>)
 8000e52:	f7ff ffc3 	bl	8000ddc <USARTSend>
	        USARTSend("\n");
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <EXTI1_IRQHandler+0x5c>)
 8000e58:	f7ff ffc0 	bl	8000ddc <USARTSend>
	    }
    GPIO_SetBits(GPIOC, GPIO_Pin_13);
 8000e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <EXTI1_IRQHandler+0x50>)
 8000e62:	f7ff fb35 	bl	80004d0 <GPIO_SetBits>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	20000084 	.word	0x20000084
 8000e74:	2000008c 	.word	0x2000008c
 8000e78:	08001280 	.word	0x08001280

08000e7c <SetSysClockTo72>:
void SetSysClockTo72(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	ErrorStatus HSEStartUpStatus;
    /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------------------------*/
    /* RCC system reset(for debug purpose) */
    RCC_DeInit();
 8000e82:	f7ff fb41 	bl	8000508 <RCC_DeInit>

    /* Enable HSE */
    RCC_HSEConfig( RCC_HSE_ON);
 8000e86:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000e8a:	f7ff fb6b 	bl	8000564 <RCC_HSEConfig>

    /* Wait till HSE is ready */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000e8e:	f7ff fb97 	bl	80005c0 <RCC_WaitForHSEStartUp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]

    if (HSEStartUpStatus == SUCCESS)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d123      	bne.n	8000ee4 <SetSysClockTo72+0x68>

        /* Flash 2 wait state */
        //FLASH_SetLatency( FLASH_Latency_2);

        /* HCLK = SYSCLK */
        RCC_HCLKConfig( RCC_SYSCLK_Div1);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fc0f 	bl	80006c0 <RCC_HCLKConfig>

        /* PCLK2 = HCLK */
        RCC_PCLK2Config( RCC_HCLK_Div1);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fc44 	bl	8000730 <RCC_PCLK2Config>

        /* PCLK1 = HCLK/2 */
        RCC_PCLK1Config( RCC_HCLK_Div2);
 8000ea8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000eac:	f7ff fc24 	bl	80006f8 <RCC_PCLK1Config>

        /* PLLCLK = 8MHz * 9 = 72 MHz */
        RCC_PLLConfig(0x00010000, RCC_PLLMul_9);
 8000eb0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000eb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000eb8:	f7ff fbaa 	bl	8000610 <RCC_PLLConfig>

        /* Enable PLL */
        RCC_PLLCmd( ENABLE);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fbc5 	bl	800064c <RCC_PLLCmd>

        /* Wait till PLL is ready */
        while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8000ec2:	bf00      	nop
 8000ec4:	2039      	movs	r0, #57	; 0x39
 8000ec6:	f7ff fd1d 	bl	8000904 <RCC_GetFlagStatus>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f9      	beq.n	8000ec4 <SetSysClockTo72+0x48>
        {
        }

        /* Select PLL as system clock source */
        RCC_SYSCLKConfig( RCC_SYSCLKSource_PLLCLK);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fbcb 	bl	800066c <RCC_SYSCLKConfig>

        /* Wait till PLL is used as system clock source */
        while (RCC_GetSYSCLKSource() != 0x08)
 8000ed6:	bf00      	nop
 8000ed8:	f7ff fbe4 	bl	80006a4 <RCC_GetSYSCLKSource>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d1fa      	bne.n	8000ed8 <SetSysClockTo72+0x5c>
        /* Go to infinite loop */
        while (1)
        {
        }
    }
}
 8000ee2:	e000      	b.n	8000ee6 <SetSysClockTo72+0x6a>
        while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <SetSysClockTo72+0x68>
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <main>:

int i=0;

int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
	// Set System clock
	SetSysClockTo72();
 8000ef2:	f7ff ffc3 	bl	8000e7c <SetSysClockTo72>

	GPIO_SetBits(GPIOC, GPIO_Pin_13); // Set C13 to Low level ("0")
 8000ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0x50>)
 8000efc:	f7ff fae8 	bl	80004d0 <GPIO_SetBits>

    // Initialize USART
    usart_init();
 8000f00:	f7ff fee0 	bl	8000cc4 <usart_init>
    USARTSend(" Hello.\r\nUSART1 is ready.\r\n");
 8000f04:	480e      	ldr	r0, [pc, #56]	; (8000f40 <main+0x54>)
 8000f06:	f7ff ff69 	bl	8000ddc <USARTSend>

    // Initialize EXTI1
    EXTI1_init();
 8000f0a:	f7ff febb 	bl	8000c84 <EXTI1_init>

    //INITIALIZE PERIPHERICS
    Initialize_Peripherics();
 8000f0e:	f7ff fe8f 	bl	8000c30 <Initialize_Peripherics>

    while (1)
    {
    	for(int i=0; i<1000000; i++){
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e008      	b.n	8000f2a <main+0x3e>
    		if(i==1){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <main+0x38>
    			USARTSend("100\n");
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0x58>)
 8000f20:	f7ff ff5c 	bl	8000ddc <USARTSend>
    	for(int i=0; i<1000000; i++){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <main+0x5c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	ddf2      	ble.n	8000f18 <main+0x2c>
    		}
    	}
    	i=0;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <main+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
    	for(int i=0; i<1000000; i++){
 8000f38:	e7eb      	b.n	8000f12 <main+0x26>
 8000f3a:	bf00      	nop
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	08001284 	.word	0x08001284
 8000f44:	080012a0 	.word	0x080012a0
 8000f48:	000f423f 	.word	0x000f423f
 8000f4c:	20000088 	.word	0x20000088

08000f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f56:	e003      	b.n	8000f60 <LoopCopyDataInit>

08000f58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000f5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f5e:	3104      	adds	r1, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000f64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f68:	d3f6      	bcc.n	8000f58 <CopyDataInit>
	ldr	r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000f6c:	e002      	b.n	8000f74 <LoopFillZerobss>

08000f6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f70:	f842 3b04 	str.w	r3, [r2], #4

08000f74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000f76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f78:	d3f9      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f7a:	f000 f83d 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f000 f8f5 	bl	800116c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f82:	f7ff ffb3 	bl	8000eec <main>
	bx	lr
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f88:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000f8c:	080012d4 	.word	0x080012d4
	ldr	r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f94:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000f98:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000f9c:	20000098 	.word	0x20000098

08000fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_2_IRQHandler>

08000fa2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ffc:	4a15      	ldr	r2, [pc, #84]	; (8001054 <SystemInit+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <SystemInit+0x5c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001008:	4912      	ldr	r1, [pc, #72]	; (8001054 <SystemInit+0x5c>)
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <SystemInit+0x5c>)
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <SystemInit+0x60>)
 8001010:	4013      	ands	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001014:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <SystemInit+0x5c>)
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <SystemInit+0x5c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <SystemInit+0x5c>)
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <SystemInit+0x5c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <SystemInit+0x5c>)
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <SystemInit+0x5c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800103a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SystemInit+0x5c>)
 800103e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001042:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001044:	f000 f80c 	bl	8001060 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <SystemInit+0x64>)
 800104a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	f8ff0000 	.word	0xf8ff0000
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001064:	f000 f802 	bl	800106c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800107a:	4a3a      	ldr	r2, [pc, #232]	; (8001164 <SetSysClockTo72+0xf8>)
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <SetSysClockTo72+0xf8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <SetSysClockTo72+0xf8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3301      	adds	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <SetSysClockTo72+0x38>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80010a2:	d1f0      	bne.n	8001086 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <SetSysClockTo72+0xf8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80010b0:	2301      	movs	r3, #1
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	e001      	b.n	80010ba <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d14b      	bne.n	8001158 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <SetSysClockTo72+0xfc>)
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <SetSysClockTo72+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80010cc:	4a26      	ldr	r2, [pc, #152]	; (8001168 <SetSysClockTo72+0xfc>)
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <SetSysClockTo72+0xfc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80010d8:	4a23      	ldr	r2, [pc, #140]	; (8001168 <SetSysClockTo72+0xfc>)
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <SetSysClockTo72+0xfc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010e4:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <SetSysClockTo72+0xf8>)
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SetSysClockTo72+0xf8>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <SetSysClockTo72+0xf8>)
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <SetSysClockTo72+0xf8>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <SetSysClockTo72+0xf8>)
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <SetSysClockTo72+0xf8>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <SetSysClockTo72+0xf8>)
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <SetSysClockTo72+0xf8>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800110a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800110c:	4a15      	ldr	r2, [pc, #84]	; (8001164 <SetSysClockTo72+0xf8>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <SetSysClockTo72+0xf8>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001116:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <SetSysClockTo72+0xf8>)
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <SetSysClockTo72+0xf8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001122:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001124:	bf00      	nop
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <SetSysClockTo72+0xf8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f9      	beq.n	8001126 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <SetSysClockTo72+0xf8>)
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <SetSysClockTo72+0xf8>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f023 0303 	bic.w	r3, r3, #3
 800113c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <SetSysClockTo72+0xf8>)
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <SetSysClockTo72+0xf8>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800114a:	bf00      	nop
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SetSysClockTo72+0xf8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d1f9      	bne.n	800114c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40022000 	.word	0x40022000

0800116c <__libc_init_array>:
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	2500      	movs	r5, #0
 8001170:	4e0c      	ldr	r6, [pc, #48]	; (80011a4 <__libc_init_array+0x38>)
 8001172:	4c0d      	ldr	r4, [pc, #52]	; (80011a8 <__libc_init_array+0x3c>)
 8001174:	1ba4      	subs	r4, r4, r6
 8001176:	10a4      	asrs	r4, r4, #2
 8001178:	42a5      	cmp	r5, r4
 800117a:	d109      	bne.n	8001190 <__libc_init_array+0x24>
 800117c:	f000 f874 	bl	8001268 <_init>
 8001180:	2500      	movs	r5, #0
 8001182:	4e0a      	ldr	r6, [pc, #40]	; (80011ac <__libc_init_array+0x40>)
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <__libc_init_array+0x44>)
 8001186:	1ba4      	subs	r4, r4, r6
 8001188:	10a4      	asrs	r4, r4, #2
 800118a:	42a5      	cmp	r5, r4
 800118c:	d105      	bne.n	800119a <__libc_init_array+0x2e>
 800118e:	bd70      	pop	{r4, r5, r6, pc}
 8001190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001194:	4798      	blx	r3
 8001196:	3501      	adds	r5, #1
 8001198:	e7ee      	b.n	8001178 <__libc_init_array+0xc>
 800119a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800119e:	4798      	blx	r3
 80011a0:	3501      	adds	r5, #1
 80011a2:	e7f2      	b.n	800118a <__libc_init_array+0x1e>
 80011a4:	080012cc 	.word	0x080012cc
 80011a8:	080012cc 	.word	0x080012cc
 80011ac:	080012cc 	.word	0x080012cc
 80011b0:	080012d0 	.word	0x080012d0

080011b4 <__itoa>:
 80011b4:	1e93      	subs	r3, r2, #2
 80011b6:	2b22      	cmp	r3, #34	; 0x22
 80011b8:	b510      	push	{r4, lr}
 80011ba:	460c      	mov	r4, r1
 80011bc:	d904      	bls.n	80011c8 <__itoa+0x14>
 80011be:	2300      	movs	r3, #0
 80011c0:	461c      	mov	r4, r3
 80011c2:	700b      	strb	r3, [r1, #0]
 80011c4:	4620      	mov	r0, r4
 80011c6:	bd10      	pop	{r4, pc}
 80011c8:	2a0a      	cmp	r2, #10
 80011ca:	d109      	bne.n	80011e0 <__itoa+0x2c>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	da07      	bge.n	80011e0 <__itoa+0x2c>
 80011d0:	232d      	movs	r3, #45	; 0x2d
 80011d2:	700b      	strb	r3, [r1, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	4240      	negs	r0, r0
 80011d8:	4421      	add	r1, r4
 80011da:	f000 f805 	bl	80011e8 <__utoa>
 80011de:	e7f1      	b.n	80011c4 <__itoa+0x10>
 80011e0:	2100      	movs	r1, #0
 80011e2:	e7f9      	b.n	80011d8 <__itoa+0x24>

080011e4 <itoa>:
 80011e4:	f7ff bfe6 	b.w	80011b4 <__itoa>

080011e8 <__utoa>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	b08b      	sub	sp, #44	; 0x2c
 80011ec:	4603      	mov	r3, r0
 80011ee:	460f      	mov	r7, r1
 80011f0:	466d      	mov	r5, sp
 80011f2:	4c1c      	ldr	r4, [pc, #112]	; (8001264 <__utoa+0x7c>)
 80011f4:	f104 0e20 	add.w	lr, r4, #32
 80011f8:	462e      	mov	r6, r5
 80011fa:	6820      	ldr	r0, [r4, #0]
 80011fc:	6861      	ldr	r1, [r4, #4]
 80011fe:	3408      	adds	r4, #8
 8001200:	c603      	stmia	r6!, {r0, r1}
 8001202:	4574      	cmp	r4, lr
 8001204:	4635      	mov	r5, r6
 8001206:	d1f7      	bne.n	80011f8 <__utoa+0x10>
 8001208:	7921      	ldrb	r1, [r4, #4]
 800120a:	6820      	ldr	r0, [r4, #0]
 800120c:	7131      	strb	r1, [r6, #4]
 800120e:	1e91      	subs	r1, r2, #2
 8001210:	2922      	cmp	r1, #34	; 0x22
 8001212:	6030      	str	r0, [r6, #0]
 8001214:	f04f 0100 	mov.w	r1, #0
 8001218:	d904      	bls.n	8001224 <__utoa+0x3c>
 800121a:	7039      	strb	r1, [r7, #0]
 800121c:	460f      	mov	r7, r1
 800121e:	4638      	mov	r0, r7
 8001220:	b00b      	add	sp, #44	; 0x2c
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001224:	1e78      	subs	r0, r7, #1
 8001226:	4606      	mov	r6, r0
 8001228:	fbb3 f5f2 	udiv	r5, r3, r2
 800122c:	fb02 3315 	mls	r3, r2, r5, r3
 8001230:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001234:	4473      	add	r3, lr
 8001236:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800123a:	1c4c      	adds	r4, r1, #1
 800123c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8001240:	462b      	mov	r3, r5
 8001242:	b965      	cbnz	r5, 800125e <__utoa+0x76>
 8001244:	553d      	strb	r5, [r7, r4]
 8001246:	187a      	adds	r2, r7, r1
 8001248:	1acc      	subs	r4, r1, r3
 800124a:	42a3      	cmp	r3, r4
 800124c:	dae7      	bge.n	800121e <__utoa+0x36>
 800124e:	7844      	ldrb	r4, [r0, #1]
 8001250:	7815      	ldrb	r5, [r2, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	f800 5f01 	strb.w	r5, [r0, #1]!
 8001258:	f802 4901 	strb.w	r4, [r2], #-1
 800125c:	e7f4      	b.n	8001248 <__utoa+0x60>
 800125e:	4621      	mov	r1, r4
 8001260:	e7e2      	b.n	8001228 <__utoa+0x40>
 8001262:	bf00      	nop
 8001264:	080012a5 	.word	0x080012a5

08001268 <_init>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	bf00      	nop
 800126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126e:	bc08      	pop	{r3}
 8001270:	469e      	mov	lr, r3
 8001272:	4770      	bx	lr

08001274 <_fini>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr
