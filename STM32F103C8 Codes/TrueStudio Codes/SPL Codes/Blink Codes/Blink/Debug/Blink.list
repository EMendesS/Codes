
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000470  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  08000470  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000b1d  00000000  00000000  00010499  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002fd  00000000  00000000  00010fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000f0  00000000  00000000  000112b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000113a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000006cc  00000000  00000000  00011460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004d4  00000000  00000000  00011b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012000  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000023c  00000000  00000000  0001207c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000450 	.word	0x08000450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000450 	.word	0x08000450

0800014c <main>:
/* Includes */
#include <stddef.h>
#include "stm32f10x.h"

int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  *  SCB->VTOR register.
  *  E.g.  SCB->VTOR = 0x20000000;
  */


  RCC->APB2ENR = RCC_APB2ENR_IOPCEN | RCC_APB2ENR_TIM1EN;
 8000150:	4b22      	ldr	r3, [pc, #136]	; (80001dc <main+0x90>)
 8000152:	f44f 6201 	mov.w	r2, #2064	; 0x810
 8000156:	619a      	str	r2, [r3, #24]
  RCC->CFGR |= 0x000338CD;
 8000158:	4a20      	ldr	r2, [pc, #128]	; (80001dc <main+0x90>)
 800015a:	4b20      	ldr	r3, [pc, #128]	; (80001dc <main+0x90>)
 800015c:	685b      	ldr	r3, [r3, #4]
 800015e:	f443 334e 	orr.w	r3, r3, #210944	; 0x33800
 8000162:	f043 03cd 	orr.w	r3, r3, #205	; 0xcd
 8000166:	6053      	str	r3, [r2, #4]
  RCC->CR |= 0x00010000;
 8000168:	4a1c      	ldr	r2, [pc, #112]	; (80001dc <main+0x90>)
 800016a:	4b1c      	ldr	r3, [pc, #112]	; (80001dc <main+0x90>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000172:	6013      	str	r3, [r2, #0]
  RCC->CR &= 0xFFFFFFF0;
 8000174:	4a19      	ldr	r2, [pc, #100]	; (80001dc <main+0x90>)
 8000176:	4b19      	ldr	r3, [pc, #100]	; (80001dc <main+0x90>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	f023 030f 	bic.w	r3, r3, #15
 800017e:	6013      	str	r3, [r2, #0]

//  AFIO->MAPR = AFIO_MAPR_PD01_REMAP;

  TIM1->CNT = 0x0003;
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <main+0x94>)
 8000182:	2203      	movs	r2, #3
 8000184:	849a      	strh	r2, [r3, #36]	; 0x24
  TIM1->PSC= 24;    //SETOU O VALOR DO PRE SCALER
 8000186:	4b16      	ldr	r3, [pc, #88]	; (80001e0 <main+0x94>)
 8000188:	2218      	movs	r2, #24
 800018a:	851a      	strh	r2, [r3, #40]	; 0x28
  TIM1->ARR= 624;   //NUMERO MAXIMO DO COUNTER
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <main+0x94>)
 800018e:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000192:	859a      	strh	r2, [r3, #44]	; 0x2c
  TIM1->CR1=TIM_CR1_CEN | TIM_CR1_DIR; //ATIVOU O CONTADOR (ACIMA)
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <main+0x94>)
 8000196:	2211      	movs	r2, #17
 8000198:	801a      	strh	r2, [r3, #0]
  GPIOC->CRH=0x44244444;
 800019a:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <main+0x98>)
 800019c:	4a12      	ldr	r2, [pc, #72]	; (80001e8 <main+0x9c>)
 800019e:	605a      	str	r2, [r3, #4]
  GPIOC->ODR|=GPIO_ODR_ODR13;
 80001a0:	4a10      	ldr	r2, [pc, #64]	; (80001e4 <main+0x98>)
 80001a2:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <main+0x98>)
 80001a4:	68db      	ldr	r3, [r3, #12]
 80001a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001aa:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  while (1)
  {
     if(TIM1->SR & TIM_SR_UIF)
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <main+0x94>)
 80001ae:	8a1b      	ldrh	r3, [r3, #16]
 80001b0:	b29b      	uxth	r3, r3
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d0f8      	beq.n	80001ac <main+0x60>
         {
             TIM1->SR &= 0x33333330; // OU PODE SER FEITO: ~TIM_SR_UIF (INVERTE TODOS OS BITS)
 80001ba:	4909      	ldr	r1, [pc, #36]	; (80001e0 <main+0x94>)
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <main+0x94>)
 80001be:	8a1b      	ldrh	r3, [r3, #16]
 80001c0:	b29a      	uxth	r2, r3
 80001c2:	f243 3330 	movw	r3, #13104	; 0x3330
 80001c6:	4013      	ands	r3, r2
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	820b      	strh	r3, [r1, #16]
             GPIOC->ODR ^= GPIO_ODR_ODR13; //FAZ UM XOR
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <main+0x98>)
 80001ce:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <main+0x98>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001d6:	60d3      	str	r3, [r2, #12]
     if(TIM1->SR & TIM_SR_UIF)
 80001d8:	e7e8      	b.n	80001ac <main+0x60>
 80001da:	bf00      	nop
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40012c00 	.word	0x40012c00
 80001e4:	40011000 	.word	0x40011000
 80001e8:	44244444 	.word	0x44244444

080001ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000224 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001f2:	e003      	b.n	80001fc <LoopCopyDataInit>

080001f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80001f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001fa:	3104      	adds	r1, #4

080001fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000200:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000202:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000204:	d3f6      	bcc.n	80001f4 <CopyDataInit>
	ldr	r2, =_sbss
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000208:	e002      	b.n	8000210 <LoopFillZerobss>

0800020a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800020a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800020c:	f842 3b04 	str.w	r3, [r2], #4

08000210 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000212:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000214:	d3f9      	bcc.n	800020a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000216:	f000 f83d 	bl	8000294 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f8f5 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800021e:	f7ff ff95 	bl	800014c <main>
	bx	lr
 8000222:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000224:	20002800 	.word	0x20002800
	ldr	r3, =_sidata
 8000228:	08000470 	.word	0x08000470
	ldr	r0, =_sdata
 800022c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000230:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000234:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_2_IRQHandler>

0800023e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr

0800024a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800024a:	b480      	push	{r7}
 800024c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800024e:	e7fe      	b.n	800024e <HardFault_Handler+0x4>

08000250 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000254:	e7fe      	b.n	8000254 <MemManage_Handler+0x4>

08000256 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800025a:	e7fe      	b.n	800025a <BusFault_Handler+0x4>

0800025c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>

08000262 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr

0800026e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <SystemInit+0x5c>)
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <SystemInit+0x5c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002a4:	4912      	ldr	r1, [pc, #72]	; (80002f0 <SystemInit+0x5c>)
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <SystemInit+0x5c>)
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <SystemInit+0x60>)
 80002ac:	4013      	ands	r3, r2
 80002ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <SystemInit+0x5c>)
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <SystemInit+0x5c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <SystemInit+0x5c>)
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <SystemInit+0x5c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002cc:	4a08      	ldr	r2, [pc, #32]	; (80002f0 <SystemInit+0x5c>)
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <SystemInit+0x5c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80002d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <SystemInit+0x5c>)
 80002da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002de:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80002e0:	f000 f80c 	bl	80002fc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <SystemInit+0x64>)
 80002e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40021000 	.word	0x40021000
 80002f4:	f8ff0000 	.word	0xf8ff0000
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000300:	f000 f802 	bl	8000308 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	2300      	movs	r3, #0
 8000314:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000316:	4a3a      	ldr	r2, [pc, #232]	; (8000400 <SetSysClockTo72+0xf8>)
 8000318:	4b39      	ldr	r3, [pc, #228]	; (8000400 <SetSysClockTo72+0xf8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000320:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000322:	4b37      	ldr	r3, [pc, #220]	; (8000400 <SetSysClockTo72+0xf8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d103      	bne.n	8000340 <SetSysClockTo72+0x38>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800033e:	d1f0      	bne.n	8000322 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000340:	4b2f      	ldr	r3, [pc, #188]	; (8000400 <SetSysClockTo72+0xf8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800034c:	2301      	movs	r3, #1
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	e001      	b.n	8000356 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d14b      	bne.n	80003f4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800035c:	4a29      	ldr	r2, [pc, #164]	; (8000404 <SetSysClockTo72+0xfc>)
 800035e:	4b29      	ldr	r3, [pc, #164]	; (8000404 <SetSysClockTo72+0xfc>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 0310 	orr.w	r3, r3, #16
 8000366:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000368:	4a26      	ldr	r2, [pc, #152]	; (8000404 <SetSysClockTo72+0xfc>)
 800036a:	4b26      	ldr	r3, [pc, #152]	; (8000404 <SetSysClockTo72+0xfc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000374:	4a23      	ldr	r2, [pc, #140]	; (8000404 <SetSysClockTo72+0xfc>)
 8000376:	4b23      	ldr	r3, [pc, #140]	; (8000404 <SetSysClockTo72+0xfc>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f043 0302 	orr.w	r3, r3, #2
 800037e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000380:	4a1f      	ldr	r2, [pc, #124]	; (8000400 <SetSysClockTo72+0xf8>)
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <SetSysClockTo72+0xf8>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <SetSysClockTo72+0xf8>)
 800038a:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <SetSysClockTo72+0xf8>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <SetSysClockTo72+0xf8>)
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <SetSysClockTo72+0xf8>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800039a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800039c:	4a18      	ldr	r2, [pc, #96]	; (8000400 <SetSysClockTo72+0xf8>)
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <SetSysClockTo72+0xf8>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003a6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80003a8:	4a15      	ldr	r2, [pc, #84]	; (8000400 <SetSysClockTo72+0xf8>)
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SetSysClockTo72+0xf8>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80003b2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003b4:	4a12      	ldr	r2, [pc, #72]	; (8000400 <SetSysClockTo72+0xf8>)
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <SetSysClockTo72+0xf8>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003be:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003c0:	bf00      	nop
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SetSysClockTo72+0xf8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f9      	beq.n	80003c2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <SetSysClockTo72+0xf8>)
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SetSysClockTo72+0xf8>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f023 0303 	bic.w	r3, r3, #3
 80003d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003da:	4a09      	ldr	r2, [pc, #36]	; (8000400 <SetSysClockTo72+0xf8>)
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <SetSysClockTo72+0xf8>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	f043 0302 	orr.w	r3, r3, #2
 80003e4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80003e6:	bf00      	nop
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <SetSysClockTo72+0xf8>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f003 030c 	and.w	r3, r3, #12
 80003f0:	2b08      	cmp	r3, #8
 80003f2:	d1f9      	bne.n	80003e8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	40022000 	.word	0x40022000

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	2500      	movs	r5, #0
 800040c:	4e0c      	ldr	r6, [pc, #48]	; (8000440 <__libc_init_array+0x38>)
 800040e:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 8000410:	1ba4      	subs	r4, r4, r6
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	42a5      	cmp	r5, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	f000 f81a 	bl	8000450 <_init>
 800041c:	2500      	movs	r5, #0
 800041e:	4e0a      	ldr	r6, [pc, #40]	; (8000448 <__libc_init_array+0x40>)
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <__libc_init_array+0x44>)
 8000422:	1ba4      	subs	r4, r4, r6
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	42a5      	cmp	r5, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000430:	4798      	blx	r3
 8000432:	3501      	adds	r5, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800043a:	4798      	blx	r3
 800043c:	3501      	adds	r5, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
