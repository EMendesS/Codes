
Blink_SPL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000730  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800083c  0800083c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800083c  0800083c  0001083c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000840  08000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000014  08000858  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000038  08000858  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002713  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008b6  00000000  00000000  00022750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000300  00000000  00000000  00023008  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00023308  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000121e  00000000  00000000  000235b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001314  00000000  00000000  000247ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00025ae2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000b5c  00000000  00000000  00025b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000266bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000824 	.word	0x08000824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000824 	.word	0x08000824

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80002d0:	887a      	ldrh	r2, [r7, #2]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80002ec:	887a      	ldrh	r2, [r7, #2]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	615a      	str	r2, [r3, #20]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d006      	beq.n	800031c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800030e:	4909      	ldr	r1, [pc, #36]	; (8000334 <RCC_APB2PeriphClockCmd+0x38>)
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <RCC_APB2PeriphClockCmd+0x38>)
 8000312:	699a      	ldr	r2, [r3, #24]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4313      	orrs	r3, r2
 8000318:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800031a:	e006      	b.n	800032a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800031c:	4905      	ldr	r1, [pc, #20]	; (8000334 <RCC_APB2PeriphClockCmd+0x38>)
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <RCC_APB2PeriphClockCmd+0x38>)
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	43db      	mvns	r3, r3
 8000326:	4013      	ands	r3, r2
 8000328:	618b      	str	r3, [r1, #24]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000

08000338 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	6039      	str	r1, [r7, #0]
 8000342:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	da0b      	bge.n	8000364 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800034c:	490d      	ldr	r1, [pc, #52]	; (8000384 <NVIC_SetPriority+0x4c>)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 030f 	and.w	r3, r3, #15
 8000354:	3b04      	subs	r3, #4
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	0112      	lsls	r2, r2, #4
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	440b      	add	r3, r1
 8000360:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000362:	e009      	b.n	8000378 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000364:	4908      	ldr	r1, [pc, #32]	; (8000388 <NVIC_SetPriority+0x50>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	683a      	ldr	r2, [r7, #0]
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	0112      	lsls	r2, r2, #4
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	440b      	add	r3, r1
 8000374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00
 8000388:	e000e100 	.word	0xe000e100

0800038c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800039a:	d301      	bcc.n	80003a0 <SysTick_Config+0x14>
 800039c:	2301      	movs	r3, #1
 800039e:	e011      	b.n	80003c4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80003a0:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <SysTick_Config+0x40>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003a8:	3b01      	subs	r3, #1
 80003aa:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80003ac:	210f      	movs	r1, #15
 80003ae:	f04f 30ff 	mov.w	r0, #4294967295
 80003b2:	f7ff ffc1 	bl	8000338 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <SysTick_Config+0x40>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <SysTick_Config+0x40>)
 80003be:	2207      	movs	r2, #7
 80003c0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <SysTick_Handler>:
}
//.............................Set SysTick Definitions.........................................

// SysTick_Handler function will be called every 1 us
void SysTick_Handler()
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	usTime++;
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <SysTick_Handler+0x28>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <SysTick_Handler+0x28>)
 80003dc:	6013      	str	r3, [r2, #0]
	if (usTicks != 0)
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <SysTick_Handler+0x2c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d004      	beq.n	80003f0 <SysTick_Handler+0x20>
	{
		usTicks--;
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <SysTick_Handler+0x2c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	4a03      	ldr	r2, [pc, #12]	; (80003fc <SysTick_Handler+0x2c>)
 80003ee:	6013      	str	r3, [r2, #0]
	}
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	20000034 	.word	0x20000034
 80003fc:	20000030 	.word	0x20000030

08000400 <SysTick_Init>:

void SysTick_Init()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	// Update SystemCoreClock value
	SystemCoreClockUpdate();
 8000404:	f000 f8f8 	bl	80005f8 <SystemCoreClockUpdate>
	// Configure the SysTick timer to overflow every 1 us
	SysTick_Config(SystemCoreClock / 1000000);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <SysTick_Init+0x20>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a05      	ldr	r2, [pc, #20]	; (8000424 <SysTick_Init+0x24>)
 800040e:	fba2 2303 	umull	r2, r3, r2, r3
 8000412:	0c9b      	lsrs	r3, r3, #18
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffb9 	bl	800038c <SysTick_Config>
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	431bde83 	.word	0x431bde83

08000428 <delayUs>:

//..............................Set Delays................................

void delayUs(uint32_t us)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	// Reload us value
	usTicks = us;
 8000430:	4a06      	ldr	r2, [pc, #24]	; (800044c <delayUs+0x24>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6013      	str	r3, [r2, #0]
	// Wait until usTick reach zero
	while (usTicks);
 8000436:	bf00      	nop
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <delayUs+0x24>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1fb      	bne.n	8000438 <delayUs+0x10>
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000030 	.word	0x20000030

08000450 <Initialize_Ports>:
   * peripherals
   * RCC_AHBPeriphClockCmd
   */
}

void Initialize_Ports(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0

	/* GPIOC clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000456:	2101      	movs	r1, #1
 8000458:	2010      	movs	r0, #16
 800045a:	f7ff ff4f 	bl	80002fc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800045e:	2101      	movs	r1, #1
 8000460:	2004      	movs	r0, #4
 8000462:	f7ff ff4b 	bl	80002fc <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef gpioStructure;

    //Config PC13
    gpioStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000466:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800046a:	80bb      	strh	r3, [r7, #4]
    gpioStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800046c:	2314      	movs	r3, #20
 800046e:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000470:	2302      	movs	r3, #2
 8000472:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &gpioStructure);
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4808      	ldr	r0, [pc, #32]	; (800049c <Initialize_Ports+0x4c>)
 800047a:	f7ff fe67 	bl	800014c <GPIO_Init>

    gpioStructure.GPIO_Pin = GPIO_Pin_6;
 800047e:	2340      	movs	r3, #64	; 0x40
 8000480:	80bb      	strh	r3, [r7, #4]
    gpioStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000482:	2310      	movs	r3, #16
 8000484:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000486:	2301      	movs	r3, #1
 8000488:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &gpioStructure);
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4619      	mov	r1, r3
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <Initialize_Ports+0x50>)
 8000490:	f7ff fe5c 	bl	800014c <GPIO_Init>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40011000 	.word	0x40011000
 80004a0:	40010800 	.word	0x40010800

080004a4 <main>:


int main()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	SystemInit();
 80004a8:	f000 f872 	bl	8000590 <SystemInit>
/*Seta cristal externo 16MHz*/
//	SetSysClockTo72();

/*Seta cristal interno HSI*/
//	clock_init();
	Initialize_Ports();
 80004ac:	f7ff ffd0 	bl	8000450 <Initialize_Ports>
	SysTick_Init();
 80004b0:	f7ff ffa6 	bl	8000400 <SysTick_Init>

    while(1){

    	GPIO_SetBits(GPIOC, GPIO_Pin_15);
 80004b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b8:	480b      	ldr	r0, [pc, #44]	; (80004e8 <main+0x44>)
 80004ba:	f7ff ff03 	bl	80002c4 <GPIO_SetBits>
    	GPIO_SetBits(GPIOA, GPIO_Pin_6);
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <main+0x48>)
 80004c2:	f7ff feff 	bl	80002c4 <GPIO_SetBits>
    	delayUs(1000000);
 80004c6:	480a      	ldr	r0, [pc, #40]	; (80004f0 <main+0x4c>)
 80004c8:	f7ff ffae 	bl	8000428 <delayUs>
    	GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 80004cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <main+0x44>)
 80004d2:	f7ff ff05 	bl	80002e0 <GPIO_ResetBits>
    	GPIO_ResetBits(GPIOA, GPIO_Pin_6);
 80004d6:	2140      	movs	r1, #64	; 0x40
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <main+0x48>)
 80004da:	f7ff ff01 	bl	80002e0 <GPIO_ResetBits>
    	delayUs(1000000);
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <main+0x4c>)
 80004e0:	f7ff ffa2 	bl	8000428 <delayUs>
    	GPIO_SetBits(GPIOC, GPIO_Pin_15);
 80004e4:	e7e6      	b.n	80004b4 <main+0x10>
 80004e6:	bf00      	nop
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	000f4240 	.word	0x000f4240

080004f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800052c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004fa:	e003      	b.n	8000504 <LoopCopyDataInit>

080004fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80004fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000500:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000502:	3104      	adds	r1, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000508:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800050a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800050c:	d3f6      	bcc.n	80004fc <CopyDataInit>
	ldr	r2, =_sbss
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000510:	e002      	b.n	8000518 <LoopFillZerobss>

08000512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000512:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000514:	f842 3b04 	str.w	r3, [r2], #4

08000518 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800051a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800051c:	d3f9      	bcc.n	8000512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051e:	f000 f837 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f000 f95b 	bl	80007dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000526:	f7ff ffbd 	bl	80004a4 <main>
	bx	lr
 800052a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800052c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000530:	08000844 	.word	0x08000844
	ldr	r0, =_sdata
 8000534:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000538:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 800053c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000540:	20000038 	.word	0x20000038

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>

08000546 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
	...

08000590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <SystemInit+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <SystemInit+0x5c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80005a0:	4912      	ldr	r1, [pc, #72]	; (80005ec <SystemInit+0x5c>)
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <SystemInit+0x5c>)
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <SystemInit+0x60>)
 80005a8:	4013      	ands	r3, r2
 80005aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005ac:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <SystemInit+0x5c>)
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <SystemInit+0x5c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <SystemInit+0x5c>)
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <SystemInit+0x5c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <SystemInit+0x5c>)
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <SystemInit+0x5c>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SystemInit+0x5c>)
 80005d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005da:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80005dc:	f000 f878 	bl	80006d0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <SystemInit+0x64>)
 80005e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	f8ff0000 	.word	0xf8ff0000
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <SystemCoreClockUpdate+0xc4>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	f003 030c 	and.w	r3, r3, #12
 8000612:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d007      	beq.n	800062a <SystemCoreClockUpdate+0x32>
 800061a:	2b08      	cmp	r3, #8
 800061c:	d009      	beq.n	8000632 <SystemCoreClockUpdate+0x3a>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d133      	bne.n	800068a <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemCoreClockUpdate+0xcc>)
 8000626:	601a      	str	r2, [r3, #0]
      break;
 8000628:	e033      	b.n	8000692 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 800062c:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <SystemCoreClockUpdate+0xcc>)
 800062e:	601a      	str	r2, [r3, #0]
      break;
 8000630:	e02f      	b.n	8000692 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemCoreClockUpdate+0xc4>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800063a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemCoreClockUpdate+0xc4>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000644:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	0c9b      	lsrs	r3, r3, #18
 800064a:	3302      	adds	r3, #2
 800064c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d106      	bne.n	8000662 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <SystemCoreClockUpdate+0xd0>)
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 800065e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000660:	e017      	b.n	8000692 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <SystemCoreClockUpdate+0xc4>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <SystemCoreClockUpdate+0xd0>)
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 8000678:	6013      	str	r3, [r2, #0]
      break;
 800067a:	e00a      	b.n	8000692 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <SystemCoreClockUpdate+0xcc>)
 8000680:	fb02 f303 	mul.w	r3, r2, r3
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 8000686:	6013      	str	r3, [r2, #0]
      break;
 8000688:	e003      	b.n	8000692 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <SystemCoreClockUpdate+0xcc>)
 800068e:	601a      	str	r2, [r3, #0]
      break;
 8000690:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <SystemCoreClockUpdate+0xc4>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	f003 030f 	and.w	r3, r3, #15
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <SystemCoreClockUpdate+0xd4>)
 800069e:	5cd3      	ldrb	r3, [r2, r3]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	fa22 f303 	lsr.w	r3, r2, r3
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <SystemCoreClockUpdate+0xc8>)
 80006b0:	6013      	str	r3, [r2, #0]
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000
 80006c0:	20000000 	.word	0x20000000
 80006c4:	007a1200 	.word	0x007a1200
 80006c8:	003d0900 	.word	0x003d0900
 80006cc:	20000004 	.word	0x20000004

080006d0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80006d4:	f000 f802 	bl	80006dc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80006ea:	4a3a      	ldr	r2, [pc, #232]	; (80007d4 <SetSysClockTo72+0xf8>)
 80006ec:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <SetSysClockTo72+0xf8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <SetSysClockTo72+0xf8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <SetSysClockTo72+0x38>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000712:	d1f0      	bne.n	80006f6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000720:	2301      	movs	r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	e001      	b.n	800072a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d14b      	bne.n	80007c8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000730:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <SetSysClockTo72+0xfc>)
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <SetSysClockTo72+0xfc>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <SetSysClockTo72+0xfc>)
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SetSysClockTo72+0xfc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f023 0303 	bic.w	r3, r3, #3
 8000746:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000748:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <SetSysClockTo72+0xfc>)
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SetSysClockTo72+0xfc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000754:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <SetSysClockTo72+0xf8>)
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000770:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800077a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800077c:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <SetSysClockTo72+0xf8>)
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000786:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <SetSysClockTo72+0xf8>)
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <SetSysClockTo72+0xf8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000792:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000794:	bf00      	nop
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <SetSysClockTo72+0xf8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <SetSysClockTo72+0xf8>)
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <SetSysClockTo72+0xf8>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f023 0303 	bic.w	r3, r3, #3
 80007ac:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <SetSysClockTo72+0xf8>)
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <SetSysClockTo72+0xf8>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80007ba:	bf00      	nop
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SetSysClockTo72+0xf8>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f003 030c 	and.w	r3, r3, #12
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d1f9      	bne.n	80007bc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40022000 	.word	0x40022000

080007dc <__libc_init_array>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	2500      	movs	r5, #0
 80007e0:	4e0c      	ldr	r6, [pc, #48]	; (8000814 <__libc_init_array+0x38>)
 80007e2:	4c0d      	ldr	r4, [pc, #52]	; (8000818 <__libc_init_array+0x3c>)
 80007e4:	1ba4      	subs	r4, r4, r6
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	42a5      	cmp	r5, r4
 80007ea:	d109      	bne.n	8000800 <__libc_init_array+0x24>
 80007ec:	f000 f81a 	bl	8000824 <_init>
 80007f0:	2500      	movs	r5, #0
 80007f2:	4e0a      	ldr	r6, [pc, #40]	; (800081c <__libc_init_array+0x40>)
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <__libc_init_array+0x44>)
 80007f6:	1ba4      	subs	r4, r4, r6
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	42a5      	cmp	r5, r4
 80007fc:	d105      	bne.n	800080a <__libc_init_array+0x2e>
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000804:	4798      	blx	r3
 8000806:	3501      	adds	r5, #1
 8000808:	e7ee      	b.n	80007e8 <__libc_init_array+0xc>
 800080a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800080e:	4798      	blx	r3
 8000810:	3501      	adds	r5, #1
 8000812:	e7f2      	b.n	80007fa <__libc_init_array+0x1e>
 8000814:	0800083c 	.word	0x0800083c
 8000818:	0800083c 	.word	0x0800083c
 800081c:	0800083c 	.word	0x0800083c
 8000820:	08000840 	.word	0x08000840

08000824 <_init>:
 8000824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000826:	bf00      	nop
 8000828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082a:	bc08      	pop	{r3}
 800082c:	469e      	mov	lr, r3
 800082e:	4770      	bx	lr

08000830 <_fini>:
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	bf00      	nop
 8000834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000836:	bc08      	pop	{r3}
 8000838:	469e      	mov	lr, r3
 800083a:	4770      	bx	lr
