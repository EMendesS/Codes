
SPI_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000018  08000fac  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000003c  08000fac  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003caf  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000beb  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004c8  00000000  00000000  000248e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  00024da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b97  00000000  00000000  000251f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b33  00000000  00000000  00026d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000288c2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001404  00000000  00000000  00028940  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00029d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08000ef4 	.word	0x08000ef4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08000ef4 	.word	0x08000ef4

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002d2:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2202      	movs	r2, #2
 80002d8:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2204      	movs	r2, #4
 80002de:	70da      	strb	r2, [r3, #3]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr

080002ea <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	460b      	mov	r3, r1
 80002f4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80002f6:	887a      	ldrh	r2, [r7, #2]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	611a      	str	r2, [r3, #16]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	460b      	mov	r3, r1
 8000310:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000312:	887a      	ldrh	r2, [r7, #2]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	615a      	str	r2, [r3, #20]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
	...

08000324 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800033c:	4b4c      	ldr	r3, [pc, #304]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 030c 	and.w	r3, r3, #12
 8000344:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	2b04      	cmp	r3, #4
 800034a:	d007      	beq.n	800035c <RCC_GetClocksFreq+0x38>
 800034c:	2b08      	cmp	r3, #8
 800034e:	d009      	beq.n	8000364 <RCC_GetClocksFreq+0x40>
 8000350:	2b00      	cmp	r3, #0
 8000352:	d133      	bne.n	80003bc <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a47      	ldr	r2, [pc, #284]	; (8000474 <RCC_GetClocksFreq+0x150>)
 8000358:	601a      	str	r2, [r3, #0]
      break;
 800035a:	e033      	b.n	80003c4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a45      	ldr	r2, [pc, #276]	; (8000474 <RCC_GetClocksFreq+0x150>)
 8000360:	601a      	str	r2, [r3, #0]
      break;
 8000362:	e02f      	b.n	80003c4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000364:	4b42      	ldr	r3, [pc, #264]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800036c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800036e:	4b40      	ldr	r3, [pc, #256]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000376:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	0c9b      	lsrs	r3, r3, #18
 800037c:	3302      	adds	r3, #2
 800037e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d106      	bne.n	8000394 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	4a3b      	ldr	r2, [pc, #236]	; (8000478 <RCC_GetClocksFreq+0x154>)
 800038a:	fb02 f203 	mul.w	r2, r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000392:	e017      	b.n	80003c4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000394:	4b36      	ldr	r3, [pc, #216]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039c:	2b00      	cmp	r3, #0
 800039e:	d006      	beq.n	80003ae <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	4a35      	ldr	r2, [pc, #212]	; (8000478 <RCC_GetClocksFreq+0x154>)
 80003a4:	fb02 f203 	mul.w	r2, r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]
      break;
 80003ac:	e00a      	b.n	80003c4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	4a30      	ldr	r2, [pc, #192]	; (8000474 <RCC_GetClocksFreq+0x150>)
 80003b2:	fb02 f203 	mul.w	r2, r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
      break;
 80003ba:	e003      	b.n	80003c4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <RCC_GetClocksFreq+0x150>)
 80003c0:	601a      	str	r2, [r3, #0]
      break;
 80003c2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80003c4:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003cc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	091b      	lsrs	r3, r3, #4
 80003d2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003d4:	4a29      	ldr	r2, [pc, #164]	; (800047c <RCC_GetClocksFreq+0x158>)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	4413      	add	r3, r2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80003f4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80003fc:	4a1f      	ldr	r2, [pc, #124]	; (800047c <RCC_GetClocksFreq+0x158>)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	40da      	lsrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800041c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	0adb      	lsrs	r3, r3, #11
 8000422:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000424:	4a15      	ldr	r2, [pc, #84]	; (800047c <RCC_GetClocksFreq+0x158>)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	40da      	lsrs	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <RCC_GetClocksFreq+0x14c>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000444:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	0b9b      	lsrs	r3, r3, #14
 800044a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800044c:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <RCC_GetClocksFreq+0x15c>)
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	4413      	add	r3, r2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68da      	ldr	r2, [r3, #12]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	611a      	str	r2, [r3, #16]
}
 8000466:	bf00      	nop
 8000468:	371c      	adds	r7, #28
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	007a1200 	.word	0x007a1200
 8000478:	003d0900 	.word	0x003d0900
 800047c:	20000000 	.word	0x20000000
 8000480:	20000010 	.word	0x20000010

08000484 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d006      	beq.n	80004a4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000496:	4909      	ldr	r1, [pc, #36]	; (80004bc <RCC_APB2PeriphClockCmd+0x38>)
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <RCC_APB2PeriphClockCmd+0x38>)
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004a2:	e006      	b.n	80004b2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004a4:	4905      	ldr	r1, [pc, #20]	; (80004bc <RCC_APB2PeriphClockCmd+0x38>)
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <RCC_APB2PeriphClockCmd+0x38>)
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4013      	ands	r3, r2
 80004b0:	618b      	str	r3, [r1, #24]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000

080004c0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80004d4:	89fb      	ldrh	r3, [r7, #14]
 80004d6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80004da:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	885b      	ldrh	r3, [r3, #2]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80004f4:	4313      	orrs	r3, r2
 80004f6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80004fc:	4313      	orrs	r3, r2
 80004fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000504:	4313      	orrs	r3, r2
 8000506:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800050c:	4313      	orrs	r3, r2
 800050e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000514:	4313      	orrs	r3, r2
 8000516:	b29a      	uxth	r2, r3
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	4313      	orrs	r3, r2
 800051c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	89fa      	ldrh	r2, [r7, #14]
 8000522:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	8b9b      	ldrh	r3, [r3, #28]
 8000528:	b29b      	uxth	r3, r3
 800052a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800052e:	b29a      	uxth	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	8a1a      	ldrh	r2, [r3, #16]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	821a      	strh	r2, [r3, #16]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2200      	movs	r2, #0
 800056a:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2207      	movs	r2, #7
 8000582:	821a      	strh	r2, [r3, #16]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80005b0:	e007      	b.n	80005c2 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005bc:	b29a      	uxth	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	801a      	strh	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	887a      	ldrh	r2, [r7, #2]
 80005dc:	819a      	strh	r2, [r3, #12]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	899b      	ldrh	r3, [r3, #12]
 80005f4:	b29b      	uxth	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	891b      	ldrh	r3, [r3, #8]
 8000614:	b29a      	uxth	r2, r3
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4013      	ands	r3, r2
 800061a:	b29b      	uxth	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e001      	b.n	800062a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
	...

08000638 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000642:	2300      	movs	r3, #0
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000646:	2300      	movs	r3, #0
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	8a1b      	ldrh	r3, [r3, #16]
 800065e:	b29b      	uxth	r3, r3
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000664:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000668:	4013      	ands	r3, r2
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	88db      	ldrh	r3, [r3, #6]
 8000670:	461a      	mov	r2, r3
 8000672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000674:	4313      	orrs	r3, r2
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067a:	b29a      	uxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	899b      	ldrh	r3, [r3, #12]
 8000684:	b29b      	uxth	r3, r3
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800068a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800068e:	4013      	ands	r3, r2
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	891b      	ldrh	r3, [r3, #8]
 800069a:	4313      	orrs	r3, r2
 800069c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006aa:	4313      	orrs	r3, r2
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80006ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	8a9b      	ldrh	r3, [r3, #20]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80006be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80006c4:	4013      	ands	r3, r2
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	899b      	ldrh	r3, [r3, #12]
 80006cc:	461a      	mov	r2, r3
 80006ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d0:	4313      	orrs	r3, r2
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80006d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe1f 	bl	8000324 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	4a2e      	ldr	r2, [pc, #184]	; (80007a4 <USART_Init+0x16c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d102      	bne.n	80006f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006f2:	e001      	b.n	80006f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	899b      	ldrh	r3, [r3, #12]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b21b      	sxth	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	da0c      	bge.n	800071e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	009a      	lsls	r2, r3, #2
 800070e:	441a      	add	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
 800071c:	e00b      	b.n	8000736 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	009a      	lsls	r2, r3, #2
 8000728:	441a      	add	r2, r3
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <USART_Init+0x170>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000746:	091b      	lsrs	r3, r3, #4
 8000748:	2264      	movs	r2, #100	; 0x64
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	899b      	ldrh	r3, [r3, #12]
 8000758:	b29b      	uxth	r3, r3
 800075a:	b21b      	sxth	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	da0c      	bge.n	800077a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000760:	6a3b      	ldr	r3, [r7, #32]
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	3332      	adds	r3, #50	; 0x32
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <USART_Init+0x170>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	095b      	lsrs	r3, r3, #5
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000774:	4313      	orrs	r3, r2
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000778:	e00b      	b.n	8000792 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	3332      	adds	r3, #50	; 0x32
 8000780:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <USART_Init+0x170>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800078e:	4313      	orrs	r3, r2
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000794:	b29a      	uxth	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	811a      	strh	r2, [r3, #8]
}
 800079a:	bf00      	nop
 800079c:	3730      	adds	r7, #48	; 0x30
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40013800 	.word	0x40013800
 80007a8:	51eb851f 	.word	0x51eb851f

080007ac <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007ba:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	220c      	movs	r2, #12
 80007d2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	819a      	strh	r2, [r3, #12]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	899b      	ldrh	r3, [r3, #12]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000806:	e007      	b.n	8000818 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	899b      	ldrh	r3, [r3, #12]
 800080c:	b29b      	uxth	r3, r3
 800080e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000812:	b29a      	uxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	819a      	strh	r2, [r3, #12]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	460b      	mov	r3, r1
 800082c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b29a      	uxth	r2, r3
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	4013      	ands	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e001      	b.n	800084c <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	da0b      	bge.n	8000884 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800086c:	490d      	ldr	r1, [pc, #52]	; (80008a4 <NVIC_SetPriority+0x4c>)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 030f 	and.w	r3, r3, #15
 8000874:	3b04      	subs	r3, #4
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000882:	e009      	b.n	8000898 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000884:	4908      	ldr	r1, [pc, #32]	; (80008a8 <NVIC_SetPriority+0x50>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00
 80008a8:	e000e100 	.word	0xe000e100

080008ac <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ba:	d301      	bcc.n	80008c0 <SysTick_Config+0x14>
 80008bc:	2301      	movs	r3, #1
 80008be:	e011      	b.n	80008e4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008c8:	3b01      	subs	r3, #1
 80008ca:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80008cc:	210f      	movs	r1, #15
 80008ce:	f04f 30ff 	mov.w	r0, #4294967295
 80008d2:	f7ff ffc1 	bl	8000858 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <SysTick_Config+0x40>)
 80008de:	2207      	movs	r2, #7
 80008e0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <SysTick_Handler>:
void delay_ms(uint32_t nTime){
    TimingDelay = nTime;
    while(TimingDelay != 0);
}

void SysTick_Handler() {
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
    if(TimingDelay != 0x00){
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SysTick_Handler+0x20>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <SysTick_Handler+0x16>
        TimingDelay--;
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SysTick_Handler+0x20>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	4a03      	ldr	r2, [pc, #12]	; (8000910 <SysTick_Handler+0x20>)
 8000904:	6013      	str	r3, [r2, #0]
    }

}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000034 	.word	0x20000034

08000914 <PeripheralInit_SPI1_Slave>:

// setup SPI1 pins A4/SS, A5/SCK, A6/MISO, A7/MOSI on port A
void PeripheralInit_SPI1_Slave(){
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitDef;
    SPI_InitTypeDef SPI_InitDef;

    // initialize init structs
    GPIO_StructInit(&GPIO_InitDef);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fcd0 	bl	80002c4 <GPIO_StructInit>
    SPI_StructInit(&SPI_InitDef);
 8000924:	463b      	mov	r3, r7
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe0d 	bl	8000546 <SPI_StructInit>

    // initialize clocks
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC, ENABLE);
 800092c:	2101      	movs	r1, #1
 800092e:	f241 0015 	movw	r0, #4117	; 0x1015
 8000932:	f7ff fda7 	bl	8000484 <RCC_APB2PeriphClockCmd>

    // initialize A4/SS alternate function open-drain (50 MHz)
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_4;
 8000936:	2310      	movs	r3, #16
 8000938:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_AF_OD;
 800093a:	231c      	movs	r3, #28
 800093c:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 800093e:	2303      	movs	r3, #3
 8000940:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitDef);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4829      	ldr	r0, [pc, #164]	; (80009f0 <PeripheralInit_SPI1_Slave+0xdc>)
 800094a:	f7ff fbff 	bl	800014c <GPIO_Init>

    // initialize A5/SCK alternate function open-drain (50 MHz)
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_5;
 800094e:	2320      	movs	r3, #32
 8000950:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_AF_OD;
 8000952:	231c      	movs	r3, #28
 8000954:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 8000956:	2303      	movs	r3, #3
 8000958:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitDef);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4823      	ldr	r0, [pc, #140]	; (80009f0 <PeripheralInit_SPI1_Slave+0xdc>)
 8000962:	f7ff fbf3 	bl	800014c <GPIO_Init>

    // initialize A6/MISO alternate function push-pull (50 MHz)
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_6;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_AF_PP;
 800096a:	2318      	movs	r3, #24
 800096c:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 800096e:	2303      	movs	r3, #3
 8000970:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitDef);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <PeripheralInit_SPI1_Slave+0xdc>)
 800097a:	f7ff fbe7 	bl	800014c <GPIO_Init>

    // initialize A7/MOSI alternate function open-drain (50 MHz)
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_7;
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_AF_OD;
 8000982:	231c      	movs	r3, #28
 8000984:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 8000986:	2303      	movs	r3, #3
 8000988:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitDef);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <PeripheralInit_SPI1_Slave+0xdc>)
 8000992:	f7ff fbdb 	bl	800014c <GPIO_Init>

    // initialize LED output open-drain (2 MHz)
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_13;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_Out_OD;
 800099c:	2314      	movs	r3, #20
 800099e:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_2MHz;
 80009a0:	2302      	movs	r3, #2
 80009a2:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOC, &GPIO_InitDef);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4812      	ldr	r0, [pc, #72]	; (80009f4 <PeripheralInit_SPI1_Slave+0xe0>)
 80009ac:	f7ff fbce 	bl	800014c <GPIO_Init>

    //  initialize SPI slave
    // for slave, no need to define SPI_BaudRatePrescaler
    SPI_InitDef.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80009b0:	2300      	movs	r3, #0
 80009b2:	803b      	strh	r3, [r7, #0]
    SPI_InitDef.SPI_Mode = SPI_Mode_Slave;
 80009b4:	2300      	movs	r3, #0
 80009b6:	807b      	strh	r3, [r7, #2]
    SPI_InitDef.SPI_DataSize = SPI_DataSize_16b; // 8-bit transactions
 80009b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009bc:	80bb      	strh	r3, [r7, #4]
    SPI_InitDef.SPI_FirstBit = SPI_FirstBit_MSB; // MSB first
 80009be:	2300      	movs	r3, #0
 80009c0:	81fb      	strh	r3, [r7, #14]
    SPI_InitDef.SPI_CPOL = SPI_CPOL_Low; // CPOL = 0, clock idle low
 80009c2:	2300      	movs	r3, #0
 80009c4:	80fb      	strh	r3, [r7, #6]
    SPI_InitDef.SPI_CPHA = SPI_CPHA_2Edge; // CPHA = 1
 80009c6:	2301      	movs	r3, #1
 80009c8:	813b      	strh	r3, [r7, #8]
    SPI_InitDef.SPI_NSS = SPI_NSS_Hard; // use hardware SS
 80009ca:	2300      	movs	r3, #0
 80009cc:	817b      	strh	r3, [r7, #10]
    SPI_InitDef.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64; // APB2 72/64 = 1.125 MHz
 80009ce:	2328      	movs	r3, #40	; 0x28
 80009d0:	81bb      	strh	r3, [r7, #12]
    // SPI_InitDef.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256; // APB2 72/256 = 0.28 MHz
    // SPI_InitDef.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16; // APB2 72/16 = 4.5 MHz
    SPI_InitDef.SPI_CRCPolynomial = 7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	823b      	strh	r3, [r7, #16]
    SPI_Init(SPI1, &SPI_InitDef);
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <PeripheralInit_SPI1_Slave+0xe4>)
 80009dc:	f7ff fd70 	bl	80004c0 <SPI_Init>

    SPI_Cmd(SPI1, ENABLE);
 80009e0:	2101      	movs	r1, #1
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <PeripheralInit_SPI1_Slave+0xe4>)
 80009e4:	f7ff fdd3 	bl	800058e <SPI_Cmd>

}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40013000 	.word	0x40013000

080009fc <transfer_8b_SPI1_Slave>:

// transfer a byte over SPI1  A4/SS, A5/SCK, A6/MISO, A7/MOSI
uint16_t transfer_8b_SPI1_Slave(uint16_t outByte){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
    // while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
    // return SPI_I2S_ReceiveData(SPI1); // read received

    // Approach 2,
    // from http://www.lxtronic.com/index.php/basic-spi-simple-read-write
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8000a06:	bf00      	nop
 8000a08:	2102      	movs	r1, #2
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <transfer_8b_SPI1_Slave+0x44>)
 8000a0c:	f7ff fdf8 	bl	8000600 <SPI_I2S_GetFlagStatus>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f8      	beq.n	8000a08 <transfer_8b_SPI1_Slave+0xc>
    SPI_I2S_SendData(SPI1, outByte);                                                        // send
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <transfer_8b_SPI1_Slave+0x44>)
 8000a1c:	f7ff fdd6 	bl	80005cc <SPI_I2S_SendData>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8000a20:	bf00      	nop
 8000a22:	2101      	movs	r1, #1
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <transfer_8b_SPI1_Slave+0x44>)
 8000a26:	f7ff fdeb 	bl	8000600 <SPI_I2S_GetFlagStatus>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f8      	beq.n	8000a22 <transfer_8b_SPI1_Slave+0x26>
    return SPI_I2S_ReceiveData(SPI1);                                                   // read recieived
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <transfer_8b_SPI1_Slave+0x44>)
 8000a32:	f7ff fdd9 	bl	80005e8 <SPI_I2S_ReceiveData>
 8000a36:	4603      	mov	r3, r0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40013000 	.word	0x40013000

08000a44 <PeripheralInit_USART1>:
    while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE));
    return SPI_I2S_ReceiveData(SPI2);                                                   // read recieived
}

// setup USART1 pins A9/TX, A10/RX on port A
void PeripheralInit_USART1(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitDef;
    USART_InitTypeDef USART_InitDef;

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f244 0005 	movw	r0, #16389	; 0x4005
 8000a50:	f7ff fd18 	bl	8000484 <RCC_APB2PeriphClockCmd>
    GPIO_StructInit(&GPIO_InitDef);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fc33 	bl	80002c4 <GPIO_StructInit>

    // initialize A9/TX
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_9;
 8000a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a62:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_AF_PP;
 8000a64:	2318      	movs	r3, #24
 8000a66:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitDef);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <PeripheralInit_USART1+0x8c>)
 8000a74:	f7ff fb6a 	bl	800014c <GPIO_Init>

    // initialize A10/RX
    GPIO_InitDef.GPIO_Pin = GPIO_Pin_10;
 8000a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7c:	82bb      	strh	r3, [r7, #20]
    GPIO_InitDef.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	75fb      	strb	r3, [r7, #23]
    GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 8000a82:	2303      	movs	r3, #3
 8000a84:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitDef);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <PeripheralInit_USART1+0x8c>)
 8000a8e:	f7ff fb5d 	bl	800014c <GPIO_Init>

    USART_StructInit(&USART_InitDef);
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe89 	bl	80007ac <USART_StructInit>
    // modify for non-default values
    USART_InitDef.USART_BaudRate = 115200;
 8000a9a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a9e:	607b      	str	r3, [r7, #4]
    USART_InitDef.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	81fb      	strh	r3, [r7, #14]
    USART_InitDef.USART_WordLength = USART_WordLength_8b;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	813b      	strh	r3, [r7, #8]
    USART_InitDef.USART_StopBits = USART_StopBits_1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	817b      	strh	r3, [r7, #10]
    USART_InitDef.USART_Parity = USART_Parity_No;
 8000aac:	2300      	movs	r3, #0
 8000aae:	81bb      	strh	r3, [r7, #12]
    USART_InitDef.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	823b      	strh	r3, [r7, #16]

    USART_Init(USART1, &USART_InitDef);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <PeripheralInit_USART1+0x90>)
 8000aba:	f7ff fdbd 	bl	8000638 <USART_Init>
    USART_Cmd(USART1, ENABLE);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <PeripheralInit_USART1+0x90>)
 8000ac2:	f7ff fe8f 	bl	80007e4 <USART_Cmd>

}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40013800 	.word	0x40013800

08000ad8 <put_char_usart1>:

// transmit a character over USART1 A9/TX
int put_char_usart1(int c) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 8000ae0:	bf00      	nop
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <put_char_usart1+0x30>)
 8000ae6:	f7ff fe9c 	bl	8000822 <USART_GetFlagStatus>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f8      	beq.n	8000ae2 <put_char_usart1+0xa>
    USART1->DR = (c & 0xFF);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <put_char_usart1+0x30>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	b292      	uxth	r2, r2
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	b292      	uxth	r2, r2
 8000afa:	809a      	strh	r2, [r3, #4]
    return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40013800 	.word	0x40013800

08000b0c <serial_print_usart1>:
        return -1;
    }
}

// transmit a string over USART1 A9/TX
int serial_print_usart1(char chars[]){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    int i=0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
    // print until null char or until too many characters counted
    while((chars[i] != 0x00) && (i < 512)){
 8000b18:	e009      	b.n	8000b2e <serial_print_usart1+0x22>
        put_char_usart1(chars[i]);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffd8 	bl	8000ad8 <put_char_usart1>
        i++;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
    while((chars[i] != 0x00) && (i < 512)){
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <serial_print_usart1+0x36>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b40:	dbeb      	blt.n	8000b1a <serial_print_usart1+0xe>
    }
    if(i < 512){ return 0; } else { return 1; }
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b48:	da01      	bge.n	8000b4e <serial_print_usart1+0x42>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <serial_print_usart1+0x44>
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <main>:

// code for slave
int main(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

//    volatile uint32_t count = 0;
    uint16_t numRead = 0x00;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	80fb      	strh	r3, [r7, #6]

    SysTick_Config(SystemCoreClock/1000); // configure system clock for 1000 ticks/s or 1 ms
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <main+0x70>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <main+0x74>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	099b      	lsrs	r3, r3, #6
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fe9c 	bl	80008ac <SysTick_Config>
    PeripheralInit_USART1(); // initialize USART1 at A9/TX, A10/RX
 8000b74:	f7ff ff66 	bl	8000a44 <PeripheralInit_USART1>
    PeripheralInit_SPI1_Slave(); // initialize SPI1 slave at A4/SS, A5/SCK, A6/MISO, A7/MOSI
 8000b78:	f7ff fecc 	bl	8000914 <PeripheralInit_SPI1_Slave>
    // PeripheralInit_SPI2_Slave(); // initialize SPI2 slave at B12/SS, B13/SCK, B14/MISO, B15/MOSI

    // announce start of code
    serial_print_usart1("Quick example of SPI communication\n");
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <main+0x78>)
 8000b7e:	f7ff ffc5 	bl	8000b0c <serial_print_usart1>
    serial_print_usart1("SPI slave, emulating L3GD20H gyro\n");
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <main+0x7c>)
 8000b84:	f7ff ffc2 	bl	8000b0c <serial_print_usart1>

    while(1){

        numRead = transfer_8b_SPI1_Slave(0xD7); // receive a request command
 8000b88:	20d7      	movs	r0, #215	; 0xd7
 8000b8a:	f7ff ff37 	bl	80009fc <transfer_8b_SPI1_Slave>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
        GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <main+0x80>)
 8000b98:	f7ff fbb5 	bl	8000306 <GPIO_ResetBits>
        // Print received
        serial_print_usart1("Received....");
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <main+0x84>)
 8000b9e:	f7ff ffb5 	bl	8000b0c <serial_print_usart1>
        itoa(numRead, palavra, 10);
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	220a      	movs	r2, #10
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <main+0x88>)
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f961 	bl	8000e70 <itoa>
        serial_print_usart1(palavra);
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <main+0x88>)
 8000bb0:	f7ff ffac 	bl	8000b0c <serial_print_usart1>
        serial_print_usart1("\n");
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <main+0x8c>)
 8000bb6:	f7ff ffa9 	bl	8000b0c <serial_print_usart1>
        GPIO_SetBits(GPIOC, GPIO_Pin_13);
 8000bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <main+0x80>)
 8000bc0:	f7ff fb93 	bl	80002ea <GPIO_SetBits>
        numRead = transfer_8b_SPI1_Slave(0xD7); // receive a request command
 8000bc4:	e7e0      	b.n	8000b88 <main+0x30>
 8000bc6:	bf00      	nop
 8000bc8:	20000014 	.word	0x20000014
 8000bcc:	10624dd3 	.word	0x10624dd3
 8000bd0:	08000f0c 	.word	0x08000f0c
 8000bd4:	08000f30 	.word	0x08000f30
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	08000f54 	.word	0x08000f54
 8000be0:	20000038 	.word	0x20000038
 8000be4:	08000f64 	.word	0x08000f64

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bee:	e003      	b.n	8000bf8 <LoopCopyDataInit>

08000bf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000bf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bf6:	3104      	adds	r1, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000bfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c00:	d3f6      	bcc.n	8000bf0 <CopyDataInit>
	ldr	r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000c04:	e002      	b.n	8000c0c <LoopFillZerobss>

08000c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c08:	f842 3b04 	str.w	r3, [r2], #4

08000c0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000c0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c10:	d3f9      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f000 f837 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f000 f8ef 	bl	8000df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff ff9d 	bl	8000b58 <main>
	bx	lr
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000c24:	08000f94 	.word	0x08000f94
	ldr	r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c2c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000c30:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000c34:	2000003c 	.word	0x2000003c

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>

08000c3a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <SystemInit+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <SystemInit+0x5c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c94:	4912      	ldr	r1, [pc, #72]	; (8000ce0 <SystemInit+0x5c>)
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <SystemInit+0x5c>)
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <SystemInit+0x60>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <SystemInit+0x5c>)
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <SystemInit+0x5c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <SystemInit+0x5c>)
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <SystemInit+0x5c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <SystemInit+0x5c>)
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <SystemInit+0x5c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cc6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SystemInit+0x5c>)
 8000cca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cce:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000cd0:	f000 f80c 	bl	8000cec <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SystemInit+0x64>)
 8000cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cda:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	f8ff0000 	.word	0xf8ff0000
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000cf0:	f000 f802 	bl	8000cf8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d06:	4a3a      	ldr	r2, [pc, #232]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d08:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d103      	bne.n	8000d30 <SetSysClockTo72+0x38>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d2e:	d1f0      	bne.n	8000d12 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	e001      	b.n	8000d46 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d14b      	bne.n	8000de4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d4c:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <SetSysClockTo72+0xfc>)
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <SetSysClockTo72+0xfc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000d58:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <SetSysClockTo72+0xfc>)
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <SetSysClockTo72+0xfc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 0303 	bic.w	r3, r3, #3
 8000d62:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <SetSysClockTo72+0xfc>)
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <SetSysClockTo72+0xfc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d70:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d96:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d98:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000da2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dae:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000db0:	bf00      	nop
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f023 0303 	bic.w	r3, r3, #3
 8000dc8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000dd6:	bf00      	nop
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SetSysClockTo72+0xf8>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d1f9      	bne.n	8000dd8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40022000 	.word	0x40022000

08000df8 <__libc_init_array>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	4e0c      	ldr	r6, [pc, #48]	; (8000e30 <__libc_init_array+0x38>)
 8000dfe:	4c0d      	ldr	r4, [pc, #52]	; (8000e34 <__libc_init_array+0x3c>)
 8000e00:	1ba4      	subs	r4, r4, r6
 8000e02:	10a4      	asrs	r4, r4, #2
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	d109      	bne.n	8000e1c <__libc_init_array+0x24>
 8000e08:	f000 f874 	bl	8000ef4 <_init>
 8000e0c:	2500      	movs	r5, #0
 8000e0e:	4e0a      	ldr	r6, [pc, #40]	; (8000e38 <__libc_init_array+0x40>)
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <__libc_init_array+0x44>)
 8000e12:	1ba4      	subs	r4, r4, r6
 8000e14:	10a4      	asrs	r4, r4, #2
 8000e16:	42a5      	cmp	r5, r4
 8000e18:	d105      	bne.n	8000e26 <__libc_init_array+0x2e>
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
 8000e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e20:	4798      	blx	r3
 8000e22:	3501      	adds	r5, #1
 8000e24:	e7ee      	b.n	8000e04 <__libc_init_array+0xc>
 8000e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e2a:	4798      	blx	r3
 8000e2c:	3501      	adds	r5, #1
 8000e2e:	e7f2      	b.n	8000e16 <__libc_init_array+0x1e>
 8000e30:	08000f8c 	.word	0x08000f8c
 8000e34:	08000f8c 	.word	0x08000f8c
 8000e38:	08000f8c 	.word	0x08000f8c
 8000e3c:	08000f90 	.word	0x08000f90

08000e40 <__itoa>:
 8000e40:	1e93      	subs	r3, r2, #2
 8000e42:	2b22      	cmp	r3, #34	; 0x22
 8000e44:	b510      	push	{r4, lr}
 8000e46:	460c      	mov	r4, r1
 8000e48:	d904      	bls.n	8000e54 <__itoa+0x14>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	461c      	mov	r4, r3
 8000e4e:	700b      	strb	r3, [r1, #0]
 8000e50:	4620      	mov	r0, r4
 8000e52:	bd10      	pop	{r4, pc}
 8000e54:	2a0a      	cmp	r2, #10
 8000e56:	d109      	bne.n	8000e6c <__itoa+0x2c>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	da07      	bge.n	8000e6c <__itoa+0x2c>
 8000e5c:	232d      	movs	r3, #45	; 0x2d
 8000e5e:	700b      	strb	r3, [r1, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	4240      	negs	r0, r0
 8000e64:	4421      	add	r1, r4
 8000e66:	f000 f805 	bl	8000e74 <__utoa>
 8000e6a:	e7f1      	b.n	8000e50 <__itoa+0x10>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e7f9      	b.n	8000e64 <__itoa+0x24>

08000e70 <itoa>:
 8000e70:	f7ff bfe6 	b.w	8000e40 <__itoa>

08000e74 <__utoa>:
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	b08b      	sub	sp, #44	; 0x2c
 8000e78:	4603      	mov	r3, r0
 8000e7a:	460f      	mov	r7, r1
 8000e7c:	466d      	mov	r5, sp
 8000e7e:	4c1c      	ldr	r4, [pc, #112]	; (8000ef0 <__utoa+0x7c>)
 8000e80:	f104 0e20 	add.w	lr, r4, #32
 8000e84:	462e      	mov	r6, r5
 8000e86:	6820      	ldr	r0, [r4, #0]
 8000e88:	6861      	ldr	r1, [r4, #4]
 8000e8a:	3408      	adds	r4, #8
 8000e8c:	c603      	stmia	r6!, {r0, r1}
 8000e8e:	4574      	cmp	r4, lr
 8000e90:	4635      	mov	r5, r6
 8000e92:	d1f7      	bne.n	8000e84 <__utoa+0x10>
 8000e94:	7921      	ldrb	r1, [r4, #4]
 8000e96:	6820      	ldr	r0, [r4, #0]
 8000e98:	7131      	strb	r1, [r6, #4]
 8000e9a:	1e91      	subs	r1, r2, #2
 8000e9c:	2922      	cmp	r1, #34	; 0x22
 8000e9e:	6030      	str	r0, [r6, #0]
 8000ea0:	f04f 0100 	mov.w	r1, #0
 8000ea4:	d904      	bls.n	8000eb0 <__utoa+0x3c>
 8000ea6:	7039      	strb	r1, [r7, #0]
 8000ea8:	460f      	mov	r7, r1
 8000eaa:	4638      	mov	r0, r7
 8000eac:	b00b      	add	sp, #44	; 0x2c
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	1e78      	subs	r0, r7, #1
 8000eb2:	4606      	mov	r6, r0
 8000eb4:	fbb3 f5f2 	udiv	r5, r3, r2
 8000eb8:	fb02 3315 	mls	r3, r2, r5, r3
 8000ebc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8000ec0:	4473      	add	r3, lr
 8000ec2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ec6:	1c4c      	adds	r4, r1, #1
 8000ec8:	f806 3f01 	strb.w	r3, [r6, #1]!
 8000ecc:	462b      	mov	r3, r5
 8000ece:	b965      	cbnz	r5, 8000eea <__utoa+0x76>
 8000ed0:	553d      	strb	r5, [r7, r4]
 8000ed2:	187a      	adds	r2, r7, r1
 8000ed4:	1acc      	subs	r4, r1, r3
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	dae7      	bge.n	8000eaa <__utoa+0x36>
 8000eda:	7844      	ldrb	r4, [r0, #1]
 8000edc:	7815      	ldrb	r5, [r2, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f800 5f01 	strb.w	r5, [r0, #1]!
 8000ee4:	f802 4901 	strb.w	r4, [r2], #-1
 8000ee8:	e7f4      	b.n	8000ed4 <__utoa+0x60>
 8000eea:	4621      	mov	r1, r4
 8000eec:	e7e2      	b.n	8000eb4 <__utoa+0x40>
 8000eee:	bf00      	nop
 8000ef0:	08000f66 	.word	0x08000f66

08000ef4 <_init>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr

08000f00 <_fini>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	bf00      	nop
 8000f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f06:	bc08      	pop	{r3}
 8000f08:	469e      	mov	lr, r3
 8000f0a:	4770      	bx	lr
