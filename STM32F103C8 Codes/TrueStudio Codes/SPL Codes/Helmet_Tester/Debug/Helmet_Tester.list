
Helmet_Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ca8  08000ca8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ca8  08000ca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000014  08000cc4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000038  08000cc4  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003eb0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000009fa  00000000  00000000  00023eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005f8  00000000  00000000  000248e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00024ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001caf  00000000  00000000  00025470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b24  00000000  00000000  0002711f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00028c43  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000019b4  00000000  00000000  00028cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c90 	.word	0x08000c90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000c90 	.word	0x08000c90

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80002d6:	4909      	ldr	r1, [pc, #36]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002da:	699a      	ldr	r2, [r3, #24]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4313      	orrs	r3, r2
 80002e0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80002e2:	e006      	b.n	80002f2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80002e4:	4905      	ldr	r1, [pc, #20]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <RCC_APB2PeriphClockCmd+0x38>)
 80002e8:	699a      	ldr	r2, [r3, #24]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	4013      	ands	r3, r2
 80002f0:	618b      	str	r3, [r1, #24]
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d006      	beq.n	8000320 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000312:	4909      	ldr	r1, [pc, #36]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000316:	69da      	ldr	r2, [r3, #28]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4313      	orrs	r3, r2
 800031c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800031e:	e006      	b.n	800032e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000320:	4905      	ldr	r1, [pc, #20]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <RCC_APB1PeriphClockCmd+0x38>)
 8000324:	69da      	ldr	r2, [r3, #28]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	43db      	mvns	r3, r3
 800032a:	4013      	ands	r3, r2
 800032c:	61cb      	str	r3, [r1, #28]
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000

0800033c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a2e      	ldr	r2, [pc, #184]	; (800040c <TIM_TimeBaseInit+0xd0>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d013      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a2d      	ldr	r2, [pc, #180]	; (8000410 <TIM_TimeBaseInit+0xd4>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d00f      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000366:	d00b      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a2a      	ldr	r2, [pc, #168]	; (8000414 <TIM_TimeBaseInit+0xd8>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d007      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a29      	ldr	r2, [pc, #164]	; (8000418 <TIM_TimeBaseInit+0xdc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d003      	beq.n	8000380 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a28      	ldr	r2, [pc, #160]	; (800041c <TIM_TimeBaseInit+0xe0>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d108      	bne.n	8000392 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000380:	89fb      	ldrh	r3, [r7, #14]
 8000382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000386:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	885a      	ldrh	r2, [r3, #2]
 800038c:	89fb      	ldrh	r3, [r7, #14]
 800038e:	4313      	orrs	r3, r2
 8000390:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a22      	ldr	r2, [pc, #136]	; (8000420 <TIM_TimeBaseInit+0xe4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d00c      	beq.n	80003b4 <TIM_TimeBaseInit+0x78>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a21      	ldr	r2, [pc, #132]	; (8000424 <TIM_TimeBaseInit+0xe8>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d008      	beq.n	80003b4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003a8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	88da      	ldrh	r2, [r3, #6]
 80003ae:	89fb      	ldrh	r3, [r7, #14]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	89fa      	ldrh	r2, [r7, #14]
 80003b8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	889a      	ldrh	r2, [r3, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	881a      	ldrh	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a0f      	ldr	r2, [pc, #60]	; (800040c <TIM_TimeBaseInit+0xd0>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d00f      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <TIM_TimeBaseInit+0xd4>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d00b      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <TIM_TimeBaseInit+0xec>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d007      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <TIM_TimeBaseInit+0xf0>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d003      	beq.n	80003f2 <TIM_TimeBaseInit+0xb6>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <TIM_TimeBaseInit+0xf4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d104      	bne.n	80003fc <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	7a1b      	ldrb	r3, [r3, #8]
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2201      	movs	r2, #1
 8000400:	829a      	strh	r2, [r3, #20]
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40012c00 	.word	0x40012c00
 8000410:	40013400 	.word	0x40013400
 8000414:	40000400 	.word	0x40000400
 8000418:	40000800 	.word	0x40000800
 800041c:	40000c00 	.word	0x40000c00
 8000420:	40001000 	.word	0x40001000
 8000424:	40001400 	.word	0x40001400
 8000428:	40014000 	.word	0x40014000
 800042c:	40014400 	.word	0x40014400
 8000430:	40014800 	.word	0x40014800

08000434 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	817b      	strh	r3, [r7, #10]
 8000442:	2300      	movs	r3, #0
 8000444:	81fb      	strh	r3, [r7, #14]
 8000446:	2300      	movs	r3, #0
 8000448:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	8c1b      	ldrh	r3, [r3, #32]
 800044e:	b29b      	uxth	r3, r3
 8000450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000454:	b29a      	uxth	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	8c1b      	ldrh	r3, [r3, #32]
 800045e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	889b      	ldrh	r3, [r3, #4]
 8000464:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	8b9b      	ldrh	r3, [r3, #28]
 800046a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 800046c:	897b      	ldrh	r3, [r7, #10]
 800046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000472:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000474:	897b      	ldrh	r3, [r7, #10]
 8000476:	f023 0303 	bic.w	r3, r3, #3
 800047a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	881a      	ldrh	r2, [r3, #0]
 8000480:	897b      	ldrh	r3, [r7, #10]
 8000482:	4313      	orrs	r3, r2
 8000484:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000486:	89fb      	ldrh	r3, [r7, #14]
 8000488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800048c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	891b      	ldrh	r3, [r3, #8]
 8000492:	021b      	lsls	r3, r3, #8
 8000494:	b29a      	uxth	r2, r3
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	4313      	orrs	r3, r2
 800049a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	885b      	ldrh	r3, [r3, #2]
 80004a0:	021b      	lsls	r3, r3, #8
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	89fb      	ldrh	r3, [r7, #14]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <TIM_OC3Init+0x104>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d003      	beq.n	80004ba <TIM_OC3Init+0x86>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a21      	ldr	r2, [pc, #132]	; (800053c <TIM_OC3Init+0x108>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d12b      	bne.n	8000512 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	895b      	ldrh	r3, [r3, #10]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	89fb      	ldrh	r3, [r7, #14]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004d6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	889b      	ldrh	r3, [r3, #4]
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	b29a      	uxth	r2, r3
 80004e0:	89fb      	ldrh	r3, [r7, #14]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 80004e6:	89bb      	ldrh	r3, [r7, #12]
 80004e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004ec:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 80004ee:	89bb      	ldrh	r3, [r7, #12]
 80004f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004f4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	899b      	ldrh	r3, [r3, #12]
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	89bb      	ldrh	r3, [r7, #12]
 8000500:	4313      	orrs	r3, r2
 8000502:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	89db      	ldrh	r3, [r3, #14]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	b29a      	uxth	r2, r3
 800050c:	89bb      	ldrh	r3, [r7, #12]
 800050e:	4313      	orrs	r3, r2
 8000510:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	89ba      	ldrh	r2, [r7, #12]
 8000516:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	897a      	ldrh	r2, [r7, #10]
 800051c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	88da      	ldrh	r2, [r3, #6]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	89fa      	ldrh	r2, [r7, #14]
 800052a:	841a      	strh	r2, [r3, #32]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40012c00 	.word	0x40012c00
 800053c:	40013400 	.word	0x40013400

08000540 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	81bb      	strh	r3, [r7, #12]
 800054e:	2300      	movs	r3, #0
 8000550:	817b      	strh	r3, [r7, #10]
 8000552:	2300      	movs	r3, #0
 8000554:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8c1b      	ldrh	r3, [r3, #32]
 800055a:	b29b      	uxth	r3, r3
 800055c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000560:	b29a      	uxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	8c1b      	ldrh	r3, [r3, #32]
 800056a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	889b      	ldrh	r3, [r3, #4]
 8000570:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	8b9b      	ldrh	r3, [r3, #28]
 8000576:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8000578:	89bb      	ldrh	r3, [r7, #12]
 800057a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800057e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000580:	89bb      	ldrh	r3, [r7, #12]
 8000582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000586:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	b29a      	uxth	r2, r3
 8000590:	89bb      	ldrh	r3, [r7, #12]
 8000592:	4313      	orrs	r3, r2
 8000594:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800059c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	891b      	ldrh	r3, [r3, #8]
 80005a2:	031b      	lsls	r3, r3, #12
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	897b      	ldrh	r3, [r7, #10]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	885b      	ldrh	r3, [r3, #2]
 80005b0:	031b      	lsls	r3, r3, #12
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <TIM_OC4Init+0xc8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d003      	beq.n	80005ca <TIM_OC4Init+0x8a>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <TIM_OC4Init+0xcc>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d10a      	bne.n	80005e0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005d0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	899b      	ldrh	r3, [r3, #12]
 80005d6:	019b      	lsls	r3, r3, #6
 80005d8:	b29a      	uxth	r2, r3
 80005da:	89fb      	ldrh	r3, [r7, #14]
 80005dc:	4313      	orrs	r3, r2
 80005de:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	89fa      	ldrh	r2, [r7, #14]
 80005e4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	89ba      	ldrh	r2, [r7, #12]
 80005ea:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	88da      	ldrh	r2, [r3, #6]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	897a      	ldrh	r2, [r7, #10]
 80005fa:	841a      	strh	r2, [r3, #32]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40012c00 	.word	0x40012c00
 800060c:	40013400 	.word	0x40013400

08000610 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	b29a      	uxth	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000632:	e007      	b.n	8000644 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
 800063a:	f023 0301 	bic.w	r3, r3, #1
 800063e:	b29a      	uxth	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	801a      	strh	r2, [r3, #0]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066a:	b29a      	uxth	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000670:	e007      	b.n	8000682 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800067c:	b29a      	uxth	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	801a      	strh	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	8b9b      	ldrh	r3, [r3, #28]
 80006a0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	f023 0308 	bic.w	r3, r3, #8
 80006a8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	89fa      	ldrh	r2, [r7, #14]
 80006b6:	839a      	strh	r2, [r3, #28]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8b9b      	ldrh	r3, [r3, #28]
 80006d6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006de:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	839a      	strh	r2, [r3, #28]
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	da0b      	bge.n	8000728 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <NVIC_SetPriority+0x4c>)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	3b04      	subs	r3, #4
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000726:	e009      	b.n	800073c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000728:	4908      	ldr	r1, [pc, #32]	; (800074c <NVIC_SetPriority+0x50>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00
 800074c:	e000e100 	.word	0xe000e100

08000750 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075e:	d301      	bcc.n	8000764 <SysTick_Config+0x14>
 8000760:	2301      	movs	r3, #1
 8000762:	e011      	b.n	8000788 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800076c:	3b01      	subs	r3, #1
 800076e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000770:	210f      	movs	r1, #15
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	f7ff ffc1 	bl	80006fc <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <SysTick_Config+0x40>)
 8000782:	2207      	movs	r2, #7
 8000784:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	e000e010 	.word	0xe000e010

08000794 <SysTick_Handler>:
}
//.............................Set SysTick Definitions.........................................

// SysTick_Handler function will be called every 1 us
void SysTick_Handler()
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	usTime++;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <SysTick_Handler+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <SysTick_Handler+0x28>)
 80007a0:	6013      	str	r3, [r2, #0]
	if (usTicks != 0)
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <SysTick_Handler+0x2c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <SysTick_Handler+0x20>
	{
		usTicks--;
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SysTick_Handler+0x2c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <SysTick_Handler+0x2c>)
 80007b2:	6013      	str	r3, [r2, #0]
	}
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000034 	.word	0x20000034
 80007c0:	20000030 	.word	0x20000030

080007c4 <SysTick_Init>:

void SysTick_Init()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	// Update SystemCoreClock value
	SystemCoreClockUpdate();
 80007c8:	f000 f94c 	bl	8000a64 <SystemCoreClockUpdate>
	// Configure the SysTick timer to overflow every 1 us
	SysTick_Config(SystemCoreClock / 1000000);
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SysTick_Init+0x20>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SysTick_Init+0x24>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffb9 	bl	8000750 <SysTick_Config>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000000 	.word	0x20000000
 80007e8:	431bde83 	.word	0x431bde83

080007ec <delayUs>:

//..............................Set Delays................................

void delayUs(uint32_t us)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	// Reload us value
	usTicks = us;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <delayUs+0x24>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
	// Wait until usTick reach zero
	while (usTicks);
 80007fa:	bf00      	nop
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <delayUs+0x24>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1fb      	bne.n	80007fc <delayUs+0x10>
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000030 	.word	0x20000030

08000814 <delayMs>:

void delayMs(uint32_t ms)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	// Wait until ms reach zero
	while (ms--)
 800081c:	e003      	b.n	8000826 <delayMs+0x12>
	{
		// delay 1ms
		delayUs(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f7ff ffe3 	bl	80007ec <delayUs>
	while (ms--)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f6      	bne.n	800081e <delayMs+0xa>
	}
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <InitializeTimer>:
#include "SysTick.h"

int i=0;

void InitializeTimer()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = 99;
 800083e:	2363      	movs	r3, #99	; 0x63
 8000840:	80bb      	strh	r3, [r7, #4]
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000842:	2300      	movs	r3, #0
 8000844:	80fb      	strh	r3, [r7, #6]
    timerInitStructure.TIM_Period = 100;
 8000846:	2364      	movs	r3, #100	; 0x64
 8000848:	813b      	strh	r3, [r7, #8]
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	817b      	strh	r3, [r7, #10]
    timerInitStructure.TIM_RepetitionCounter = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	733b      	strb	r3, [r7, #12]
    TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800085a:	f7ff fd6f 	bl	800033c <TIM_TimeBaseInit>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <InitializePWMChannel>:

void InitializePWMChannel(int pulse1, int pulse2)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]

    TIM_OCInitTypeDef TIM_OCInitStructure;
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000870:	2360      	movs	r3, #96	; 0x60
 8000872:	813b      	strh	r3, [r7, #8]
    TIM_OCInitStructure.TIM_Pulse = pulse1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b29b      	uxth	r3, r3
 8000878:	81fb      	strh	r3, [r7, #14]
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800087a:	2301      	movs	r3, #1
 800087c:	817b      	strh	r3, [r7, #10]
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800087e:	2300      	movs	r3, #0
 8000880:	823b      	strh	r3, [r7, #16]
    TIM_OC3Init(TIM2, &TIM_OCInitStructure);	//SELECIONA CANAL3 DO TIMER 1 (PA2, NESSE CASO)
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800088c:	f7ff fdd2 	bl	8000434 <TIM_OC3Init>

    TIM_OCInitStructure.TIM_Pulse = pulse2;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	81fb      	strh	r3, [r7, #14]
    TIM_OC4Init(TIM2, &TIM_OCInitStructure);	//SELECIONA CANAL4 DO TIMER 1 (PA3, NESSE CASO)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008a0:	f7ff fe4e 	bl	8000540 <TIM_OC4Init>

    TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80008a4:	2108      	movs	r1, #8
 80008a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008aa:	f7ff feef 	bl	800068c <TIM_OC3PreloadConfig>
    TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80008ae:	2108      	movs	r1, #8
 80008b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008b4:	f7ff ff05 	bl	80006c2 <TIM_OC4PreloadConfig>
    TIM_ARRPreloadConfig(TIM2, ENABLE);
 80008b8:	2101      	movs	r1, #1
 80008ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008be:	f7ff fec6 	bl	800064e <TIM_ARRPreloadConfig>
    TIM_Cmd(TIM2, ENABLE);
 80008c2:	2101      	movs	r1, #1
 80008c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008c8:	f7ff fea2 	bl	8000610 <TIM_Cmd>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <InitializeLEDs>:

void InitializeLEDs()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80008da:	2101      	movs	r1, #1
 80008dc:	2004      	movs	r0, #4
 80008de:	f7ff fcf1 	bl	80002c4 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80008e2:	2101      	movs	r1, #1
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fd0b 	bl	8000300 <RCC_APB1PeriphClockCmd>

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80008ea:	230c      	movs	r3, #12
 80008ec:	80bb      	strh	r3, [r7, #4]
    gpioStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008ee:	2318      	movs	r3, #24
 80008f0:	71fb      	strb	r3, [r7, #7]
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008f2:	2303      	movs	r3, #3
 80008f4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &gpioStructure);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <InitializeLEDs+0x34>)
 80008fc:	f7ff fc26 	bl	800014c <GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010800 	.word	0x40010800

0800090c <main>:

int main()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    InitializeLEDs();
 8000910:	f7ff ffe0 	bl	80008d4 <InitializeLEDs>
    InitializeTimer();
 8000914:	f7ff ff90 	bl	8000838 <InitializeTimer>
    InitializePWMChannel(70,10);
 8000918:	210a      	movs	r1, #10
 800091a:	2046      	movs	r0, #70	; 0x46
 800091c:	f7ff ffa3 	bl	8000866 <InitializePWMChannel>
    SysTick_Init();
 8000920:	f7ff ff50 	bl	80007c4 <SysTick_Init>

    while(1){

    	TIM2->ARR = 1000;
 8000924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	859a      	strh	r2, [r3, #44]	; 0x2c
    	delayMs(50);
 800092e:	2032      	movs	r0, #50	; 0x32
 8000930:	f7ff ff70 	bl	8000814 <delayMs>
    	TIM2->ARR = 500;
 8000934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000938:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800093c:	859a      	strh	r2, [r3, #44]	; 0x2c
    	delayMs(50);
 800093e:	2032      	movs	r0, #50	; 0x32
 8000940:	f7ff ff68 	bl	8000814 <delayMs>
    	TIM2->ARR = 2000;
 8000944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000948:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800094c:	859a      	strh	r2, [r3, #44]	; 0x2c
    	delayMs(50);
 800094e:	2032      	movs	r0, #50	; 0x32
 8000950:	f7ff ff60 	bl	8000814 <delayMs>

    	delayMs(300);
 8000954:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000958:	f7ff ff5c 	bl	8000814 <delayMs>
    	TIM2->ARR = 1000;
 800095c:	e7e2      	b.n	8000924 <main+0x18>
	...

08000960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000964:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000966:	e003      	b.n	8000970 <LoopCopyDataInit>

08000968 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800096a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800096c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800096e:	3104      	adds	r1, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000974:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000976:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000978:	d3f6      	bcc.n	8000968 <CopyDataInit>
	ldr	r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800097c:	e002      	b.n	8000984 <LoopFillZerobss>

0800097e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800097e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000980:	f842 3b04 	str.w	r3, [r2], #4

08000984 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000986:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000988:	d3f9      	bcc.n	800097e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098a:	f000 f837 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f000 f95b 	bl	8000c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000992:	f7ff ffbb 	bl	800090c <main>
	bx	lr
 8000996:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000998:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800099c:	08000cb0 	.word	0x08000cb0
	ldr	r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009a4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80009a8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80009ac:	20000038 	.word	0x20000038

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>

080009b2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
	...

080009fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a00:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <SystemInit+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <SystemInit+0x5c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a0c:	4912      	ldr	r1, [pc, #72]	; (8000a58 <SystemInit+0x5c>)
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <SystemInit+0x5c>)
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <SystemInit+0x60>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a18:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <SystemInit+0x5c>)
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <SystemInit+0x5c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <SystemInit+0x5c>)
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <SystemInit+0x5c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <SystemInit+0x5c>)
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <SystemInit+0x5c>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a3e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SystemInit+0x5c>)
 8000a42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a46:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a48:	f000 f878 	bl	8000b3c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SystemInit+0x64>)
 8000a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a52:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	f8ff0000 	.word	0xf8ff0000
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <SystemCoreClockUpdate+0xc4>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
 8000a7e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d007      	beq.n	8000a96 <SystemCoreClockUpdate+0x32>
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d009      	beq.n	8000a9e <SystemCoreClockUpdate+0x3a>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d133      	bne.n	8000af6 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <SystemCoreClockUpdate+0xcc>)
 8000a92:	601a      	str	r2, [r3, #0]
      break;
 8000a94:	e033      	b.n	8000afe <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000a98:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <SystemCoreClockUpdate+0xcc>)
 8000a9a:	601a      	str	r2, [r3, #0]
      break;
 8000a9c:	e02f      	b.n	8000afe <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <SystemCoreClockUpdate+0xc4>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000aa6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <SystemCoreClockUpdate+0xc4>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab0:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	0c9b      	lsrs	r3, r3, #18
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d106      	bne.n	8000ace <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <SystemCoreClockUpdate+0xd0>)
 8000ac4:	fb02 f303 	mul.w	r3, r2, r3
 8000ac8:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000aca:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000acc:	e017      	b.n	8000afe <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <SystemCoreClockUpdate+0xc4>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <SystemCoreClockUpdate+0xd0>)
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000ae4:	6013      	str	r3, [r2, #0]
      break;
 8000ae6:	e00a      	b.n	8000afe <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <SystemCoreClockUpdate+0xcc>)
 8000aec:	fb02 f303 	mul.w	r3, r2, r3
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000af2:	6013      	str	r3, [r2, #0]
      break;
 8000af4:	e003      	b.n	8000afe <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <SystemCoreClockUpdate+0xcc>)
 8000afa:	601a      	str	r2, [r3, #0]
      break;
 8000afc:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <SystemCoreClockUpdate+0xc4>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	f003 030f 	and.w	r3, r3, #15
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <SystemCoreClockUpdate+0xd4>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <SystemCoreClockUpdate+0xc8>)
 8000b1c:	6013      	str	r3, [r2, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	007a1200 	.word	0x007a1200
 8000b34:	003d0900 	.word	0x003d0900
 8000b38:	20000004 	.word	0x20000004

08000b3c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000b40:	f000 f802 	bl	8000b48 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b56:	4a3a      	ldr	r2, [pc, #232]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b60:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d103      	bne.n	8000b80 <SetSysClockTo72+0x38>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b7e:	d1f0      	bne.n	8000b62 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e001      	b.n	8000b96 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d14b      	bne.n	8000c34 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000b9c:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <SetSysClockTo72+0xfc>)
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <SetSysClockTo72+0xfc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <SetSysClockTo72+0xfc>)
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <SetSysClockTo72+0xfc>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f023 0303 	bic.w	r3, r3, #3
 8000bb2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <SetSysClockTo72+0xfc>)
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <SetSysClockTo72+0xfc>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000be6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000bf2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bfe:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c00:	bf00      	nop
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f9      	beq.n	8000c02 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f023 0303 	bic.w	r3, r3, #3
 8000c18:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000c26:	bf00      	nop
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SetSysClockTo72+0xf8>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d1f9      	bne.n	8000c28 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40022000 	.word	0x40022000

08000c48 <__libc_init_array>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	4e0c      	ldr	r6, [pc, #48]	; (8000c80 <__libc_init_array+0x38>)
 8000c4e:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__libc_init_array+0x3c>)
 8000c50:	1ba4      	subs	r4, r4, r6
 8000c52:	10a4      	asrs	r4, r4, #2
 8000c54:	42a5      	cmp	r5, r4
 8000c56:	d109      	bne.n	8000c6c <__libc_init_array+0x24>
 8000c58:	f000 f81a 	bl	8000c90 <_init>
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4e0a      	ldr	r6, [pc, #40]	; (8000c88 <__libc_init_array+0x40>)
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <__libc_init_array+0x44>)
 8000c62:	1ba4      	subs	r4, r4, r6
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	42a5      	cmp	r5, r4
 8000c68:	d105      	bne.n	8000c76 <__libc_init_array+0x2e>
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c70:	4798      	blx	r3
 8000c72:	3501      	adds	r5, #1
 8000c74:	e7ee      	b.n	8000c54 <__libc_init_array+0xc>
 8000c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c7a:	4798      	blx	r3
 8000c7c:	3501      	adds	r5, #1
 8000c7e:	e7f2      	b.n	8000c66 <__libc_init_array+0x1e>
 8000c80:	08000ca8 	.word	0x08000ca8
 8000c84:	08000ca8 	.word	0x08000ca8
 8000c88:	08000ca8 	.word	0x08000ca8
 8000c8c:	08000cac 	.word	0x08000cac

08000c90 <_init>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr

08000c9c <_fini>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr
