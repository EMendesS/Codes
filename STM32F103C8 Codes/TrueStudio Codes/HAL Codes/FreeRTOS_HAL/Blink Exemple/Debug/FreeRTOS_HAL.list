
FreeRTOS_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002170  08002170  00012170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000df8  20000010  08002188  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e08  08002188  00020e08  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000142ac  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f93  00000000  00000000  000342e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009404  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d48  00000000  00000000  00040680  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011a0  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006c44  00000000  00000000  00042568  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000051ec  00000000  00000000  000491ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e398  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026f8  00000000  00000000  0004e414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080020ec 	.word	0x080020ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080020ec 	.word	0x080020ec

08000150 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a07      	ldr	r2, [pc, #28]	; (8000170 <HAL_Init+0x20>)
{
 8000152:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000156:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015e:	f000 f81b 	bl	8000198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f001 fef6 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fe92 	bl	8001e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd08      	pop	{r3, pc}
 8000170:	40022000 	.word	0x40022000

08000174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <HAL_IncTick+0x10>)
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HAL_IncTick+0x14>)
 8000178:	6811      	ldr	r1, [r2, #0]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	440b      	add	r3, r1
 800017e:	6013      	str	r3, [r2, #0]
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000d78 	.word	0x20000d78
 8000188:	20000000 	.word	0x20000000

0800018c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800018c:	4b01      	ldr	r3, [pc, #4]	; (8000194 <HAL_GetTick+0x8>)
 800018e:	6818      	ldr	r0, [r3, #0]
}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000d78 	.word	0x20000d78

08000198 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000198:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800019a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800019c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800019e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001a6:	041b      	lsls	r3, r3, #16
 80001a8:	0c1b      	lsrs	r3, r3, #16
 80001aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001b4:	60d3      	str	r3, [r2, #12]
 80001b6:	4770      	bx	lr
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001be:	b530      	push	{r4, r5, lr}
 80001c0:	68dc      	ldr	r4, [r3, #12]
 80001c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001cc:	2b04      	cmp	r3, #4
 80001ce:	bf28      	it	cs
 80001d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d8:	bf98      	it	ls
 80001da:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001dc:	fa05 f303 	lsl.w	r3, r5, r3
 80001e0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e4:	bf88      	it	hi
 80001e6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001e8:	4019      	ands	r1, r3
 80001ea:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001ec:	fa05 f404 	lsl.w	r4, r5, r4
 80001f0:	3c01      	subs	r4, #1
 80001f2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80001f4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f6:	ea42 0201 	orr.w	r2, r2, r1
 80001fa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	bfa9      	itett	ge
 8000200:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	4b06      	ldrlt	r3, [pc, #24]	; (8000220 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000206:	b2d2      	uxtbge	r2, r2
 8000208:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	bfbb      	ittet	lt
 800020e:	f000 000f 	andlt.w	r0, r0, #15
 8000212:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	541a      	strblt	r2, [r3, r0]
 800021a:	bd30      	pop	{r4, r5, pc}
 800021c:	e000ed00 	.word	0xe000ed00
 8000220:	e000ed14 	.word	0xe000ed14

08000224 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000224:	2800      	cmp	r0, #0
 8000226:	db08      	blt.n	800023a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000228:	2301      	movs	r3, #1
 800022a:	0942      	lsrs	r2, r0, #5
 800022c:	f000 001f 	and.w	r0, r0, #31
 8000230:	fa03 f000 	lsl.w	r0, r3, r0
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_NVIC_EnableIRQ+0x18>)
 8000236:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100

08000240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000244:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000246:	4626      	mov	r6, r4
 8000248:	4b66      	ldr	r3, [pc, #408]	; (80003e4 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800024a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80003f4 <HAL_GPIO_Init+0x1b4>
 800024e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80003f8 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000252:	680a      	ldr	r2, [r1, #0]
 8000254:	fa32 f506 	lsrs.w	r5, r2, r6
 8000258:	d102      	bne.n	8000260 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800025a:	b003      	add	sp, #12
 800025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000260:	f04f 0801 	mov.w	r8, #1
 8000264:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000268:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800026c:	4590      	cmp	r8, r2
 800026e:	d17f      	bne.n	8000370 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000270:	684d      	ldr	r5, [r1, #4]
 8000272:	2d12      	cmp	r5, #18
 8000274:	f000 80aa 	beq.w	80003cc <HAL_GPIO_Init+0x18c>
 8000278:	f200 8083 	bhi.w	8000382 <HAL_GPIO_Init+0x142>
 800027c:	2d02      	cmp	r5, #2
 800027e:	f000 80a2 	beq.w	80003c6 <HAL_GPIO_Init+0x186>
 8000282:	d877      	bhi.n	8000374 <HAL_GPIO_Init+0x134>
 8000284:	2d00      	cmp	r5, #0
 8000286:	f000 8089 	beq.w	800039c <HAL_GPIO_Init+0x15c>
 800028a:	2d01      	cmp	r5, #1
 800028c:	f000 8099 	beq.w	80003c2 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000290:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000294:	2aff      	cmp	r2, #255	; 0xff
 8000296:	bf93      	iteet	ls
 8000298:	4682      	movls	sl, r0
 800029a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800029e:	3d08      	subhi	r5, #8
 80002a0:	f8d0 b000 	ldrls.w	fp, [r0]
 80002a4:	bf92      	itee	ls
 80002a6:	00b5      	lslls	r5, r6, #2
 80002a8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002ac:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002ae:	fa09 f805 	lsl.w	r8, r9, r5
 80002b2:	ea2b 0808 	bic.w	r8, fp, r8
 80002b6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002ba:	bf88      	it	hi
 80002bc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002c0:	ea48 0505 	orr.w	r5, r8, r5
 80002c4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002c8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80002cc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80002d0:	d04e      	beq.n	8000370 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002d2:	4d45      	ldr	r5, [pc, #276]	; (80003e8 <HAL_GPIO_Init+0x1a8>)
 80002d4:	4f44      	ldr	r7, [pc, #272]	; (80003e8 <HAL_GPIO_Init+0x1a8>)
 80002d6:	69ad      	ldr	r5, [r5, #24]
 80002d8:	f026 0803 	bic.w	r8, r6, #3
 80002dc:	f045 0501 	orr.w	r5, r5, #1
 80002e0:	61bd      	str	r5, [r7, #24]
 80002e2:	69bd      	ldr	r5, [r7, #24]
 80002e4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80002e8:	f005 0501 	and.w	r5, r5, #1
 80002ec:	9501      	str	r5, [sp, #4]
 80002ee:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80002f2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80002f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80002fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000300:	fa09 f90b 	lsl.w	r9, r9, fp
 8000304:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000308:	4d38      	ldr	r5, [pc, #224]	; (80003ec <HAL_GPIO_Init+0x1ac>)
 800030a:	42a8      	cmp	r0, r5
 800030c:	d063      	beq.n	80003d6 <HAL_GPIO_Init+0x196>
 800030e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000312:	42a8      	cmp	r0, r5
 8000314:	d061      	beq.n	80003da <HAL_GPIO_Init+0x19a>
 8000316:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800031a:	42a8      	cmp	r0, r5
 800031c:	d05f      	beq.n	80003de <HAL_GPIO_Init+0x19e>
 800031e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000322:	42a8      	cmp	r0, r5
 8000324:	bf0c      	ite	eq
 8000326:	2503      	moveq	r5, #3
 8000328:	2504      	movne	r5, #4
 800032a:	fa05 f50b 	lsl.w	r5, r5, fp
 800032e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000332:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000336:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000338:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800033c:	bf14      	ite	ne
 800033e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000340:	4395      	biceq	r5, r2
 8000342:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000344:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000346:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800034a:	bf14      	ite	ne
 800034c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800034e:	4395      	biceq	r5, r2
 8000350:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000352:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000354:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000358:	bf14      	ite	ne
 800035a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800035c:	4395      	biceq	r5, r2
 800035e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000360:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000362:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000366:	bf14      	ite	ne
 8000368:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800036a:	ea25 0202 	biceq.w	r2, r5, r2
 800036e:	60da      	str	r2, [r3, #12]
	position++;
 8000370:	3601      	adds	r6, #1
 8000372:	e76e      	b.n	8000252 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000374:	2d03      	cmp	r5, #3
 8000376:	d022      	beq.n	80003be <HAL_GPIO_Init+0x17e>
 8000378:	2d11      	cmp	r5, #17
 800037a:	d189      	bne.n	8000290 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800037c:	68cc      	ldr	r4, [r1, #12]
 800037e:	3404      	adds	r4, #4
          break;
 8000380:	e786      	b.n	8000290 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000382:	4f1b      	ldr	r7, [pc, #108]	; (80003f0 <HAL_GPIO_Init+0x1b0>)
 8000384:	42bd      	cmp	r5, r7
 8000386:	d009      	beq.n	800039c <HAL_GPIO_Init+0x15c>
 8000388:	d812      	bhi.n	80003b0 <HAL_GPIO_Init+0x170>
 800038a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80003fc <HAL_GPIO_Init+0x1bc>
 800038e:	454d      	cmp	r5, r9
 8000390:	d004      	beq.n	800039c <HAL_GPIO_Init+0x15c>
 8000392:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000396:	454d      	cmp	r5, r9
 8000398:	f47f af7a 	bne.w	8000290 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800039c:	688c      	ldr	r4, [r1, #8]
 800039e:	b1c4      	cbz	r4, 80003d2 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003a0:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80003a2:	bf0c      	ite	eq
 80003a4:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003a8:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003ac:	2408      	movs	r4, #8
 80003ae:	e76f      	b.n	8000290 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003b0:	4575      	cmp	r5, lr
 80003b2:	d0f3      	beq.n	800039c <HAL_GPIO_Init+0x15c>
 80003b4:	4565      	cmp	r5, ip
 80003b6:	d0f1      	beq.n	800039c <HAL_GPIO_Init+0x15c>
 80003b8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000400 <HAL_GPIO_Init+0x1c0>
 80003bc:	e7eb      	b.n	8000396 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003be:	2400      	movs	r4, #0
 80003c0:	e766      	b.n	8000290 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003c2:	68cc      	ldr	r4, [r1, #12]
          break;
 80003c4:	e764      	b.n	8000290 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003c6:	68cc      	ldr	r4, [r1, #12]
 80003c8:	3408      	adds	r4, #8
          break;
 80003ca:	e761      	b.n	8000290 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003cc:	68cc      	ldr	r4, [r1, #12]
 80003ce:	340c      	adds	r4, #12
          break;
 80003d0:	e75e      	b.n	8000290 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003d2:	2404      	movs	r4, #4
 80003d4:	e75c      	b.n	8000290 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003d6:	2500      	movs	r5, #0
 80003d8:	e7a7      	b.n	800032a <HAL_GPIO_Init+0xea>
 80003da:	2501      	movs	r5, #1
 80003dc:	e7a5      	b.n	800032a <HAL_GPIO_Init+0xea>
 80003de:	2502      	movs	r5, #2
 80003e0:	e7a3      	b.n	800032a <HAL_GPIO_Init+0xea>
 80003e2:	bf00      	nop
 80003e4:	40010400 	.word	0x40010400
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800
 80003f0:	10210000 	.word	0x10210000
 80003f4:	10310000 	.word	0x10310000
 80003f8:	10320000 	.word	0x10320000
 80003fc:	10110000 	.word	0x10110000
 8000400:	10220000 	.word	0x10220000

08000404 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000404:	b10a      	cbz	r2, 800040a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000406:	6101      	str	r1, [r0, #16]
 8000408:	4770      	bx	lr
 800040a:	0409      	lsls	r1, r1, #16
 800040c:	e7fb      	b.n	8000406 <HAL_GPIO_WritePin+0x2>

0800040e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800040e:	68c3      	ldr	r3, [r0, #12]
 8000410:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000412:	bf14      	ite	ne
 8000414:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000416:	6101      	streq	r1, [r0, #16]
 8000418:	4770      	bx	lr
	...

0800041c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800041c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000420:	4605      	mov	r5, r0
 8000422:	b908      	cbnz	r0, 8000428 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000424:	2001      	movs	r0, #1
 8000426:	e03c      	b.n	80004a2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000428:	6803      	ldr	r3, [r0, #0]
 800042a:	07db      	lsls	r3, r3, #31
 800042c:	d410      	bmi.n	8000450 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800042e:	682b      	ldr	r3, [r5, #0]
 8000430:	079f      	lsls	r7, r3, #30
 8000432:	d45d      	bmi.n	80004f0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000434:	682b      	ldr	r3, [r5, #0]
 8000436:	0719      	lsls	r1, r3, #28
 8000438:	f100 8094 	bmi.w	8000564 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800043c:	682b      	ldr	r3, [r5, #0]
 800043e:	075a      	lsls	r2, r3, #29
 8000440:	f100 80be 	bmi.w	80005c0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000444:	69e8      	ldr	r0, [r5, #28]
 8000446:	2800      	cmp	r0, #0
 8000448:	f040 812c 	bne.w	80006a4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800044c:	2000      	movs	r0, #0
 800044e:	e028      	b.n	80004a2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000450:	4c8f      	ldr	r4, [pc, #572]	; (8000690 <HAL_RCC_OscConfig+0x274>)
 8000452:	6863      	ldr	r3, [r4, #4]
 8000454:	f003 030c 	and.w	r3, r3, #12
 8000458:	2b04      	cmp	r3, #4
 800045a:	d007      	beq.n	800046c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800045c:	6863      	ldr	r3, [r4, #4]
 800045e:	f003 030c 	and.w	r3, r3, #12
 8000462:	2b08      	cmp	r3, #8
 8000464:	d109      	bne.n	800047a <HAL_RCC_OscConfig+0x5e>
 8000466:	6863      	ldr	r3, [r4, #4]
 8000468:	03de      	lsls	r6, r3, #15
 800046a:	d506      	bpl.n	800047a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800046c:	6823      	ldr	r3, [r4, #0]
 800046e:	039c      	lsls	r4, r3, #14
 8000470:	d5dd      	bpl.n	800042e <HAL_RCC_OscConfig+0x12>
 8000472:	686b      	ldr	r3, [r5, #4]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1da      	bne.n	800042e <HAL_RCC_OscConfig+0x12>
 8000478:	e7d4      	b.n	8000424 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800047a:	686b      	ldr	r3, [r5, #4]
 800047c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000480:	d112      	bne.n	80004a8 <HAL_RCC_OscConfig+0x8c>
 8000482:	6823      	ldr	r3, [r4, #0]
 8000484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000488:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800048a:	f7ff fe7f 	bl	800018c <HAL_GetTick>
 800048e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	0398      	lsls	r0, r3, #14
 8000494:	d4cb      	bmi.n	800042e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000496:	f7ff fe79 	bl	800018c <HAL_GetTick>
 800049a:	1b80      	subs	r0, r0, r6
 800049c:	2864      	cmp	r0, #100	; 0x64
 800049e:	d9f7      	bls.n	8000490 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004a0:	2003      	movs	r0, #3
}
 80004a2:	b002      	add	sp, #8
 80004a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004a8:	b99b      	cbnz	r3, 80004d2 <HAL_RCC_OscConfig+0xb6>
 80004aa:	6823      	ldr	r3, [r4, #0]
 80004ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004b0:	6023      	str	r3, [r4, #0]
 80004b2:	6823      	ldr	r3, [r4, #0]
 80004b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004ba:	f7ff fe67 	bl	800018c <HAL_GetTick>
 80004be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	0399      	lsls	r1, r3, #14
 80004c4:	d5b3      	bpl.n	800042e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80004c6:	f7ff fe61 	bl	800018c <HAL_GetTick>
 80004ca:	1b80      	subs	r0, r0, r6
 80004cc:	2864      	cmp	r0, #100	; 0x64
 80004ce:	d9f7      	bls.n	80004c0 <HAL_RCC_OscConfig+0xa4>
 80004d0:	e7e6      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004d6:	6823      	ldr	r3, [r4, #0]
 80004d8:	d103      	bne.n	80004e2 <HAL_RCC_OscConfig+0xc6>
 80004da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004de:	6023      	str	r3, [r4, #0]
 80004e0:	e7cf      	b.n	8000482 <HAL_RCC_OscConfig+0x66>
 80004e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e6:	6023      	str	r3, [r4, #0]
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ee:	e7cb      	b.n	8000488 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80004f0:	4c67      	ldr	r4, [pc, #412]	; (8000690 <HAL_RCC_OscConfig+0x274>)
 80004f2:	6863      	ldr	r3, [r4, #4]
 80004f4:	f013 0f0c 	tst.w	r3, #12
 80004f8:	d007      	beq.n	800050a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80004fa:	6863      	ldr	r3, [r4, #4]
 80004fc:	f003 030c 	and.w	r3, r3, #12
 8000500:	2b08      	cmp	r3, #8
 8000502:	d110      	bne.n	8000526 <HAL_RCC_OscConfig+0x10a>
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	03da      	lsls	r2, r3, #15
 8000508:	d40d      	bmi.n	8000526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	079b      	lsls	r3, r3, #30
 800050e:	d502      	bpl.n	8000516 <HAL_RCC_OscConfig+0xfa>
 8000510:	692b      	ldr	r3, [r5, #16]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d186      	bne.n	8000424 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	696a      	ldr	r2, [r5, #20]
 800051a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800051e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000522:	6023      	str	r3, [r4, #0]
 8000524:	e786      	b.n	8000434 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000526:	692a      	ldr	r2, [r5, #16]
 8000528:	4b5a      	ldr	r3, [pc, #360]	; (8000694 <HAL_RCC_OscConfig+0x278>)
 800052a:	b16a      	cbz	r2, 8000548 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000530:	f7ff fe2c 	bl	800018c <HAL_GetTick>
 8000534:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	079f      	lsls	r7, r3, #30
 800053a:	d4ec      	bmi.n	8000516 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800053c:	f7ff fe26 	bl	800018c <HAL_GetTick>
 8000540:	1b80      	subs	r0, r0, r6
 8000542:	2802      	cmp	r0, #2
 8000544:	d9f7      	bls.n	8000536 <HAL_RCC_OscConfig+0x11a>
 8000546:	e7ab      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000548:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800054a:	f7ff fe1f 	bl	800018c <HAL_GetTick>
 800054e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	0798      	lsls	r0, r3, #30
 8000554:	f57f af6e 	bpl.w	8000434 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000558:	f7ff fe18 	bl	800018c <HAL_GetTick>
 800055c:	1b80      	subs	r0, r0, r6
 800055e:	2802      	cmp	r0, #2
 8000560:	d9f6      	bls.n	8000550 <HAL_RCC_OscConfig+0x134>
 8000562:	e79d      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000564:	69aa      	ldr	r2, [r5, #24]
 8000566:	4c4a      	ldr	r4, [pc, #296]	; (8000690 <HAL_RCC_OscConfig+0x274>)
 8000568:	4b4b      	ldr	r3, [pc, #300]	; (8000698 <HAL_RCC_OscConfig+0x27c>)
 800056a:	b1da      	cbz	r2, 80005a4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000570:	f7ff fe0c 	bl	800018c <HAL_GetTick>
 8000574:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000578:	079b      	lsls	r3, r3, #30
 800057a:	d50d      	bpl.n	8000598 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800057c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000580:	4b46      	ldr	r3, [pc, #280]	; (800069c <HAL_RCC_OscConfig+0x280>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	fbb3 f3f2 	udiv	r3, r3, r2
 8000588:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800058a:	bf00      	nop
  }
  while (Delay --);
 800058c:	9b01      	ldr	r3, [sp, #4]
 800058e:	1e5a      	subs	r2, r3, #1
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f9      	bne.n	800058a <HAL_RCC_OscConfig+0x16e>
 8000596:	e751      	b.n	800043c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000598:	f7ff fdf8 	bl	800018c <HAL_GetTick>
 800059c:	1b80      	subs	r0, r0, r6
 800059e:	2802      	cmp	r0, #2
 80005a0:	d9e9      	bls.n	8000576 <HAL_RCC_OscConfig+0x15a>
 80005a2:	e77d      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005a6:	f7ff fdf1 	bl	800018c <HAL_GetTick>
 80005aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005ae:	079f      	lsls	r7, r3, #30
 80005b0:	f57f af44 	bpl.w	800043c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80005b4:	f7ff fdea 	bl	800018c <HAL_GetTick>
 80005b8:	1b80      	subs	r0, r0, r6
 80005ba:	2802      	cmp	r0, #2
 80005bc:	d9f6      	bls.n	80005ac <HAL_RCC_OscConfig+0x190>
 80005be:	e76f      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005c0:	4c33      	ldr	r4, [pc, #204]	; (8000690 <HAL_RCC_OscConfig+0x274>)
 80005c2:	69e3      	ldr	r3, [r4, #28]
 80005c4:	00d8      	lsls	r0, r3, #3
 80005c6:	d424      	bmi.n	8000612 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80005c8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	69e3      	ldr	r3, [r4, #28]
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61e3      	str	r3, [r4, #28]
 80005d2:	69e3      	ldr	r3, [r4, #28]
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005dc:	4e30      	ldr	r6, [pc, #192]	; (80006a0 <HAL_RCC_OscConfig+0x284>)
 80005de:	6833      	ldr	r3, [r6, #0]
 80005e0:	05d9      	lsls	r1, r3, #23
 80005e2:	d518      	bpl.n	8000616 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005e4:	68eb      	ldr	r3, [r5, #12]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d126      	bne.n	8000638 <HAL_RCC_OscConfig+0x21c>
 80005ea:	6a23      	ldr	r3, [r4, #32]
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80005f2:	f7ff fdcb 	bl	800018c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80005f6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80005fa:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005fc:	6a23      	ldr	r3, [r4, #32]
 80005fe:	079b      	lsls	r3, r3, #30
 8000600:	d53f      	bpl.n	8000682 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000602:	2f00      	cmp	r7, #0
 8000604:	f43f af1e 	beq.w	8000444 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000608:	69e3      	ldr	r3, [r4, #28]
 800060a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800060e:	61e3      	str	r3, [r4, #28]
 8000610:	e718      	b.n	8000444 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000612:	2700      	movs	r7, #0
 8000614:	e7e2      	b.n	80005dc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000616:	6833      	ldr	r3, [r6, #0]
 8000618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800061e:	f7ff fdb5 	bl	800018c <HAL_GetTick>
 8000622:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000624:	6833      	ldr	r3, [r6, #0]
 8000626:	05da      	lsls	r2, r3, #23
 8000628:	d4dc      	bmi.n	80005e4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800062a:	f7ff fdaf 	bl	800018c <HAL_GetTick>
 800062e:	eba0 0008 	sub.w	r0, r0, r8
 8000632:	2864      	cmp	r0, #100	; 0x64
 8000634:	d9f6      	bls.n	8000624 <HAL_RCC_OscConfig+0x208>
 8000636:	e733      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000638:	b9ab      	cbnz	r3, 8000666 <HAL_RCC_OscConfig+0x24a>
 800063a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800063c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000640:	f023 0301 	bic.w	r3, r3, #1
 8000644:	6223      	str	r3, [r4, #32]
 8000646:	6a23      	ldr	r3, [r4, #32]
 8000648:	f023 0304 	bic.w	r3, r3, #4
 800064c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800064e:	f7ff fd9d 	bl	800018c <HAL_GetTick>
 8000652:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000654:	6a23      	ldr	r3, [r4, #32]
 8000656:	0798      	lsls	r0, r3, #30
 8000658:	d5d3      	bpl.n	8000602 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800065a:	f7ff fd97 	bl	800018c <HAL_GetTick>
 800065e:	1b80      	subs	r0, r0, r6
 8000660:	4540      	cmp	r0, r8
 8000662:	d9f7      	bls.n	8000654 <HAL_RCC_OscConfig+0x238>
 8000664:	e71c      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000666:	2b05      	cmp	r3, #5
 8000668:	6a23      	ldr	r3, [r4, #32]
 800066a:	d103      	bne.n	8000674 <HAL_RCC_OscConfig+0x258>
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6223      	str	r3, [r4, #32]
 8000672:	e7ba      	b.n	80005ea <HAL_RCC_OscConfig+0x1ce>
 8000674:	f023 0301 	bic.w	r3, r3, #1
 8000678:	6223      	str	r3, [r4, #32]
 800067a:	6a23      	ldr	r3, [r4, #32]
 800067c:	f023 0304 	bic.w	r3, r3, #4
 8000680:	e7b6      	b.n	80005f0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000682:	f7ff fd83 	bl	800018c <HAL_GetTick>
 8000686:	eba0 0008 	sub.w	r0, r0, r8
 800068a:	42b0      	cmp	r0, r6
 800068c:	d9b6      	bls.n	80005fc <HAL_RCC_OscConfig+0x1e0>
 800068e:	e707      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
 8000690:	40021000 	.word	0x40021000
 8000694:	42420000 	.word	0x42420000
 8000698:	42420480 	.word	0x42420480
 800069c:	2000000c 	.word	0x2000000c
 80006a0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <HAL_RCC_OscConfig+0x334>)
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	461c      	mov	r4, r3
 80006aa:	f002 020c 	and.w	r2, r2, #12
 80006ae:	2a08      	cmp	r2, #8
 80006b0:	d03d      	beq.n	800072e <HAL_RCC_OscConfig+0x312>
 80006b2:	2300      	movs	r3, #0
 80006b4:	4e27      	ldr	r6, [pc, #156]	; (8000754 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80006b8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006ba:	d12b      	bne.n	8000714 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80006bc:	f7ff fd66 	bl	800018c <HAL_GetTick>
 80006c0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	0199      	lsls	r1, r3, #6
 80006c6:	d41f      	bmi.n	8000708 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80006c8:	6a2b      	ldr	r3, [r5, #32]
 80006ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006ce:	d105      	bne.n	80006dc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006d0:	6862      	ldr	r2, [r4, #4]
 80006d2:	68a9      	ldr	r1, [r5, #8]
 80006d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80006d8:	430a      	orrs	r2, r1
 80006da:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80006dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80006de:	6862      	ldr	r2, [r4, #4]
 80006e0:	430b      	orrs	r3, r1
 80006e2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80006e6:	4313      	orrs	r3, r2
 80006e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80006ea:	2301      	movs	r3, #1
 80006ec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80006ee:	f7ff fd4d 	bl	800018c <HAL_GetTick>
 80006f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80006f4:	6823      	ldr	r3, [r4, #0]
 80006f6:	019a      	lsls	r2, r3, #6
 80006f8:	f53f aea8 	bmi.w	800044c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006fc:	f7ff fd46 	bl	800018c <HAL_GetTick>
 8000700:	1b40      	subs	r0, r0, r5
 8000702:	2802      	cmp	r0, #2
 8000704:	d9f6      	bls.n	80006f4 <HAL_RCC_OscConfig+0x2d8>
 8000706:	e6cb      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000708:	f7ff fd40 	bl	800018c <HAL_GetTick>
 800070c:	1bc0      	subs	r0, r0, r7
 800070e:	2802      	cmp	r0, #2
 8000710:	d9d7      	bls.n	80006c2 <HAL_RCC_OscConfig+0x2a6>
 8000712:	e6c5      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000714:	f7ff fd3a 	bl	800018c <HAL_GetTick>
 8000718:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	f57f ae95 	bpl.w	800044c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000722:	f7ff fd33 	bl	800018c <HAL_GetTick>
 8000726:	1b40      	subs	r0, r0, r5
 8000728:	2802      	cmp	r0, #2
 800072a:	d9f6      	bls.n	800071a <HAL_RCC_OscConfig+0x2fe>
 800072c:	e6b8      	b.n	80004a0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800072e:	2801      	cmp	r0, #1
 8000730:	f43f aeb7 	beq.w	80004a2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000734:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000736:	6a2b      	ldr	r3, [r5, #32]
 8000738:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800073c:	429a      	cmp	r2, r3
 800073e:	f47f ae71 	bne.w	8000424 <HAL_RCC_OscConfig+0x8>
 8000742:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000744:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000748:	1ac0      	subs	r0, r0, r3
 800074a:	bf18      	it	ne
 800074c:	2001      	movne	r0, #1
 800074e:	e6a8      	b.n	80004a2 <HAL_RCC_OscConfig+0x86>
 8000750:	40021000 	.word	0x40021000
 8000754:	42420060 	.word	0x42420060

08000758 <HAL_RCC_GetSysClockFreq>:
{
 8000758:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800075c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800075e:	ac02      	add	r4, sp, #8
 8000760:	f103 0510 	add.w	r5, r3, #16
 8000764:	4622      	mov	r2, r4
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	6859      	ldr	r1, [r3, #4]
 800076a:	3308      	adds	r3, #8
 800076c:	c203      	stmia	r2!, {r0, r1}
 800076e:	42ab      	cmp	r3, r5
 8000770:	4614      	mov	r4, r2
 8000772:	d1f7      	bne.n	8000764 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000774:	2301      	movs	r3, #1
 8000776:	f88d 3004 	strb.w	r3, [sp, #4]
 800077a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800077c:	4911      	ldr	r1, [pc, #68]	; (80007c4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800077e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000782:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000784:	f003 020c 	and.w	r2, r3, #12
 8000788:	2a08      	cmp	r2, #8
 800078a:	d117      	bne.n	80007bc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800078c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000790:	a806      	add	r0, sp, #24
 8000792:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000794:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000796:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800079a:	d50c      	bpl.n	80007b6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800079c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007a0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007a4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007a6:	aa06      	add	r2, sp, #24
 80007a8:	4413      	add	r3, r2
 80007aa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ae:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007b2:	b007      	add	sp, #28
 80007b4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <HAL_RCC_GetSysClockFreq+0x74>)
 80007b8:	4350      	muls	r0, r2
 80007ba:	e7fa      	b.n	80007b2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80007be:	e7f8      	b.n	80007b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80007c0:	08002104 	.word	0x08002104
 80007c4:	40021000 	.word	0x40021000
 80007c8:	007a1200 	.word	0x007a1200
 80007cc:	003d0900 	.word	0x003d0900

080007d0 <HAL_RCC_ClockConfig>:
{
 80007d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80007d6:	4604      	mov	r4, r0
 80007d8:	b910      	cbnz	r0, 80007e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80007da:	2001      	movs	r0, #1
 80007dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80007e0:	4a45      	ldr	r2, [pc, #276]	; (80008f8 <HAL_RCC_ClockConfig+0x128>)
 80007e2:	6813      	ldr	r3, [r2, #0]
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d329      	bcc.n	8000840 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80007ec:	6821      	ldr	r1, [r4, #0]
 80007ee:	078e      	lsls	r6, r1, #30
 80007f0:	d431      	bmi.n	8000856 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80007f2:	07ca      	lsls	r2, r1, #31
 80007f4:	d444      	bmi.n	8000880 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80007f6:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <HAL_RCC_ClockConfig+0x128>)
 80007f8:	6813      	ldr	r3, [r2, #0]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	429d      	cmp	r5, r3
 8000800:	d367      	bcc.n	80008d2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000802:	6822      	ldr	r2, [r4, #0]
 8000804:	4d3d      	ldr	r5, [pc, #244]	; (80008fc <HAL_RCC_ClockConfig+0x12c>)
 8000806:	f012 0f04 	tst.w	r2, #4
 800080a:	d16e      	bne.n	80008ea <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800080c:	0713      	lsls	r3, r2, #28
 800080e:	d506      	bpl.n	800081e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000810:	686b      	ldr	r3, [r5, #4]
 8000812:	6922      	ldr	r2, [r4, #16]
 8000814:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000818:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800081c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800081e:	f7ff ff9b 	bl	8000758 <HAL_RCC_GetSysClockFreq>
 8000822:	686b      	ldr	r3, [r5, #4]
 8000824:	4a36      	ldr	r2, [pc, #216]	; (8000900 <HAL_RCC_ClockConfig+0x130>)
 8000826:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	40d8      	lsrs	r0, r3
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <HAL_RCC_ClockConfig+0x134>)
 8000830:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <HAL_RCC_ClockConfig+0x138>)
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f001 fb8d 	bl	8001f54 <HAL_InitTick>
  return HAL_OK;
 800083a:	2000      	movs	r0, #0
 800083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	f023 0307 	bic.w	r3, r3, #7
 8000846:	430b      	orrs	r3, r1
 8000848:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800084a:	6813      	ldr	r3, [r2, #0]
 800084c:	f003 0307 	and.w	r3, r3, #7
 8000850:	4299      	cmp	r1, r3
 8000852:	d1c2      	bne.n	80007da <HAL_RCC_ClockConfig+0xa>
 8000854:	e7ca      	b.n	80007ec <HAL_RCC_ClockConfig+0x1c>
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000858:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800085c:	bf1e      	ittt	ne
 800085e:	685a      	ldrne	r2, [r3, #4]
 8000860:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000864:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000866:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000868:	bf42      	ittt	mi
 800086a:	685a      	ldrmi	r2, [r3, #4]
 800086c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000870:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	68a0      	ldr	r0, [r4, #8]
 8000876:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800087a:	4302      	orrs	r2, r0
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	e7b8      	b.n	80007f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000880:	6862      	ldr	r2, [r4, #4]
 8000882:	4e1e      	ldr	r6, [pc, #120]	; (80008fc <HAL_RCC_ClockConfig+0x12c>)
 8000884:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000886:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000888:	d11b      	bne.n	80008c2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800088e:	d0a4      	beq.n	80007da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000890:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000892:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000896:	f023 0303 	bic.w	r3, r3, #3
 800089a:	4313      	orrs	r3, r2
 800089c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800089e:	f7ff fc75 	bl	800018c <HAL_GetTick>
 80008a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80008a4:	6873      	ldr	r3, [r6, #4]
 80008a6:	6862      	ldr	r2, [r4, #4]
 80008a8:	f003 030c 	and.w	r3, r3, #12
 80008ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80008b0:	d0a1      	beq.n	80007f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008b2:	f7ff fc6b 	bl	800018c <HAL_GetTick>
 80008b6:	1bc0      	subs	r0, r0, r7
 80008b8:	4540      	cmp	r0, r8
 80008ba:	d9f3      	bls.n	80008a4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80008bc:	2003      	movs	r0, #3
}
 80008be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008c2:	2a02      	cmp	r2, #2
 80008c4:	d102      	bne.n	80008cc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008ca:	e7e0      	b.n	800088e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008cc:	f013 0f02 	tst.w	r3, #2
 80008d0:	e7dd      	b.n	800088e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008d2:	6813      	ldr	r3, [r2, #0]
 80008d4:	f023 0307 	bic.w	r3, r3, #7
 80008d8:	432b      	orrs	r3, r5
 80008da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	429d      	cmp	r5, r3
 80008e4:	f47f af79 	bne.w	80007da <HAL_RCC_ClockConfig+0xa>
 80008e8:	e78b      	b.n	8000802 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80008ea:	686b      	ldr	r3, [r5, #4]
 80008ec:	68e1      	ldr	r1, [r4, #12]
 80008ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008f2:	430b      	orrs	r3, r1
 80008f4:	606b      	str	r3, [r5, #4]
 80008f6:	e789      	b.n	800080c <HAL_RCC_ClockConfig+0x3c>
 80008f8:	40022000 	.word	0x40022000
 80008fc:	40021000 	.word	0x40021000
 8000900:	08002156 	.word	0x08002156
 8000904:	2000000c 	.word	0x2000000c
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_RCC_GetPCLK1Freq+0x14>)
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800091a:	6810      	ldr	r0, [r2, #0]
}
 800091c:	40d8      	lsrs	r0, r3
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	08002166 	.word	0x08002166
 8000928:	2000000c 	.word	0x2000000c

0800092c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_RCC_GetPCLK2Freq+0x14>)
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800093a:	6810      	ldr	r0, [r2, #0]
}
 800093c:	40d8      	lsrs	r0, r3
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000
 8000944:	08002166 	.word	0x08002166
 8000948:	2000000c 	.word	0x2000000c

0800094c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800094c:	230f      	movs	r3, #15
 800094e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_RCC_GetClockConfig+0x34>)
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	f002 0203 	and.w	r2, r2, #3
 8000958:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000960:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000968:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000972:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_RCC_GetClockConfig+0x38>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	600b      	str	r3, [r1, #0]
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_TIM_Base_MspInit>:
 8000988:	4770      	bx	lr

0800098a <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800098a:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 800098c:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800099c:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800099e:	bf1e      	ittt	ne
 80009a0:	681a      	ldrne	r2, [r3, #0]
 80009a2:	f042 0201 	orrne.w	r2, r2, #1
 80009a6:	601a      	strne	r2, [r3, #0]
}
 80009a8:	4770      	bx	lr

080009aa <HAL_TIM_OC_DelayElapsedCallback>:
 80009aa:	4770      	bx	lr

080009ac <HAL_TIM_IC_CaptureCallback>:
 80009ac:	4770      	bx	lr

080009ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80009ae:	4770      	bx	lr

080009b0 <HAL_TIM_TriggerCallback>:
 80009b0:	4770      	bx	lr

080009b2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80009b2:	6803      	ldr	r3, [r0, #0]
{
 80009b4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80009b6:	691a      	ldr	r2, [r3, #16]
{
 80009b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80009ba:	0791      	lsls	r1, r2, #30
 80009bc:	d50e      	bpl.n	80009dc <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	0792      	lsls	r2, r2, #30
 80009c2:	d50b      	bpl.n	80009dc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80009c4:	f06f 0202 	mvn.w	r2, #2
 80009c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80009ca:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80009cc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80009ce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80009d0:	079b      	lsls	r3, r3, #30
 80009d2:	d077      	beq.n	8000ac4 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80009d4:	f7ff ffea 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80009d8:	2300      	movs	r3, #0
 80009da:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	0750      	lsls	r0, r2, #29
 80009e2:	d510      	bpl.n	8000a06 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	0751      	lsls	r1, r2, #29
 80009e8:	d50d      	bpl.n	8000a06 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80009ea:	f06f 0204 	mvn.w	r2, #4
 80009ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80009f0:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80009f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80009f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80009f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80009fa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80009fc:	d068      	beq.n	8000ad0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80009fe:	f7ff ffd5 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a02:	2300      	movs	r3, #0
 8000a04:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	691a      	ldr	r2, [r3, #16]
 8000a0a:	0712      	lsls	r2, r2, #28
 8000a0c:	d50f      	bpl.n	8000a2e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	0710      	lsls	r0, r2, #28
 8000a12:	d50c      	bpl.n	8000a2e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000a14:	f06f 0208 	mvn.w	r2, #8
 8000a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a1a:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a1c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a20:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a24:	d05a      	beq.n	8000adc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a26:	f7ff ffc1 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000a2e:	6823      	ldr	r3, [r4, #0]
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	06d2      	lsls	r2, r2, #27
 8000a34:	d510      	bpl.n	8000a58 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	06d0      	lsls	r0, r2, #27
 8000a3a:	d50d      	bpl.n	8000a58 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000a3c:	f06f 0210 	mvn.w	r2, #16
 8000a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000a42:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000a44:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000a46:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000a48:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000a4c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000a4e:	d04b      	beq.n	8000ae8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a50:	f7ff ffac 	bl	80009ac <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a54:	2300      	movs	r3, #0
 8000a56:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	691a      	ldr	r2, [r3, #16]
 8000a5c:	07d1      	lsls	r1, r2, #31
 8000a5e:	d508      	bpl.n	8000a72 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	07d2      	lsls	r2, r2, #31
 8000a64:	d505      	bpl.n	8000a72 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000a66:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000a6a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000a6c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000a6e:	f001 fa05 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	0610      	lsls	r0, r2, #24
 8000a78:	d508      	bpl.n	8000a8c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	0611      	lsls	r1, r2, #24
 8000a7e:	d505      	bpl.n	8000a8c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000a80:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000a84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000a86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000a88:	f000 f889 	bl	8000b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	0652      	lsls	r2, r2, #25
 8000a92:	d508      	bpl.n	8000aa6 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	0650      	lsls	r0, r2, #25
 8000a98:	d505      	bpl.n	8000aa6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000a9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000aa0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000aa2:	f7ff ff85 	bl	80009b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	691a      	ldr	r2, [r3, #16]
 8000aaa:	0691      	lsls	r1, r2, #26
 8000aac:	d522      	bpl.n	8000af4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	0692      	lsls	r2, r2, #26
 8000ab2:	d51f      	bpl.n	8000af4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ab4:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000ab8:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000abe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8000ac0:	f000 b86c 	b.w	8000b9c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ac4:	f7ff ff71 	bl	80009aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f7ff ff70 	bl	80009ae <HAL_TIM_PWM_PulseFinishedCallback>
 8000ace:	e783      	b.n	80009d8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ad0:	f7ff ff6b 	bl	80009aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f7ff ff6a 	bl	80009ae <HAL_TIM_PWM_PulseFinishedCallback>
 8000ada:	e792      	b.n	8000a02 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000adc:	f7ff ff65 	bl	80009aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f7ff ff64 	bl	80009ae <HAL_TIM_PWM_PulseFinishedCallback>
 8000ae6:	e7a0      	b.n	8000a2a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ae8:	f7ff ff5f 	bl	80009aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000aec:	4620      	mov	r0, r4
 8000aee:	f7ff ff5e 	bl	80009ae <HAL_TIM_PWM_PulseFinishedCallback>
 8000af2:	e7af      	b.n	8000a54 <HAL_TIM_IRQHandler+0xa2>
 8000af4:	bd10      	pop	{r4, pc}
	...

08000af8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000afa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000afc:	4290      	cmp	r0, r2
 8000afe:	d00a      	beq.n	8000b16 <TIM_Base_SetConfig+0x1e>
 8000b00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b04:	d007      	beq.n	8000b16 <TIM_Base_SetConfig+0x1e>
 8000b06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	d003      	beq.n	8000b16 <TIM_Base_SetConfig+0x1e>
 8000b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b12:	4290      	cmp	r0, r2
 8000b14:	d115      	bne.n	8000b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000b16:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000b1c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b1e:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <TIM_Base_SetConfig+0x6c>)
 8000b20:	4290      	cmp	r0, r2
 8000b22:	d00a      	beq.n	8000b3a <TIM_Base_SetConfig+0x42>
 8000b24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b28:	d007      	beq.n	8000b3a <TIM_Base_SetConfig+0x42>
 8000b2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	d003      	beq.n	8000b3a <TIM_Base_SetConfig+0x42>
 8000b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b36:	4290      	cmp	r0, r2
 8000b38:	d103      	bne.n	8000b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b3a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000b40:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000b42:	694a      	ldr	r2, [r1, #20]
 8000b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b48:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000b4a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000b4c:	688b      	ldr	r3, [r1, #8]
 8000b4e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000b50:	680b      	ldr	r3, [r1, #0]
 8000b52:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <TIM_Base_SetConfig+0x6c>)
 8000b56:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000b58:	bf04      	itt	eq
 8000b5a:	690b      	ldreq	r3, [r1, #16]
 8000b5c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	6143      	str	r3, [r0, #20]
 8000b62:	4770      	bx	lr
 8000b64:	40012c00 	.word	0x40012c00

08000b68 <HAL_TIM_Base_Init>:
{
 8000b68:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	b1a0      	cbz	r0, 8000b98 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000b6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b76:	b91b      	cbnz	r3, 8000b80 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000b78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000b7c:	f7ff ff04 	bl	8000988 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000b80:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000b82:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000b84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000b88:	1d21      	adds	r1, r4, #4
 8000b8a:	f7ff ffb5 	bl	8000af8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000b8e:	2301      	movs	r3, #1
  return HAL_OK;
 8000b90:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000b92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000b96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
}
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <HAL_TIMEx_CommutCallback>:
 8000b9c:	4770      	bx	lr

08000b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000b9e:	4770      	bx	lr

08000ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ba4:	6803      	ldr	r3, [r0, #0]
 8000ba6:	68c1      	ldr	r1, [r0, #12]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	2419      	movs	r4, #25
 8000bac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bb4:	6882      	ldr	r2, [r0, #8]
 8000bb6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000bb8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bba:	4302      	orrs	r2, r0
 8000bbc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000bbe:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000bc2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bc6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	69a9      	ldr	r1, [r5, #24]
 8000bd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <UART_SetConfig+0x70>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d114      	bne.n	8000c08 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000bde:	f7ff fea5 	bl	800092c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000be2:	4360      	muls	r0, r4
 8000be4:	686c      	ldr	r4, [r5, #4]
 8000be6:	2264      	movs	r2, #100	; 0x64
 8000be8:	00a4      	lsls	r4, r4, #2
 8000bea:	fbb0 f0f4 	udiv	r0, r0, r4
 8000bee:	fbb0 f4f2 	udiv	r4, r0, r2
 8000bf2:	fb02 0314 	mls	r3, r2, r4, r0
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	3332      	adds	r3, #50	; 0x32
 8000bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bfe:	6829      	ldr	r1, [r5, #0]
 8000c00:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000c04:	608b      	str	r3, [r1, #8]
 8000c06:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000c08:	f7ff fe80 	bl	800090c <HAL_RCC_GetPCLK1Freq>
 8000c0c:	e7e9      	b.n	8000be2 <UART_SetConfig+0x42>
 8000c0e:	bf00      	nop
 8000c10:	40013800 	.word	0x40013800

08000c14 <HAL_UART_Init>:
{
 8000c14:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000c16:	4604      	mov	r4, r0
 8000c18:	b340      	cbz	r0, 8000c6c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000c1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c22:	b91b      	cbnz	r3, 8000c2c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c24:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c28:	f001 f95a 	bl	8001ee0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c2c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c2e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c34:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c36:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c3c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c3e:	f7ff ffaf 	bl	8000ba0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c42:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c44:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c4e:	695a      	ldr	r2, [r3, #20]
 8000c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c54:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c5c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000c5e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c60:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000c62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000c66:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c6c:	2001      	movs	r0, #1
}
 8000c6e:	bd10      	pop	{r4, pc}

08000c70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000c70:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000c72:	f000 fd7f 	bl	8001774 <vTaskStartScheduler>
  
  return osOK;
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	bd08      	pop	{r3, pc}

08000c7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000c7a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c7c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8000c80:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000c82:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000c84:	bf08      	it	eq
 8000c86:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c88:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8000c8a:	bf18      	it	ne
 8000c8c:	3403      	addne	r4, #3
{
 8000c8e:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000c90:	e890 0022 	ldmia.w	r0, {r1, r5}
 8000c94:	a803      	add	r0, sp, #12
 8000c96:	9001      	str	r0, [sp, #4]
 8000c98:	9400      	str	r4, [sp, #0]
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f000 fc9a 	bl	80015d4 <xTaskCreate>
 8000ca0:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8000ca2:	bf14      	ite	ne
 8000ca4:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8000ca6:	9803      	ldreq	r0, [sp, #12]
}
 8000ca8:	b005      	add	sp, #20
 8000caa:	bd30      	pop	{r4, r5, pc}

08000cac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000cac:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	bf08      	it	eq
 8000cb2:	2001      	moveq	r0, #1
 8000cb4:	f000 feac 	bl	8001a10 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000cb8:	2000      	movs	r0, #0
 8000cba:	bd08      	pop	{r3, pc}

08000cbc <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f000 bbe9 	b.w	8001494 <xQueueCreateMutex>

08000cc2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cc2:	f100 0308 	add.w	r3, r0, #8
 8000cc6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ccc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000cd0:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cd2:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000cd4:	6003      	str	r3, [r0, #0]
 8000cd6:	4770      	bx	lr

08000cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	6103      	str	r3, [r0, #16]
 8000cdc:	4770      	bx	lr

08000cde <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000cde:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ce0:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8000ce2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ce4:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000cea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000cec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000cee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	6003      	str	r3, [r0, #0]
 8000cf4:	4770      	bx	lr

08000cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000cf6:	680a      	ldr	r2, [r1, #0]
{
 8000cf8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000cfa:	1c53      	adds	r3, r2, #1
 8000cfc:	d10a      	bne.n	8000d14 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000cfe:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000d04:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000d06:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000d08:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000d0a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000d0c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000d0e:	3301      	adds	r3, #1
 8000d10:	6003      	str	r3, [r0, #0]
 8000d12:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d14:	f100 0308 	add.w	r3, r0, #8
 8000d18:	685c      	ldr	r4, [r3, #4]
 8000d1a:	6825      	ldr	r5, [r4, #0]
 8000d1c:	42aa      	cmp	r2, r5
 8000d1e:	d3ef      	bcc.n	8000d00 <vListInsert+0xa>
 8000d20:	4623      	mov	r3, r4
 8000d22:	e7f9      	b.n	8000d18 <vListInsert+0x22>

08000d24 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d24:	6841      	ldr	r1, [r0, #4]
 8000d26:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000d28:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000d2a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000d2c:	6882      	ldr	r2, [r0, #8]
 8000d2e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000d30:	6859      	ldr	r1, [r3, #4]
 8000d32:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000d34:	bf08      	it	eq
 8000d36:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	3a01      	subs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000d42:	6818      	ldr	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
	...

08000d48 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8000d48:	2300      	movs	r3, #0
{
 8000d4a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8000d4c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <prvTaskExitError+0x3c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	d008      	beq.n	8000d68 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	e7fe      	b.n	8000d66 <prvTaskExitError+0x1e>
 8000d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6c:	f383 8811 	msr	BASEPRI, r3
 8000d70:	f3bf 8f6f 	isb	sy
 8000d74:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0fc      	beq.n	8000d78 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d7e:	b002      	add	sp, #8
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <prvPortStartFirstTask+0x1c>)
 8000d8a:	6800      	ldr	r0, [r0, #0]
 8000d8c:	6800      	ldr	r0, [r0, #0]
 8000d8e:	f380 8808 	msr	MSP, r0
 8000d92:	b662      	cpsie	i
 8000d94:	b661      	cpsie	f
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	df00      	svc	0
 8000da0:	bf00      	nop
 8000da2:	0000      	.short	0x0000
 8000da4:	e000ed08 	.word	0xe000ed08

08000da8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000db2:	f021 0101 	bic.w	r1, r1, #1
 8000db6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000dba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000dbe:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8000dc2:	3840      	subs	r0, #64	; 0x40
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	08000d49 	.word	0x08000d49
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <SVC_Handler>:
	__asm volatile (
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <pxCurrentTCBConst2>)
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	6808      	ldr	r0, [r1, #0]
 8000dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dda:	f380 8809 	msr	PSP, r0
 8000dde:	f3bf 8f6f 	isb	sy
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	f380 8811 	msr	BASEPRI, r0
 8000dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8000dee:	4770      	bx	lr

08000df0 <pxCurrentTCBConst2>:
 8000df0:	20000c4c 	.word	0x20000c4c

08000df4 <vPortEnterCritical>:
 8000df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df8:	f383 8811 	msr	BASEPRI, r3
 8000dfc:	f3bf 8f6f 	isb	sy
 8000e00:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <vPortEnterCritical+0x3c>)
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000e0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8000e0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8000e0e:	d10d      	bne.n	8000e2c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <vPortEnterCritical+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000e18:	d008      	beq.n	8000e2c <vPortEnterCritical+0x38>
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	e7fe      	b.n	8000e2a <vPortEnterCritical+0x36>
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	e000ed04 	.word	0xe000ed04

08000e38 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <vPortExitCritical+0x24>)
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	b943      	cbnz	r3, 8000e50 <vPortExitCritical+0x18>
 8000e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e42:	f383 8811 	msr	BASEPRI, r3
 8000e46:	f3bf 8f6f 	isb	sy
 8000e4a:	f3bf 8f4f 	dsb	sy
 8000e4e:	e7fe      	b.n	8000e4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8000e50:	3b01      	subs	r3, #1
 8000e52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000e54:	b90b      	cbnz	r3, 8000e5a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	4770      	bx	lr
 8000e5c:	20000008 	.word	0x20000008

08000e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e60:	f3ef 8009 	mrs	r0, PSP
 8000e64:	f3bf 8f6f 	isb	sy
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <pxCurrentTCBConst>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e70:	6010      	str	r0, [r2, #0]
 8000e72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e7a:	f380 8811 	msr	BASEPRI, r0
 8000e7e:	f000 fdeb 	bl	8001a58 <vTaskSwitchContext>
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	f380 8811 	msr	BASEPRI, r0
 8000e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	6808      	ldr	r0, [r1, #0]
 8000e92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e96:	f380 8809 	msr	PSP, r0
 8000e9a:	f3bf 8f6f 	isb	sy
 8000e9e:	4770      	bx	lr

08000ea0 <pxCurrentTCBConst>:
 8000ea0:	20000c4c 	.word	0x20000c4c

08000ea4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ea4:	b508      	push	{r3, lr}
	__asm volatile
 8000ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eaa:	f383 8811 	msr	BASEPRI, r3
 8000eae:	f3bf 8f6f 	isb	sy
 8000eb2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000eb6:	f000 fca1 	bl	80017fc <xTaskIncrementTick>
 8000eba:	b118      	cbz	r0, 8000ec4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <SysTick_Handler+0x28>)
 8000ec2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	bd08      	pop	{r3, pc}
 8000ecc:	e000ed04 	.word	0xe000ed04

08000ed0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ed4:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ed8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000eda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <vPortSetupTimerInterrupt+0x2c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	4906      	ldr	r1, [pc, #24]	; (8000f00 <vPortSetupTimerInterrupt+0x30>)
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000eec:	2307      	movs	r3, #7
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010
 8000ef8:	e000e018 	.word	0xe000e018
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	e000e014 	.word	0xe000e014

08000f04 <xPortStartScheduler>:
{
 8000f04:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f08:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f14:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f26:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000f28:	2207      	movs	r2, #7
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <xPortStartScheduler+0xa8>)
 8000f2c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8000f32:	1e54      	subs	r4, r2, #1
 8000f34:	0600      	lsls	r0, r0, #24
 8000f36:	d40d      	bmi.n	8000f54 <xPortStartScheduler+0x50>
 8000f38:	b101      	cbz	r1, 8000f3c <xPortStartScheduler+0x38>
 8000f3a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2a03      	cmp	r2, #3
 8000f40:	d011      	beq.n	8000f66 <xPortStartScheduler+0x62>
	__asm volatile
 8000f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f46:	f383 8811 	msr	BASEPRI, r3
 8000f4a:	f3bf 8f6f 	isb	sy
 8000f4e:	f3bf 8f4f 	dsb	sy
 8000f52:	e7fe      	b.n	8000f52 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000f54:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	0052      	lsls	r2, r2, #1
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f88d 2003 	strb.w	r2, [sp, #3]
 8000f62:	4622      	mov	r2, r4
 8000f64:	e7e3      	b.n	8000f2e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8000f66:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000f68:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000f6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000f6e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000f70:	9b01      	ldr	r3, [sp, #4]
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <xPortStartScheduler+0xa0>)
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <xPortStartScheduler+0xac>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8000f88:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8000f8a:	f7ff ffa1 	bl	8000ed0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <xPortStartScheduler+0xb0>)
 8000f90:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8000f92:	f7ff fef9 	bl	8000d88 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8000f96:	f000 fd5f 	bl	8001a58 <vTaskSwitchContext>
	prvTaskExitError();
 8000f9a:	f7ff fed5 	bl	8000d48 <prvTaskExitError>
}
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd10      	pop	{r4, pc}
 8000fa4:	e000e400 	.word	0xe000e400
 8000fa8:	2000002c 	.word	0x2000002c
 8000fac:	20000030 	.word	0x20000030
 8000fb0:	e000ed20 	.word	0xe000ed20
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000fb8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <prvInsertBlockIntoFreeList+0x40>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4282      	cmp	r2, r0
 8000fc0:	d318      	bcc.n	8000ff4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000fc2:	685c      	ldr	r4, [r3, #4]
 8000fc4:	1919      	adds	r1, r3, r4
 8000fc6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000fc8:	bf01      	itttt	eq
 8000fca:	6841      	ldreq	r1, [r0, #4]
 8000fcc:	4618      	moveq	r0, r3
 8000fce:	1909      	addeq	r1, r1, r4
 8000fd0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000fd2:	6844      	ldr	r4, [r0, #4]
 8000fd4:	1901      	adds	r1, r0, r4
 8000fd6:	428a      	cmp	r2, r1
 8000fd8:	d107      	bne.n	8000fea <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <prvInsertBlockIntoFreeList+0x44>)
 8000fdc:	6809      	ldr	r1, [r1, #0]
 8000fde:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000fe0:	bf1f      	itttt	ne
 8000fe2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000fe4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000fe6:	1909      	addne	r1, r1, r4
 8000fe8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000fea:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000fec:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000fee:	bf18      	it	ne
 8000ff0:	6018      	strne	r0, [r3, #0]
 8000ff2:	bd10      	pop	{r4, pc}
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	e7e1      	b.n	8000fbc <prvInsertBlockIntoFreeList+0x4>
 8000ff8:	20000c44 	.word	0x20000c44
 8000ffc:	20000034 	.word	0x20000034

08001000 <pvPortMalloc>:
{
 8001000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001004:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001006:	f000 fbf1 	bl	80017ec <vTaskSuspendAll>
		if( pxEnd == NULL )
 800100a:	493e      	ldr	r1, [pc, #248]	; (8001104 <pvPortMalloc+0x104>)
 800100c:	4d3e      	ldr	r5, [pc, #248]	; (8001108 <pvPortMalloc+0x108>)
 800100e:	680b      	ldr	r3, [r1, #0]
 8001010:	bb0b      	cbnz	r3, 8001056 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001012:	4a3e      	ldr	r2, [pc, #248]	; (800110c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001014:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001016:	bf1d      	ittte	ne
 8001018:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800101a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800101e:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001022:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001026:	bf1c      	itt	ne
 8001028:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800102a:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800102c:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800102e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001030:	4e37      	ldr	r6, [pc, #220]	; (8001110 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001032:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001034:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8001038:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800103a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800103c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800103e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001040:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001042:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001044:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001048:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800104a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <pvPortMalloc+0x118>)
 800104e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001054:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001056:	682f      	ldr	r7, [r5, #0]
 8001058:	4227      	tst	r7, r4
 800105a:	d116      	bne.n	800108a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800105c:	2c00      	cmp	r4, #0
 800105e:	d040      	beq.n	80010e2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001060:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001064:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001066:	bf1c      	itt	ne
 8001068:	f023 0307 	bicne.w	r3, r3, #7
 800106c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800106e:	b163      	cbz	r3, 800108a <pvPortMalloc+0x8a>
 8001070:	4a29      	ldr	r2, [pc, #164]	; (8001118 <pvPortMalloc+0x118>)
 8001072:	6816      	ldr	r6, [r2, #0]
 8001074:	4690      	mov	r8, r2
 8001076:	42b3      	cmp	r3, r6
 8001078:	d807      	bhi.n	800108a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <pvPortMalloc+0x110>)
 800107c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800107e:	6868      	ldr	r0, [r5, #4]
 8001080:	4283      	cmp	r3, r0
 8001082:	d804      	bhi.n	800108e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001084:	6809      	ldr	r1, [r1, #0]
 8001086:	428d      	cmp	r5, r1
 8001088:	d107      	bne.n	800109a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800108a:	2400      	movs	r4, #0
 800108c:	e029      	b.n	80010e2 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800108e:	682c      	ldr	r4, [r5, #0]
 8001090:	2c00      	cmp	r4, #0
 8001092:	d0f7      	beq.n	8001084 <pvPortMalloc+0x84>
 8001094:	462a      	mov	r2, r5
 8001096:	4625      	mov	r5, r4
 8001098:	e7f1      	b.n	800107e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800109a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800109c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800109e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010a0:	1ac2      	subs	r2, r0, r3
 80010a2:	2a10      	cmp	r2, #16
 80010a4:	d90f      	bls.n	80010c6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010a6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010a8:	0741      	lsls	r1, r0, #29
 80010aa:	d008      	beq.n	80010be <pvPortMalloc+0xbe>
 80010ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	f3bf 8f4f 	dsb	sy
 80010bc:	e7fe      	b.n	80010bc <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010be:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010c0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010c2:	f7ff ff79 	bl	8000fb8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c6:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010c8:	4912      	ldr	r1, [pc, #72]	; (8001114 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010ca:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010cc:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80010ce:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010d0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010d2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010d6:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010d8:	bf38      	it	cc
 80010da:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010dc:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010de:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010e0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80010e2:	f000 fc1d 	bl	8001920 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e6:	0763      	lsls	r3, r4, #29
 80010e8:	d008      	beq.n	80010fc <pvPortMalloc+0xfc>
 80010ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ee:	f383 8811 	msr	BASEPRI, r3
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	e7fe      	b.n	80010fa <pvPortMalloc+0xfa>
}
 80010fc:	4620      	mov	r0, r4
 80010fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001102:	bf00      	nop
 8001104:	20000034 	.word	0x20000034
 8001108:	20000c38 	.word	0x20000c38
 800110c:	20000038 	.word	0x20000038
 8001110:	20000c44 	.word	0x20000c44
 8001114:	20000c40 	.word	0x20000c40
 8001118:	20000c3c 	.word	0x20000c3c

0800111c <vPortFree>:
{
 800111c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800111e:	4604      	mov	r4, r0
 8001120:	b370      	cbz	r0, 8001180 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <vPortFree+0x68>)
 8001124:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	4213      	tst	r3, r2
 800112c:	d108      	bne.n	8001140 <vPortFree+0x24>
 800112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001132:	f383 8811 	msr	BASEPRI, r3
 8001136:	f3bf 8f6f 	isb	sy
 800113a:	f3bf 8f4f 	dsb	sy
 800113e:	e7fe      	b.n	800113e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001140:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001144:	b141      	cbz	r1, 8001158 <vPortFree+0x3c>
 8001146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114a:	f383 8811 	msr	BASEPRI, r3
 800114e:	f3bf 8f6f 	isb	sy
 8001152:	f3bf 8f4f 	dsb	sy
 8001156:	e7fe      	b.n	8001156 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001158:	ea23 0302 	bic.w	r3, r3, r2
 800115c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001160:	f000 fb44 	bl	80017ec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <vPortFree+0x6c>)
 8001166:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800116a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800116c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001170:	440b      	add	r3, r1
 8001172:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001174:	f7ff ff20 	bl	8000fb8 <prvInsertBlockIntoFreeList>
}
 8001178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800117c:	f000 bbd0 	b.w	8001920 <xTaskResumeAll>
 8001180:	bd10      	pop	{r4, pc}
 8001182:	bf00      	nop
 8001184:	20000c38 	.word	0x20000c38
 8001188:	20000c3c 	.word	0x20000c3c

0800118c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001190:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8001192:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001194:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001196:	b942      	cbnz	r2, 80011aa <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001198:	6805      	ldr	r5, [r0, #0]
 800119a:	b99d      	cbnz	r5, 80011c4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800119c:	6840      	ldr	r0, [r0, #4]
 800119e:	f000 fd4f 	bl	8001c40 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80011a2:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80011a4:	3601      	adds	r6, #1
 80011a6:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80011aa:	b96d      	cbnz	r5, 80011c8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80011ac:	6880      	ldr	r0, [r0, #8]
 80011ae:	f000 ff89 	bl	80020c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80011b2:	68a3      	ldr	r3, [r4, #8]
 80011b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011b6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011b8:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80011ba:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011bc:	4293      	cmp	r3, r2
 80011be:	d301      	bcc.n	80011c4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80011c4:	2000      	movs	r0, #0
 80011c6:	e7ed      	b.n	80011a4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011c8:	68c0      	ldr	r0, [r0, #12]
 80011ca:	f000 ff7b 	bl	80020c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80011ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d0:	68e2      	ldr	r2, [r4, #12]
 80011d2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011d4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80011d6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011d8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80011da:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80011dc:	bf3e      	ittt	cc
 80011de:	6862      	ldrcc	r2, [r4, #4]
 80011e0:	189b      	addcc	r3, r3, r2
 80011e2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80011e4:	2d02      	cmp	r5, #2
 80011e6:	d1ed      	bne.n	80011c4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80011e8:	b10e      	cbz	r6, 80011ee <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80011ea:	3e01      	subs	r6, #1
 80011ec:	e7ea      	b.n	80011c4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80011ee:	4630      	mov	r0, r6
 80011f0:	e7d8      	b.n	80011a4 <prvCopyDataToQueue+0x18>

080011f2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80011f2:	b570      	push	{r4, r5, r6, lr}
 80011f4:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80011f6:	f7ff fdfd 	bl	8000df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80011fa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011fe:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001202:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001204:	2d00      	cmp	r5, #0
 8001206:	dc14      	bgt.n	8001232 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001208:	23ff      	movs	r3, #255	; 0xff
 800120a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800120e:	f7ff fe13 	bl	8000e38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001212:	f7ff fdef 	bl	8000df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001216:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800121a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800121e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001220:	2d00      	cmp	r5, #0
 8001222:	dc12      	bgt.n	800124a <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001224:	23ff      	movs	r3, #255	; 0xff
 8001226:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800122a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800122e:	f7ff be03 	b.w	8000e38 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0e7      	beq.n	8001208 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001238:	4630      	mov	r0, r6
 800123a:	f000 fc61 	bl	8001b00 <xTaskRemoveFromEventList>
 800123e:	b108      	cbz	r0, 8001244 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001240:	f000 fce8 	bl	8001c14 <vTaskMissedYield>
 8001244:	3d01      	subs	r5, #1
 8001246:	b26d      	sxtb	r5, r5
 8001248:	e7dc      	b.n	8001204 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0e9      	beq.n	8001224 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001250:	4630      	mov	r0, r6
 8001252:	f000 fc55 	bl	8001b00 <xTaskRemoveFromEventList>
 8001256:	b108      	cbz	r0, 800125c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001258:	f000 fcdc 	bl	8001c14 <vTaskMissedYield>
 800125c:	3d01      	subs	r5, #1
 800125e:	b26d      	sxtb	r5, r5
 8001260:	e7de      	b.n	8001220 <prvUnlockQueue+0x2e>
	...

08001264 <xQueueGenericReset>:
{
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001268:	4604      	mov	r4, r0
 800126a:	b940      	cbnz	r0, 800127e <xQueueGenericReset+0x1a>
 800126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001270:	f383 8811 	msr	BASEPRI, r3
 8001274:	f3bf 8f6f 	isb	sy
 8001278:	f3bf 8f4f 	dsb	sy
 800127c:	e7fe      	b.n	800127c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800127e:	f7ff fdb9 	bl	8000df4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001282:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001286:	6822      	ldr	r2, [r4, #0]
 8001288:	4343      	muls	r3, r0
 800128a:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800128c:	1a1b      	subs	r3, r3, r0
 800128e:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001290:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001292:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001294:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001296:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001298:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800129a:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800129c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80012a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80012a4:	b995      	cbnz	r5, 80012cc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012a6:	6923      	ldr	r3, [r4, #16]
 80012a8:	b163      	cbz	r3, 80012c4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012aa:	f104 0010 	add.w	r0, r4, #16
 80012ae:	f000 fc27 	bl	8001b00 <xTaskRemoveFromEventList>
 80012b2:	b138      	cbz	r0, 80012c4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80012b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <xQueueGenericReset+0x7c>)
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	f3bf 8f4f 	dsb	sy
 80012c0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80012c4:	f7ff fdb8 	bl	8000e38 <vPortExitCritical>
}
 80012c8:	2001      	movs	r0, #1
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80012cc:	f104 0010 	add.w	r0, r4, #16
 80012d0:	f7ff fcf7 	bl	8000cc2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80012d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80012d8:	f7ff fcf3 	bl	8000cc2 <vListInitialise>
 80012dc:	e7f2      	b.n	80012c4 <xQueueGenericReset+0x60>
 80012de:	bf00      	nop
 80012e0:	e000ed04 	.word	0xe000ed04

080012e4 <xQueueGenericCreate>:
	{
 80012e4:	b570      	push	{r4, r5, r6, lr}
 80012e6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80012e8:	4606      	mov	r6, r0
 80012ea:	b940      	cbnz	r0, 80012fe <xQueueGenericCreate+0x1a>
 80012ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f0:	f383 8811 	msr	BASEPRI, r3
 80012f4:	f3bf 8f6f 	isb	sy
 80012f8:	f3bf 8f4f 	dsb	sy
 80012fc:	e7fe      	b.n	80012fc <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012fe:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001300:	3048      	adds	r0, #72	; 0x48
 8001302:	f7ff fe7d 	bl	8001000 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001306:	4604      	mov	r4, r0
 8001308:	b138      	cbz	r0, 800131a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800130a:	b945      	cbnz	r5, 800131e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800130c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800130e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001310:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001312:	2101      	movs	r1, #1
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff ffa5 	bl	8001264 <xQueueGenericReset>
	}
 800131a:	4620      	mov	r0, r4
 800131c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800131e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001322:	6003      	str	r3, [r0, #0]
 8001324:	e7f3      	b.n	800130e <xQueueGenericCreate+0x2a>
	...

08001328 <xQueueGenericSend>:
{
 8001328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800132c:	4689      	mov	r9, r1
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001332:	4604      	mov	r4, r0
 8001334:	b940      	cbnz	r0, 8001348 <xQueueGenericSend+0x20>
 8001336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800133a:	f383 8811 	msr	BASEPRI, r3
 800133e:	f3bf 8f6f 	isb	sy
 8001342:	f3bf 8f4f 	dsb	sy
 8001346:	e7fe      	b.n	8001346 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001348:	2900      	cmp	r1, #0
 800134a:	f040 8088 	bne.w	800145e <xQueueGenericSend+0x136>
 800134e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8084 	beq.w	800145e <xQueueGenericSend+0x136>
 8001356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135a:	f383 8811 	msr	BASEPRI, r3
 800135e:	f3bf 8f6f 	isb	sy
 8001362:	f3bf 8f4f 	dsb	sy
 8001366:	e7fe      	b.n	8001366 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001368:	9e01      	ldr	r6, [sp, #4]
 800136a:	2e00      	cmp	r6, #0
 800136c:	f000 8082 	beq.w	8001474 <xQueueGenericSend+0x14c>
 8001370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001374:	f383 8811 	msr	BASEPRI, r3
 8001378:	f3bf 8f6f 	isb	sy
 800137c:	f3bf 8f4f 	dsb	sy
 8001380:	e7fe      	b.n	8001380 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001382:	9d01      	ldr	r5, [sp, #4]
 8001384:	b91d      	cbnz	r5, 800138e <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001386:	f7ff fd57 	bl	8000e38 <vPortExitCritical>
			return errQUEUE_FULL;
 800138a:	2000      	movs	r0, #0
 800138c:	e058      	b.n	8001440 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 800138e:	b916      	cbnz	r6, 8001396 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001390:	a802      	add	r0, sp, #8
 8001392:	f000 fbf7 	bl	8001b84 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001396:	f7ff fd4f 	bl	8000e38 <vPortExitCritical>
		vTaskSuspendAll();
 800139a:	f000 fa27 	bl	80017ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800139e:	f7ff fd29 	bl	8000df4 <vPortEnterCritical>
 80013a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80013a6:	2bff      	cmp	r3, #255	; 0xff
 80013a8:	bf08      	it	eq
 80013aa:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80013ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80013b2:	2bff      	cmp	r3, #255	; 0xff
 80013b4:	bf08      	it	eq
 80013b6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80013ba:	f7ff fd3d 	bl	8000e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013be:	a901      	add	r1, sp, #4
 80013c0:	a802      	add	r0, sp, #8
 80013c2:	f000 fbeb 	bl	8001b9c <xTaskCheckForTimeOut>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d143      	bne.n	8001452 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013ca:	f7ff fd13 	bl	8000df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013ce:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80013d0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80013d2:	f7ff fd31 	bl	8000e38 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013d6:	42ae      	cmp	r6, r5
 80013d8:	d135      	bne.n	8001446 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013da:	9901      	ldr	r1, [sp, #4]
 80013dc:	f104 0010 	add.w	r0, r4, #16
 80013e0:	f000 fb74 	bl	8001acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff ff04 	bl	80011f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80013ea:	f000 fa99 	bl	8001920 <xTaskResumeAll>
 80013ee:	b938      	cbnz	r0, 8001400 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80013f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013f4:	f8ca 3000 	str.w	r3, [sl]
 80013f8:	f3bf 8f4f 	dsb	sy
 80013fc:	f3bf 8f6f 	isb	sy
 8001400:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001402:	f7ff fcf7 	bl	8000df4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001406:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800140a:	429a      	cmp	r2, r3
 800140c:	d301      	bcc.n	8001412 <xQueueGenericSend+0xea>
 800140e:	2f02      	cmp	r7, #2
 8001410:	d1b7      	bne.n	8001382 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001412:	463a      	mov	r2, r7
 8001414:	4649      	mov	r1, r9
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff feb8 	bl	800118c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800141c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800141e:	b11b      	cbz	r3, 8001428 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001420:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001424:	f000 fb6c 	bl	8001b00 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001428:	b138      	cbz	r0, 800143a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 800142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <xQueueGenericSend+0x168>)
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f3bf 8f4f 	dsb	sy
 8001436:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800143a:	f7ff fcfd 	bl	8000e38 <vPortExitCritical>
				return pdPASS;
 800143e:	2001      	movs	r0, #1
}
 8001440:	b004      	add	sp, #16
 8001442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001446:	4620      	mov	r0, r4
 8001448:	f7ff fed3 	bl	80011f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800144c:	f000 fa68 	bl	8001920 <xTaskResumeAll>
 8001450:	e7d6      	b.n	8001400 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fecd 	bl	80011f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001458:	f000 fa62 	bl	8001920 <xTaskResumeAll>
 800145c:	e795      	b.n	800138a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800145e:	2f02      	cmp	r7, #2
 8001460:	d102      	bne.n	8001468 <xQueueGenericSend+0x140>
 8001462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10a      	bne.n	800147e <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001468:	f000 fbda 	bl	8001c20 <xTaskGetSchedulerState>
 800146c:	2800      	cmp	r0, #0
 800146e:	f43f af7b 	beq.w	8001368 <xQueueGenericSend+0x40>
 8001472:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001474:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001478:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001490 <xQueueGenericSend+0x168>
 800147c:	e7c1      	b.n	8001402 <xQueueGenericSend+0xda>
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	e7fe      	b.n	800148e <xQueueGenericSend+0x166>
 8001490:	e000ed04 	.word	0xe000ed04

08001494 <xQueueCreateMutex>:
	{
 8001494:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001496:	4602      	mov	r2, r0
 8001498:	2100      	movs	r1, #0
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff ff22 	bl	80012e4 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80014a0:	4604      	mov	r4, r0
 80014a2:	b138      	cbz	r0, 80014b4 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80014a8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80014aa:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80014ac:	461a      	mov	r2, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff ff3a 	bl	8001328 <xQueueGenericSend>
	}
 80014b4:	4620      	mov	r0, r4
 80014b6:	bd10      	pop	{r4, pc}

080014b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <prvResetNextTaskUnblockTime+0x1c>)
 80014ba:	6813      	ldr	r3, [r2, #0]
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <prvResetNextTaskUnblockTime+0x20>)
 80014c0:	b919      	cbnz	r1, 80014ca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014ce:	68d2      	ldr	r2, [r2, #12]
 80014d0:	6852      	ldr	r2, [r2, #4]
 80014d2:	e7f8      	b.n	80014c6 <prvResetNextTaskUnblockTime+0xe>
 80014d4:	20000c50 	.word	0x20000c50
 80014d8:	20000d28 	.word	0x20000d28

080014dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014e0:	4e1b      	ldr	r6, [pc, #108]	; (8001550 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80014e2:	681d      	ldr	r5, [r3, #0]
{
 80014e4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014e6:	6830      	ldr	r0, [r6, #0]
{
 80014e8:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80014ea:	3004      	adds	r0, #4
 80014ec:	f7ff fc1a 	bl	8000d24 <uxListRemove>
 80014f0:	4633      	mov	r3, r6
 80014f2:	b940      	cbnz	r0, 8001506 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80014f4:	2001      	movs	r0, #1
 80014f6:	6831      	ldr	r1, [r6, #0]
 80014f8:	4e16      	ldr	r6, [pc, #88]	; (8001554 <prvAddCurrentTaskToDelayedList+0x78>)
 80014fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80014fc:	6832      	ldr	r2, [r6, #0]
 80014fe:	4088      	lsls	r0, r1
 8001500:	ea22 0200 	bic.w	r2, r2, r0
 8001504:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001506:	1c62      	adds	r2, r4, #1
 8001508:	d107      	bne.n	800151a <prvAddCurrentTaskToDelayedList+0x3e>
 800150a:	b137      	cbz	r7, 800151a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001510:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001516:	f7ff bbe2 	b.w	8000cde <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800151a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800151c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800151e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001520:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001522:	d907      	bls.n	8001534 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <prvAddCurrentTaskToDelayedList+0x80>)
 8001526:	6810      	ldr	r0, [r2, #0]
 8001528:	6819      	ldr	r1, [r3, #0]
}
 800152a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800152e:	3104      	adds	r1, #4
 8001530:	f7ff bbe1 	b.w	8000cf6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <prvAddCurrentTaskToDelayedList+0x84>)
 8001536:	6810      	ldr	r0, [r2, #0]
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	3104      	adds	r1, #4
 800153c:	f7ff fbdb 	bl	8000cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <prvAddCurrentTaskToDelayedList+0x88>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001546:	bf38      	it	cc
 8001548:	601c      	strcc	r4, [r3, #0]
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800154c:	20000d70 	.word	0x20000d70
 8001550:	20000c4c 	.word	0x20000c4c
 8001554:	20000cf8 	.word	0x20000cf8
 8001558:	20000d48 	.word	0x20000d48
 800155c:	20000c54 	.word	0x20000c54
 8001560:	20000c50 	.word	0x20000c50
 8001564:	20000d28 	.word	0x20000d28

08001568 <prvIdleTask>:
{
 8001568:	b580      	push	{r7, lr}
				taskYIELD();
 800156a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80015d0 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800156e:	4f14      	ldr	r7, [pc, #80]	; (80015c0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001570:	4c14      	ldr	r4, [pc, #80]	; (80015c4 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8001572:	4e15      	ldr	r6, [pc, #84]	; (80015c8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	b963      	cbnz	r3, 8001592 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <prvIdleTask+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d9f8      	bls.n	8001572 <prvIdleTask+0xa>
				taskYIELD();
 8001580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001584:	f8c8 3000 	str.w	r3, [r8]
 8001588:	f3bf 8f4f 	dsb	sy
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	e7ee      	b.n	8001570 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001592:	f7ff fc2f 	bl	8000df4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800159a:	1d28      	adds	r0, r5, #4
 800159c:	f7ff fbc2 	bl	8000d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80015a0:	6833      	ldr	r3, [r6, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80015ac:	f7ff fc44 	bl	8000e38 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80015b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80015b2:	f7ff fdb3 	bl	800111c <vPortFree>
			vPortFree( pxTCB );
 80015b6:	4628      	mov	r0, r5
 80015b8:	f7ff fdb0 	bl	800111c <vPortFree>
 80015bc:	e7da      	b.n	8001574 <prvIdleTask+0xc>
 80015be:	bf00      	nop
 80015c0:	20000d5c 	.word	0x20000d5c
 80015c4:	20000ce8 	.word	0x20000ce8
 80015c8:	20000ce4 	.word	0x20000ce4
 80015cc:	20000c58 	.word	0x20000c58
 80015d0:	e000ed04 	.word	0xe000ed04

080015d4 <xTaskCreate>:
	{
 80015d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015d8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80015dc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015de:	4650      	mov	r0, sl
	{
 80015e0:	460f      	mov	r7, r1
 80015e2:	4699      	mov	r9, r3
 80015e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015e6:	f7ff fd0b 	bl	8001000 <pvPortMalloc>
			if( pxStack != NULL )
 80015ea:	4605      	mov	r5, r0
 80015ec:	2800      	cmp	r0, #0
 80015ee:	f000 8096 	beq.w	800171e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80015f2:	2054      	movs	r0, #84	; 0x54
 80015f4:	f7ff fd04 	bl	8001000 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80015f8:	4604      	mov	r4, r0
 80015fa:	2800      	cmp	r0, #0
 80015fc:	f000 808c 	beq.w	8001718 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001600:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001604:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001606:	4455      	add	r5, sl
 8001608:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800160a:	f025 0a07 	bic.w	sl, r5, #7
 800160e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001612:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001614:	7859      	ldrb	r1, [r3, #1]
 8001616:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800161a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800161e:	b109      	cbz	r1, 8001624 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001620:	42bb      	cmp	r3, r7
 8001622:	d1f7      	bne.n	8001614 <xTaskCreate+0x40>
 8001624:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001626:	f04f 0b00 	mov.w	fp, #0
 800162a:	2d06      	cmp	r5, #6
 800162c:	bf28      	it	cs
 800162e:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001630:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001632:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001634:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001636:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001638:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800163c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001640:	f7ff fb4a 	bl	8000cd8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001644:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001648:	f104 0018 	add.w	r0, r4, #24
 800164c:	f7ff fb44 	bl	8000cd8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001650:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001654:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001656:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001658:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800165a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800165e:	464a      	mov	r2, r9
 8001660:	4641      	mov	r1, r8
 8001662:	4650      	mov	r0, sl
 8001664:	f7ff fba0 	bl	8000da8 <pxPortInitialiseStack>
 8001668:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800166a:	b106      	cbz	r6, 800166e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800166c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800166e:	f7ff fbc1 	bl	8000df4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001672:	4b32      	ldr	r3, [pc, #200]	; (800173c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001674:	4e32      	ldr	r6, [pc, #200]	; (8001740 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800176c <xTaskCreate+0x198>
 800167c:	3201      	adds	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001680:	6835      	ldr	r5, [r6, #0]
 8001682:	2d00      	cmp	r5, #0
 8001684:	d14e      	bne.n	8001724 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001686:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d11d      	bne.n	80016ca <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800168e:	eb08 0005 	add.w	r0, r8, r5
 8001692:	3514      	adds	r5, #20
 8001694:	f7ff fb15 	bl	8000cc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001698:	2d8c      	cmp	r5, #140	; 0x8c
 800169a:	d1f8      	bne.n	800168e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800169c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001770 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80016a0:	4d28      	ldr	r5, [pc, #160]	; (8001744 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80016a2:	4648      	mov	r0, r9
 80016a4:	f7ff fb0d 	bl	8000cc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80016a8:	4628      	mov	r0, r5
 80016aa:	f7ff fb0a 	bl	8000cc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80016ae:	4826      	ldr	r0, [pc, #152]	; (8001748 <xTaskCreate+0x174>)
 80016b0:	f7ff fb07 	bl	8000cc2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80016b4:	4825      	ldr	r0, [pc, #148]	; (800174c <xTaskCreate+0x178>)
 80016b6:	f7ff fb04 	bl	8000cc2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80016ba:	4825      	ldr	r0, [pc, #148]	; (8001750 <xTaskCreate+0x17c>)
 80016bc:	f7ff fb01 	bl	8000cc2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <xTaskCreate+0x180>)
 80016c2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <xTaskCreate+0x184>)
 80016c8:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80016ca:	2501      	movs	r5, #1
		uxTaskNumber++;
 80016cc:	4a23      	ldr	r2, [pc, #140]	; (800175c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80016ce:	4924      	ldr	r1, [pc, #144]	; (8001760 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80016d0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80016d2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80016d4:	3301      	adds	r3, #1
 80016d6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80016d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016da:	fa05 f302 	lsl.w	r3, r5, r2
 80016de:	4303      	orrs	r3, r0
 80016e0:	2014      	movs	r0, #20
 80016e2:	600b      	str	r3, [r1, #0]
 80016e4:	fb00 8002 	mla	r0, r0, r2, r8
 80016e8:	4639      	mov	r1, r7
 80016ea:	f7ff faf8 	bl	8000cde <vListInsertEnd>
	taskEXIT_CRITICAL();
 80016ee:	f7ff fba3 	bl	8000e38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <xTaskCreate+0x190>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b163      	cbz	r3, 8001712 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016f8:	6833      	ldr	r3, [r6, #0]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016fe:	429a      	cmp	r2, r3
 8001700:	d207      	bcs.n	8001712 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <xTaskCreate+0x194>)
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f3bf 8f4f 	dsb	sy
 800170e:	f3bf 8f6f 	isb	sy
	}
 8001712:	4628      	mov	r0, r5
 8001714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001718:	4628      	mov	r0, r5
 800171a:	f7ff fcff 	bl	800111c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800171e:	f04f 35ff 	mov.w	r5, #4294967295
 8001722:	e7f6      	b.n	8001712 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <xTaskCreate+0x190>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ce      	bne.n	80016ca <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800172c:	6833      	ldr	r3, [r6, #0]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001730:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001732:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001734:	bf98      	it	ls
 8001736:	6034      	strls	r4, [r6, #0]
 8001738:	e7c7      	b.n	80016ca <xTaskCreate+0xf6>
 800173a:	bf00      	nop
 800173c:	20000ce4 	.word	0x20000ce4
 8001740:	20000c4c 	.word	0x20000c4c
 8001744:	20000d10 	.word	0x20000d10
 8001748:	20000d30 	.word	0x20000d30
 800174c:	20000d5c 	.word	0x20000d5c
 8001750:	20000d48 	.word	0x20000d48
 8001754:	20000c50 	.word	0x20000c50
 8001758:	20000c54 	.word	0x20000c54
 800175c:	20000cf4 	.word	0x20000cf4
 8001760:	20000cf8 	.word	0x20000cf8
 8001764:	20000d44 	.word	0x20000d44
 8001768:	e000ed04 	.word	0xe000ed04
 800176c:	20000c58 	.word	0x20000c58
 8001770:	20000cfc 	.word	0x20000cfc

08001774 <vTaskStartScheduler>:
{
 8001774:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001776:	2400      	movs	r4, #0
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <vTaskStartScheduler+0x60>)
 800177a:	9400      	str	r4, [sp, #0]
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	4623      	mov	r3, r4
 8001782:	4915      	ldr	r1, [pc, #84]	; (80017d8 <vTaskStartScheduler+0x64>)
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <vTaskStartScheduler+0x68>)
 8001786:	f7ff ff25 	bl	80015d4 <xTaskCreate>
	if( xReturn == pdPASS )
 800178a:	2801      	cmp	r0, #1
 800178c:	d114      	bne.n	80017b8 <vTaskStartScheduler+0x44>
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	f383 8811 	msr	BASEPRI, r3
 8001796:	f3bf 8f6f 	isb	sy
 800179a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <vTaskStartScheduler+0x6c>)
 80017a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <vTaskStartScheduler+0x70>)
 80017a8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <vTaskStartScheduler+0x74>)
 80017ac:	601c      	str	r4, [r3, #0]
}
 80017ae:	b002      	add	sp, #8
 80017b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80017b4:	f7ff bba6 	b.w	8000f04 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017b8:	3001      	adds	r0, #1
 80017ba:	d108      	bne.n	80017ce <vTaskStartScheduler+0x5a>
 80017bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c0:	f383 8811 	msr	BASEPRI, r3
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	f3bf 8f4f 	dsb	sy
 80017cc:	e7fe      	b.n	80017cc <vTaskStartScheduler+0x58>
}
 80017ce:	b002      	add	sp, #8
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	bf00      	nop
 80017d4:	20000d24 	.word	0x20000d24
 80017d8:	0800213c 	.word	0x0800213c
 80017dc:	08001569 	.word	0x08001569
 80017e0:	20000d28 	.word	0x20000d28
 80017e4:	20000d44 	.word	0x20000d44
 80017e8:	20000d70 	.word	0x20000d70

080017ec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80017ec:	4a02      	ldr	r2, [pc, #8]	; (80017f8 <vTaskSuspendAll+0xc>)
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000cf0 	.word	0x20000cf0

080017fc <xTaskIncrementTick>:
{
 80017fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <xTaskIncrementTick+0xf8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d153      	bne.n	80018b0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <xTaskIncrementTick+0xfc>)
 800180a:	681c      	ldr	r4, [r3, #0]
 800180c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800180e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001810:	b9bc      	cbnz	r4, 8001842 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <xTaskIncrementTick+0x100>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	b142      	cbz	r2, 800182c <xTaskIncrementTick+0x30>
 800181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181e:	f383 8811 	msr	BASEPRI, r3
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	e7fe      	b.n	800182a <xTaskIncrementTick+0x2e>
 800182c:	4a34      	ldr	r2, [pc, #208]	; (8001900 <xTaskIncrementTick+0x104>)
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	6810      	ldr	r0, [r2, #0]
 8001832:	6018      	str	r0, [r3, #0]
 8001834:	6011      	str	r1, [r2, #0]
 8001836:	4a33      	ldr	r2, [pc, #204]	; (8001904 <xTaskIncrementTick+0x108>)
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	f7ff fe3b 	bl	80014b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001842:	4d31      	ldr	r5, [pc, #196]	; (8001908 <xTaskIncrementTick+0x10c>)
 8001844:	f04f 0b00 	mov.w	fp, #0
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	4f30      	ldr	r7, [pc, #192]	; (800190c <xTaskIncrementTick+0x110>)
 800184c:	429c      	cmp	r4, r3
 800184e:	d33e      	bcc.n	80018ce <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001850:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80018fc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001854:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800191c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001858:	f8d8 2000 	ldr.w	r2, [r8]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	bb72      	cbnz	r2, 80018be <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	602a      	str	r2, [r5, #0]
					break;
 8001866:	e032      	b.n	80018ce <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001868:	f106 0a04 	add.w	sl, r6, #4
 800186c:	4650      	mov	r0, sl
 800186e:	f7ff fa59 	bl	8000d24 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001872:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001874:	b119      	cbz	r1, 800187e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001876:	f106 0018 	add.w	r0, r6, #24
 800187a:	f7ff fa53 	bl	8000d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800187e:	2201      	movs	r2, #1
 8001880:	f04f 0e14 	mov.w	lr, #20
 8001884:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001886:	f8d9 3000 	ldr.w	r3, [r9]
 800188a:	fa02 f100 	lsl.w	r1, r2, r0
 800188e:	4319      	orrs	r1, r3
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <xTaskIncrementTick+0x114>)
 8001892:	f8c9 1000 	str.w	r1, [r9]
 8001896:	fb0e 3000 	mla	r0, lr, r0, r3
 800189a:	4651      	mov	r1, sl
 800189c:	f7ff fa1f 	bl	8000cde <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018a0:	6838      	ldr	r0, [r7, #0]
 80018a2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80018a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80018a6:	4291      	cmp	r1, r2
 80018a8:	bf28      	it	cs
 80018aa:	f04f 0b01 	movcs.w	fp, #1
 80018ae:	e7d3      	b.n	8001858 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80018b0:	4a18      	ldr	r2, [pc, #96]	; (8001914 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80018b2:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80018b6:	6813      	ldr	r3, [r2, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e011      	b.n	80018e2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018be:	f8d8 2000 	ldr.w	r2, [r8]
 80018c2:	68d2      	ldr	r2, [r2, #12]
 80018c4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80018c6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80018c8:	428c      	cmp	r4, r1
 80018ca:	d2cd      	bcs.n	8001868 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80018cc:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <xTaskIncrementTick+0x114>)
 80018d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018d4:	2214      	movs	r2, #20
 80018d6:	434a      	muls	r2, r1
 80018d8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80018da:	2a02      	cmp	r2, #2
 80018dc:	bf28      	it	cs
 80018de:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <xTaskIncrementTick+0x11c>)
 80018e4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	bf18      	it	ne
 80018ea:	f04f 0b01 	movne.w	fp, #1
}
 80018ee:	4658      	mov	r0, fp
 80018f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f4:	20000cf0 	.word	0x20000cf0
 80018f8:	20000d70 	.word	0x20000d70
 80018fc:	20000c50 	.word	0x20000c50
 8001900:	20000c54 	.word	0x20000c54
 8001904:	20000d2c 	.word	0x20000d2c
 8001908:	20000d28 	.word	0x20000d28
 800190c:	20000c4c 	.word	0x20000c4c
 8001910:	20000c58 	.word	0x20000c58
 8001914:	20000cec 	.word	0x20000cec
 8001918:	20000d74 	.word	0x20000d74
 800191c:	20000cf8 	.word	0x20000cf8

08001920 <xTaskResumeAll>:
{
 8001920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001924:	4c31      	ldr	r4, [pc, #196]	; (80019ec <xTaskResumeAll+0xcc>)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	b943      	cbnz	r3, 800193c <xTaskResumeAll+0x1c>
 800192a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	e7fe      	b.n	800193a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800193c:	f7ff fa5a 	bl	8000df4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001946:	6824      	ldr	r4, [r4, #0]
 8001948:	b12c      	cbz	r4, 8001956 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800194a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800194c:	f7ff fa74 	bl	8000e38 <vPortExitCritical>
}
 8001950:	4620      	mov	r0, r4
 8001952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <xTaskResumeAll+0xd0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f5      	beq.n	800194a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800195e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001a08 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001962:	4f24      	ldr	r7, [pc, #144]	; (80019f4 <xTaskResumeAll+0xd4>)
 8001964:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001a0c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001968:	f8d9 3000 	ldr.w	r3, [r9]
 800196c:	b9e3      	cbnz	r3, 80019a8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800196e:	b10c      	cbz	r4, 8001974 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001970:	f7ff fda2 	bl	80014b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001974:	4d20      	ldr	r5, [pc, #128]	; (80019f8 <xTaskResumeAll+0xd8>)
 8001976:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001978:	b144      	cbz	r4, 800198c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800197a:	2701      	movs	r7, #1
 800197c:	4e1f      	ldr	r6, [pc, #124]	; (80019fc <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800197e:	f7ff ff3d 	bl	80017fc <xTaskIncrementTick>
 8001982:	b100      	cbz	r0, 8001986 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001984:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001986:	3c01      	subs	r4, #1
 8001988:	d1f9      	bne.n	800197e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800198a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <xTaskResumeAll+0xdc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0da      	beq.n	800194a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <xTaskResumeAll+0xe0>)
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80019a4:	2401      	movs	r4, #1
 80019a6:	e7d1      	b.n	800194c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80019a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80019ac:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80019ae:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019b0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019b2:	f104 0018 	add.w	r0, r4, #24
 80019b6:	f7ff f9b5 	bl	8000d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019ba:	4630      	mov	r0, r6
 80019bc:	f7ff f9b2 	bl	8000d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019c0:	2014      	movs	r0, #20
 80019c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	fa05 f302 	lsl.w	r3, r5, r2
 80019ca:	430b      	orrs	r3, r1
 80019cc:	fb00 8002 	mla	r0, r0, r2, r8
 80019d0:	4631      	mov	r1, r6
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	f7ff f983 	bl	8000cde <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <xTaskResumeAll+0xe4>)
 80019da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80019e2:	bf24      	itt	cs
 80019e4:	4b05      	ldrcs	r3, [pc, #20]	; (80019fc <xTaskResumeAll+0xdc>)
 80019e6:	601d      	strcs	r5, [r3, #0]
 80019e8:	e7be      	b.n	8001968 <xTaskResumeAll+0x48>
 80019ea:	bf00      	nop
 80019ec:	20000cf0 	.word	0x20000cf0
 80019f0:	20000ce4 	.word	0x20000ce4
 80019f4:	20000cf8 	.word	0x20000cf8
 80019f8:	20000cec 	.word	0x20000cec
 80019fc:	20000d74 	.word	0x20000d74
 8001a00:	e000ed04 	.word	0xe000ed04
 8001a04:	20000c4c 	.word	0x20000c4c
 8001a08:	20000d30 	.word	0x20000d30
 8001a0c:	20000c58 	.word	0x20000c58

08001a10 <vTaskDelay>:
	{
 8001a10:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001a12:	b940      	cbnz	r0, 8001a26 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <vTaskDelay+0x40>)
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	f3bf 8f6f 	isb	sy
 8001a24:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <vTaskDelay+0x44>)
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	b141      	cbz	r1, 8001a3e <vTaskDelay+0x2e>
 8001a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	e7fe      	b.n	8001a3c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001a3e:	f7ff fed5 	bl	80017ec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a42:	f7ff fd4b 	bl	80014dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001a46:	f7ff ff6b 	bl	8001920 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d0e2      	beq.n	8001a14 <vTaskDelay+0x4>
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	e000ed04 	.word	0xe000ed04
 8001a54:	20000cf0 	.word	0x20000cf0

08001a58 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <vTaskSwitchContext+0x60>)
{
 8001a5a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <vTaskSwitchContext+0x64>)
 8001a60:	b112      	cbz	r2, 8001a68 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001a62:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001a68:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <vTaskSwitchContext+0x68>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	2214      	movs	r2, #20
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f1c3 031f 	rsb	r3, r3, #31
 8001a7a:	435a      	muls	r2, r3
 8001a7c:	4911      	ldr	r1, [pc, #68]	; (8001ac4 <vTaskSwitchContext+0x6c>)
 8001a7e:	588c      	ldr	r4, [r1, r2]
 8001a80:	1888      	adds	r0, r1, r2
 8001a82:	b944      	cbnz	r4, 8001a96 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	e7fe      	b.n	8001a94 <vTaskSwitchContext+0x3c>
 8001a96:	6844      	ldr	r4, [r0, #4]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	6864      	ldr	r4, [r4, #4]
 8001a9c:	440a      	add	r2, r1
 8001a9e:	4294      	cmp	r4, r2
 8001aa0:	bf08      	it	eq
 8001aa2:	6862      	ldreq	r2, [r4, #4]
 8001aa4:	6044      	str	r4, [r0, #4]
 8001aa6:	bf08      	it	eq
 8001aa8:	6042      	streq	r2, [r0, #4]
 8001aaa:	2214      	movs	r2, #20
 8001aac:	fb02 1303 	mla	r3, r2, r3, r1
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <vTaskSwitchContext+0x70>)
 8001ab6:	e7d5      	b.n	8001a64 <vTaskSwitchContext+0xc>
 8001ab8:	20000cf0 	.word	0x20000cf0
 8001abc:	20000d74 	.word	0x20000d74
 8001ac0:	20000cf8 	.word	0x20000cf8
 8001ac4:	20000c58 	.word	0x20000c58
 8001ac8:	20000c4c 	.word	0x20000c4c

08001acc <vTaskPlaceOnEventList>:
{
 8001acc:	b510      	push	{r4, lr}
 8001ace:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8001ad0:	b940      	cbnz	r0, 8001ae4 <vTaskPlaceOnEventList+0x18>
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	e7fe      	b.n	8001ae2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <vTaskPlaceOnEventList+0x30>)
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	3118      	adds	r1, #24
 8001aea:	f7ff f904 	bl	8000cf6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001aee:	4620      	mov	r0, r4
}
 8001af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001af4:	2101      	movs	r1, #1
 8001af6:	f7ff bcf1 	b.w	80014dc <prvAddCurrentTaskToDelayedList>
 8001afa:	bf00      	nop
 8001afc:	20000c4c 	.word	0x20000c4c

08001b00 <xTaskRemoveFromEventList>:
{
 8001b00:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001b02:	68c3      	ldr	r3, [r0, #12]
 8001b04:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001b06:	b944      	cbnz	r4, 8001b1a <xTaskRemoveFromEventList+0x1a>
 8001b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	e7fe      	b.n	8001b18 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001b1a:	f104 0518 	add.w	r5, r4, #24
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f7ff f900 	bl	8000d24 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <xTaskRemoveFromEventList+0x6c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b9e3      	cbnz	r3, 8001b64 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001b2a:	1d25      	adds	r5, r4, #4
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7ff f8f9 	bl	8000d24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001b32:	2301      	movs	r3, #1
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <xTaskRemoveFromEventList+0x70>)
 8001b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b38:	6808      	ldr	r0, [r1, #0]
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	4303      	orrs	r3, r0
 8001b3e:	2014      	movs	r0, #20
 8001b40:	600b      	str	r3, [r1, #0]
 8001b42:	4629      	mov	r1, r5
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <xTaskRemoveFromEventList+0x74>)
 8001b46:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001b4a:	f7ff f8c8 	bl	8000cde <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <xTaskRemoveFromEventList+0x78>)
 8001b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8001b58:	bf85      	ittet	hi
 8001b5a:	2001      	movhi	r0, #1
 8001b5c:	4b07      	ldrhi	r3, [pc, #28]	; (8001b7c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8001b5e:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8001b60:	6018      	strhi	r0, [r3, #0]
}
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001b64:	4629      	mov	r1, r5
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <xTaskRemoveFromEventList+0x80>)
 8001b68:	e7ef      	b.n	8001b4a <xTaskRemoveFromEventList+0x4a>
 8001b6a:	bf00      	nop
 8001b6c:	20000cf0 	.word	0x20000cf0
 8001b70:	20000cf8 	.word	0x20000cf8
 8001b74:	20000c58 	.word	0x20000c58
 8001b78:	20000c4c 	.word	0x20000c4c
 8001b7c:	20000d74 	.word	0x20000d74
 8001b80:	20000d30 	.word	0x20000d30

08001b84 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <vTaskInternalSetTimeOutState+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001b8a:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <vTaskInternalSetTimeOutState+0x14>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6043      	str	r3, [r0, #4]
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000d2c 	.word	0x20000d2c
 8001b98:	20000d70 	.word	0x20000d70

08001b9c <xTaskCheckForTimeOut>:
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	b940      	cbnz	r0, 8001bb6 <xTaskCheckForTimeOut+0x1a>
 8001ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba8:	f383 8811 	msr	BASEPRI, r3
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	e7fe      	b.n	8001bb4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8001bb6:	b941      	cbnz	r1, 8001bca <xTaskCheckForTimeOut+0x2e>
 8001bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	e7fe      	b.n	8001bc8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8001bca:	f7ff f913 	bl	8000df4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001bd0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8001bd2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	1c58      	adds	r0, r3, #1
 8001bd8:	d00e      	beq.n	8001bf8 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <xTaskCheckForTimeOut+0x74>)
 8001bdc:	682e      	ldr	r6, [r5, #0]
 8001bde:	6800      	ldr	r0, [r0, #0]
 8001be0:	4286      	cmp	r6, r0
 8001be2:	d001      	beq.n	8001be8 <xTaskCheckForTimeOut+0x4c>
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d20e      	bcs.n	8001c06 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001be8:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d209      	bcs.n	8001c02 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f7ff ffc6 	bl	8001b84 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8001bf8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001bfa:	f7ff f91d 	bl	8000e38 <vPortExitCritical>
}
 8001bfe:	4620      	mov	r0, r4
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8001c06:	2401      	movs	r4, #1
 8001c08:	e7f7      	b.n	8001bfa <xTaskCheckForTimeOut+0x5e>
 8001c0a:	bf00      	nop
 8001c0c:	20000d70 	.word	0x20000d70
 8001c10:	20000d2c 	.word	0x20000d2c

08001c14 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8001c14:	2201      	movs	r2, #1
 8001c16:	4b01      	ldr	r3, [pc, #4]	; (8001c1c <vTaskMissedYield+0x8>)
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4770      	bx	lr
 8001c1c:	20000d74 	.word	0x20000d74

08001c20 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <xTaskGetSchedulerState+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b133      	cbz	r3, 8001c34 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <xTaskGetSchedulerState+0x1c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2002      	moveq	r0, #2
 8001c30:	2000      	movne	r0, #0
 8001c32:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001c34:	2001      	movs	r0, #1
	}
 8001c36:	4770      	bx	lr
 8001c38:	20000d44 	.word	0x20000d44
 8001c3c:	20000cf0 	.word	0x20000cf0

08001c40 <xTaskPriorityDisinherit>:
	{
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8001c42:	4604      	mov	r4, r0
 8001c44:	b908      	cbnz	r0, 8001c4a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8001c46:	2000      	movs	r0, #0
 8001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <xTaskPriorityDisinherit+0x94>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4298      	cmp	r0, r3
 8001c50:	d008      	beq.n	8001c64 <xTaskPriorityDisinherit+0x24>
 8001c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c56:	f383 8811 	msr	BASEPRI, r3
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	f3bf 8f4f 	dsb	sy
 8001c62:	e7fe      	b.n	8001c62 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8001c64:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001c66:	b943      	cbnz	r3, 8001c7a <xTaskPriorityDisinherit+0x3a>
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	e7fe      	b.n	8001c78 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c7a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001c7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8001c7e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c80:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8001c82:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c84:	d0df      	beq.n	8001c46 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1dd      	bne.n	8001c46 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c8a:	1d05      	adds	r5, r0, #4
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	f7ff f849 	bl	8000d24 <uxListRemove>
 8001c92:	4e11      	ldr	r6, [pc, #68]	; (8001cd8 <xTaskPriorityDisinherit+0x98>)
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <xTaskPriorityDisinherit+0x9c>)
 8001c96:	b950      	cbnz	r0, 8001cae <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001c98:	2114      	movs	r1, #20
 8001c9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001c9c:	4379      	muls	r1, r7
 8001c9e:	5873      	ldr	r3, [r6, r1]
 8001ca0:	b92b      	cbnz	r3, 8001cae <xTaskPriorityDisinherit+0x6e>
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	40b8      	lsls	r0, r7
 8001ca8:	ea23 0300 	bic.w	r3, r3, r0
 8001cac:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cb0:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cb6:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8001cb8:	2401      	movs	r4, #1
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	fa04 f003 	lsl.w	r0, r4, r3
 8001cc0:	4308      	orrs	r0, r1
 8001cc2:	6010      	str	r0, [r2, #0]
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	fb00 6003 	mla	r0, r0, r3, r6
 8001ccc:	f7ff f807 	bl	8000cde <vListInsertEnd>
					xReturn = pdTRUE;
 8001cd0:	4620      	mov	r0, r4
	}
 8001cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd4:	20000c4c 	.word	0x20000c4c
 8001cd8:	20000c58 	.word	0x20000c58
 8001cdc:	20000cf8 	.word	0x20000cf8

08001ce0 <Thread1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Thread1 */
void Thread1(void const * argument)
{
 8001ce0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001ce2:	4c07      	ldr	r4, [pc, #28]	; (8001d00 <Thread1+0x20>)
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	f7fe fb91 	bl	800040e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001cec:	4620      	mov	r0, r4
 8001cee:	2140      	movs	r1, #64	; 0x40
 8001cf0:	f7fe fb8d 	bl	800040e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf8:	f7fe ffd8 	bl	8000cac <osDelay>
 8001cfc:	e7f2      	b.n	8001ce4 <Thread1+0x4>
 8001cfe:	bf00      	nop
 8001d00:	40010800 	.word	0x40010800

08001d04 <Thread2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Thread2 */
void Thread2(void const * argument)
{
 8001d04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Thread2 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d06:	4c05      	ldr	r4, [pc, #20]	; (8001d1c <Thread2+0x18>)
 8001d08:	4620      	mov	r0, r4
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	f7fe fb7f 	bl	800040e <HAL_GPIO_TogglePin>
	    osDelay(500);
 8001d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d14:	f7fe ffca 	bl	8000cac <osDelay>
 8001d18:	e7f6      	b.n	8001d08 <Thread2+0x4>
 8001d1a:	bf00      	nop
 8001d1c:	40010800 	.word	0x40010800

08001d20 <SystemClock_Config>:
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d24:	2228      	movs	r2, #40	; 0x28
 8001d26:	2100      	movs	r1, #0
 8001d28:	a806      	add	r0, sp, #24
 8001d2a:	f000 f9d6 	bl	80020da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2214      	movs	r2, #20
 8001d32:	a801      	add	r0, sp, #4
 8001d34:	f000 f9d1 	bl	80020da <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d3c:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d40:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d42:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d4a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d4e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d50:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d52:	f7fe fb63 	bl	800041c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d56:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d60:	4621      	mov	r1, r4
 8001d62:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d64:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d68:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6c:	f7fe fd30 	bl	80007d0 <HAL_RCC_ClockConfig>
}
 8001d70:	b010      	add	sp, #64	; 0x40
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <main>:
{
 8001d74:	b500      	push	{lr}
 8001d76:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001d78:	f7fe f9ea 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 8001d7c:	f7ff ffd0 	bl	8001d20 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	2210      	movs	r2, #16
 8001d82:	2100      	movs	r1, #0
 8001d84:	a809      	add	r0, sp, #36	; 0x24
 8001d86:	f000 f9a8 	bl	80020da <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <main+0xe4>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8001d8c:	2170      	movs	r1, #112	; 0x70
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8001d90:	4832      	ldr	r0, [pc, #200]	; (8001e5c <main+0xe8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	f042 0210 	orr.w	r2, r2, #16
 8001d96:	619a      	str	r2, [r3, #24]
 8001d98:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	f002 0210 	and.w	r2, r2, #16
 8001da0:	9201      	str	r2, [sp, #4]
 8001da2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da4:	699a      	ldr	r2, [r3, #24]
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8001da6:	4c2e      	ldr	r4, [pc, #184]	; (8001e60 <main+0xec>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da8:	f042 0220 	orr.w	r2, r2, #32
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	699a      	ldr	r2, [r3, #24]
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8001db0:	ae04      	add	r6, sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	f002 0220 	and.w	r2, r2, #32
 8001db6:	9202      	str	r2, [sp, #8]
 8001db8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	f042 0204 	orr.w	r2, r2, #4
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8001dce:	f7fe fb19 	bl	8000404 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	a909      	add	r1, sp, #36	; 0x24
 8001dd8:	4822      	ldr	r0, [pc, #136]	; (8001e64 <main+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dda:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ddc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f7fe fa2e 	bl	8000240 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001de4:	2370      	movs	r3, #112	; 0x70
 8001de6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	a909      	add	r1, sp, #36	; 0x24
 8001df0:	481a      	ldr	r0, [pc, #104]	; (8001e5c <main+0xe8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f7fe fa23 	bl	8000240 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8001dfa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001dfe:	481a      	ldr	r0, [pc, #104]	; (8001e68 <main+0xf4>)
  huart2.Init.BaudRate = 115200;
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <main+0xf8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001e04:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e08:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0a:	60c5      	str	r5, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e10:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e12:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e14:	f7fe fefe 	bl	8000c14 <HAL_UART_Init>
  osMutexDef(uartMutex);
 8001e18:	a80e      	add	r0, sp, #56	; 0x38
 8001e1a:	f840 5d38 	str.w	r5, [r0, #-56]!
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 8001e1e:	f7fe ff4d 	bl	8000cbc <osMutexCreate>
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <main+0xfc>)
 8001e24:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e2a:	f854 3b04 	ldr.w	r3, [r4], #4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e2e:	4629      	mov	r1, r5
 8001e30:	a804      	add	r0, sp, #16
  osThreadDef(defaultTask, Thread1, osPriorityNormal, 0, 128);
 8001e32:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e34:	f7fe ff21 	bl	8000c7a <osThreadCreate>
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <main+0x100>)
  osThreadDef(myTask02, Thread2, osPriorityIdle, 0, 128);
 8001e3a:	ae09      	add	r6, sp, #36	; 0x24
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e3c:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, Thread2, osPriorityIdle, 0, 128);
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e42:	6823      	ldr	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001e44:	4629      	mov	r1, r5
 8001e46:	a809      	add	r0, sp, #36	; 0x24
  osThreadDef(myTask02, Thread2, osPriorityIdle, 0, 128);
 8001e48:	6033      	str	r3, [r6, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001e4a:	f7fe ff16 	bl	8000c7a <osThreadCreate>
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <main+0x104>)
 8001e50:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001e52:	f7fe ff0d 	bl	8000c70 <osKernelStart>
 8001e56:	e7fe      	b.n	8001e56 <main+0xe2>
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	08002114 	.word	0x08002114
 8001e64:	40011000 	.word	0x40011000
 8001e68:	20000d88 	.word	0x20000d88
 8001e6c:	40004400 	.word	0x40004400
 8001e70:	20000d84 	.word	0x20000d84
 8001e74:	20000d7c 	.word	0x20000d7c
 8001e78:	20000d80 	.word	0x20000d80

08001e7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e7c:	6802      	ldr	r2, [r0, #0]
 8001e7e:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d101      	bne.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001e84:	f7fe b976 	b.w	8000174 <HAL_IncTick>
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_MspInit+0x48>)
{
 8001e92:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e96:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	619a      	str	r2, [r3, #24]
 8001e9e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ea0:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	f002 0201 	and.w	r2, r2, #1
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eb2:	61da      	str	r2, [r3, #28]
 8001eb4:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eb6:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec0:	f7fe f97c 	bl	80001bc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ec4:	4a05      	ldr	r2, [pc, #20]	; (8001edc <HAL_MspInit+0x4c>)
 8001ec6:	6853      	ldr	r3, [r2, #4]
 8001ec8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ecc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	b003      	add	sp, #12
 8001ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000

08001ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	2100      	movs	r1, #0
 8001eea:	a802      	add	r0, sp, #8
 8001eec:	f000 f8f5 	bl	80020da <memset>
  if(huart->Instance==USART2)
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_UART_MspInit+0x6c>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d126      	bne.n	8001f46 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001efc:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f04:	61da      	str	r2, [r3, #28]
 8001f06:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	4811      	ldr	r0, [pc, #68]	; (8001f50 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f0e:	9200      	str	r2, [sp, #0]
 8001f10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	f042 0204 	orr.w	r2, r2, #4
 8001f18:	619a      	str	r2, [r3, #24]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f24:	2304      	movs	r3, #4
 8001f26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f7fe f986 	bl	8000240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f34:	2308      	movs	r3, #8
 8001f36:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	a902      	add	r1, sp, #8
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f7fe f97d 	bl	8000240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f46:	b006      	add	sp, #24
 8001f48:	bd10      	pop	{r4, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40010800 	.word	0x40010800

08001f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001f56:	4601      	mov	r1, r0
{
 8001f58:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2019      	movs	r0, #25
 8001f5e:	f7fe f92d 	bl	80001bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001f62:	2019      	movs	r0, #25
 8001f64:	f7fe f95e 	bl	8000224 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f6a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6c:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f6e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f78:	4c11      	ldr	r4, [pc, #68]	; (8001fc0 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f82:	f7fe fce3 	bl	800094c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f86:	f7fe fcd1 	bl	800092c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_InitTick+0x70>)
 8001f8c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001f8e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f92:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_InitTick+0x74>)
 8001f96:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001f9a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f9c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f9e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001fa0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001fa2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001fa6:	f7fe fddf 	bl	8000b68 <HAL_TIM_Base_Init>
 8001faa:	b920      	cbnz	r0, 8001fb6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7fe fcec 	bl	800098a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001fb2:	b008      	add	sp, #32
 8001fb4:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	e7fb      	b.n	8001fb2 <HAL_InitTick+0x5e>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	20000dc8 	.word	0x20000dc8
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	000f4240 	.word	0x000f4240

08001fcc <NMI_Handler>:
 8001fcc:	4770      	bx	lr

08001fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler>

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	4770      	bx	lr

08001fd8 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <TIM1_UP_IRQHandler+0x8>)
 8001fda:	f7fe bcea 	b.w	80009b2 <HAL_TIM_IRQHandler>
 8001fde:	bf00      	nop
 8001fe0:	20000dc8 	.word	0x20000dc8

08001fe4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <SystemInit+0x40>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <SystemInit+0x44>)
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ffc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002000:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002008:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002010:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002012:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002016:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002018:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <SystemInit+0x48>)
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	f8ff0000 	.word	0xf8ff0000
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002030:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002032:	e003      	b.n	800203c <LoopCopyDataInit>

08002034 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002036:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002038:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800203a:	3104      	adds	r1, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800203c:	480a      	ldr	r0, [pc, #40]	; (8002068 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002040:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002042:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002044:	d3f6      	bcc.n	8002034 <CopyDataInit>
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002048:	e002      	b.n	8002050 <LoopFillZerobss>

0800204a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800204c:	f842 3b04 	str.w	r3, [r2], #4

08002050 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002052:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002054:	d3f9      	bcc.n	800204a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002056:	f7ff ffc5 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205a:	f000 f80f 	bl	800207c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800205e:	f7ff fe89 	bl	8001d74 <main>
  bx lr
 8002062:	4770      	bx	lr
  ldr r3, =_sidata
 8002064:	08002178 	.word	0x08002178
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800206c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002070:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002074:	20000e08 	.word	0x20000e08

08002078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_2_IRQHandler>
	...

0800207c <__libc_init_array>:
 800207c:	b570      	push	{r4, r5, r6, lr}
 800207e:	2500      	movs	r5, #0
 8002080:	4e0c      	ldr	r6, [pc, #48]	; (80020b4 <__libc_init_array+0x38>)
 8002082:	4c0d      	ldr	r4, [pc, #52]	; (80020b8 <__libc_init_array+0x3c>)
 8002084:	1ba4      	subs	r4, r4, r6
 8002086:	10a4      	asrs	r4, r4, #2
 8002088:	42a5      	cmp	r5, r4
 800208a:	d109      	bne.n	80020a0 <__libc_init_array+0x24>
 800208c:	f000 f82e 	bl	80020ec <_init>
 8002090:	2500      	movs	r5, #0
 8002092:	4e0a      	ldr	r6, [pc, #40]	; (80020bc <__libc_init_array+0x40>)
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <__libc_init_array+0x44>)
 8002096:	1ba4      	subs	r4, r4, r6
 8002098:	10a4      	asrs	r4, r4, #2
 800209a:	42a5      	cmp	r5, r4
 800209c:	d105      	bne.n	80020aa <__libc_init_array+0x2e>
 800209e:	bd70      	pop	{r4, r5, r6, pc}
 80020a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020a4:	4798      	blx	r3
 80020a6:	3501      	adds	r5, #1
 80020a8:	e7ee      	b.n	8002088 <__libc_init_array+0xc>
 80020aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ae:	4798      	blx	r3
 80020b0:	3501      	adds	r5, #1
 80020b2:	e7f2      	b.n	800209a <__libc_init_array+0x1e>
 80020b4:	08002170 	.word	0x08002170
 80020b8:	08002170 	.word	0x08002170
 80020bc:	08002170 	.word	0x08002170
 80020c0:	08002174 	.word	0x08002174

080020c4 <memcpy>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	1e43      	subs	r3, r0, #1
 80020c8:	440a      	add	r2, r1
 80020ca:	4291      	cmp	r1, r2
 80020cc:	d100      	bne.n	80020d0 <memcpy+0xc>
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020d8:	e7f7      	b.n	80020ca <memcpy+0x6>

080020da <memset>:
 80020da:	4603      	mov	r3, r0
 80020dc:	4402      	add	r2, r0
 80020de:	4293      	cmp	r3, r2
 80020e0:	d100      	bne.n	80020e4 <memset+0xa>
 80020e2:	4770      	bx	lr
 80020e4:	f803 1b01 	strb.w	r1, [r3], #1
 80020e8:	e7f9      	b.n	80020de <memset+0x4>
	...

080020ec <_init>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr

080020f8 <_fini>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr
